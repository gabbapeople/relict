
solar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005890  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  080059d0  080059d0  000159d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005c34  08005c34  00015c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005c38  08005c38  00015c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  20000000  08005c3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000007a4  20000098  08005cd0  00020098  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  2000083c  08005cd0  0002083c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  9 .debug_info   00021061  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000043e1  00000000  00000000  0004111e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007c37  00000000  00000000  000454ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ce8  00000000  00000000  0004d138  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000013b0  00000000  00000000  0004de20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009221  00000000  00000000  0004f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004593  00000000  00000000  000583f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005c984  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002a08  00000000  00000000  0005ca00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000098 	.word	0x20000098
 800015c:	00000000 	.word	0x00000000
 8000160:	080059b8 	.word	0x080059b8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000009c 	.word	0x2000009c
 800017c:	080059b8 	.word	0x080059b8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f092 0f00 	teq	r2, #0
 800047a:	bf14      	ite	ne
 800047c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e720      	b.n	80002d4 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aedc 	beq.w	8000282 <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6c1      	b.n	8000282 <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_frsub>:
 8000a34:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a38:	e002      	b.n	8000a40 <__addsf3>
 8000a3a:	bf00      	nop

08000a3c <__aeabi_fsub>:
 8000a3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a40 <__addsf3>:
 8000a40:	0042      	lsls	r2, r0, #1
 8000a42:	bf1f      	itttt	ne
 8000a44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a48:	ea92 0f03 	teqne	r2, r3
 8000a4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a54:	d06a      	beq.n	8000b2c <__addsf3+0xec>
 8000a56:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a5e:	bfc1      	itttt	gt
 8000a60:	18d2      	addgt	r2, r2, r3
 8000a62:	4041      	eorgt	r1, r0
 8000a64:	4048      	eorgt	r0, r1
 8000a66:	4041      	eorgt	r1, r0
 8000a68:	bfb8      	it	lt
 8000a6a:	425b      	neglt	r3, r3
 8000a6c:	2b19      	cmp	r3, #25
 8000a6e:	bf88      	it	hi
 8000a70:	4770      	bxhi	lr
 8000a72:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a7e:	bf18      	it	ne
 8000a80:	4240      	negne	r0, r0
 8000a82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a86:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a8e:	bf18      	it	ne
 8000a90:	4249      	negne	r1, r1
 8000a92:	ea92 0f03 	teq	r2, r3
 8000a96:	d03f      	beq.n	8000b18 <__addsf3+0xd8>
 8000a98:	f1a2 0201 	sub.w	r2, r2, #1
 8000a9c:	fa41 fc03 	asr.w	ip, r1, r3
 8000aa0:	eb10 000c 	adds.w	r0, r0, ip
 8000aa4:	f1c3 0320 	rsb	r3, r3, #32
 8000aa8:	fa01 f103 	lsl.w	r1, r1, r3
 8000aac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ab0:	d502      	bpl.n	8000ab8 <__addsf3+0x78>
 8000ab2:	4249      	negs	r1, r1
 8000ab4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ab8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000abc:	d313      	bcc.n	8000ae6 <__addsf3+0xa6>
 8000abe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ac2:	d306      	bcc.n	8000ad2 <__addsf3+0x92>
 8000ac4:	0840      	lsrs	r0, r0, #1
 8000ac6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aca:	f102 0201 	add.w	r2, r2, #1
 8000ace:	2afe      	cmp	r2, #254	; 0xfe
 8000ad0:	d251      	bcs.n	8000b76 <__addsf3+0x136>
 8000ad2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ad6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ada:	bf08      	it	eq
 8000adc:	f020 0001 	biceq.w	r0, r0, #1
 8000ae0:	ea40 0003 	orr.w	r0, r0, r3
 8000ae4:	4770      	bx	lr
 8000ae6:	0049      	lsls	r1, r1, #1
 8000ae8:	eb40 0000 	adc.w	r0, r0, r0
 8000aec:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000af0:	f1a2 0201 	sub.w	r2, r2, #1
 8000af4:	d1ed      	bne.n	8000ad2 <__addsf3+0x92>
 8000af6:	fab0 fc80 	clz	ip, r0
 8000afa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000afe:	ebb2 020c 	subs.w	r2, r2, ip
 8000b02:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b06:	bfaa      	itet	ge
 8000b08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b0c:	4252      	neglt	r2, r2
 8000b0e:	4318      	orrge	r0, r3
 8000b10:	bfbc      	itt	lt
 8000b12:	40d0      	lsrlt	r0, r2
 8000b14:	4318      	orrlt	r0, r3
 8000b16:	4770      	bx	lr
 8000b18:	f092 0f00 	teq	r2, #0
 8000b1c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b20:	bf06      	itte	eq
 8000b22:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b26:	3201      	addeq	r2, #1
 8000b28:	3b01      	subne	r3, #1
 8000b2a:	e7b5      	b.n	8000a98 <__addsf3+0x58>
 8000b2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b34:	bf18      	it	ne
 8000b36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b3a:	d021      	beq.n	8000b80 <__addsf3+0x140>
 8000b3c:	ea92 0f03 	teq	r2, r3
 8000b40:	d004      	beq.n	8000b4c <__addsf3+0x10c>
 8000b42:	f092 0f00 	teq	r2, #0
 8000b46:	bf08      	it	eq
 8000b48:	4608      	moveq	r0, r1
 8000b4a:	4770      	bx	lr
 8000b4c:	ea90 0f01 	teq	r0, r1
 8000b50:	bf1c      	itt	ne
 8000b52:	2000      	movne	r0, #0
 8000b54:	4770      	bxne	lr
 8000b56:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b5a:	d104      	bne.n	8000b66 <__addsf3+0x126>
 8000b5c:	0040      	lsls	r0, r0, #1
 8000b5e:	bf28      	it	cs
 8000b60:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	4770      	bx	lr
 8000b66:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b6a:	bf3c      	itt	cc
 8000b6c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bxcc	lr
 8000b72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b76:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7e:	4770      	bx	lr
 8000b80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b84:	bf16      	itet	ne
 8000b86:	4608      	movne	r0, r1
 8000b88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b8c:	4601      	movne	r1, r0
 8000b8e:	0242      	lsls	r2, r0, #9
 8000b90:	bf06      	itte	eq
 8000b92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b96:	ea90 0f01 	teqeq	r0, r1
 8000b9a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_ui2f>:
 8000ba0:	f04f 0300 	mov.w	r3, #0
 8000ba4:	e004      	b.n	8000bb0 <__aeabi_i2f+0x8>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_i2f>:
 8000ba8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bac:	bf48      	it	mi
 8000bae:	4240      	negmi	r0, r0
 8000bb0:	ea5f 0c00 	movs.w	ip, r0
 8000bb4:	bf08      	it	eq
 8000bb6:	4770      	bxeq	lr
 8000bb8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bbc:	4601      	mov	r1, r0
 8000bbe:	f04f 0000 	mov.w	r0, #0
 8000bc2:	e01c      	b.n	8000bfe <__aeabi_l2f+0x2a>

08000bc4 <__aeabi_ul2f>:
 8000bc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bc8:	bf08      	it	eq
 8000bca:	4770      	bxeq	lr
 8000bcc:	f04f 0300 	mov.w	r3, #0
 8000bd0:	e00a      	b.n	8000be8 <__aeabi_l2f+0x14>
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_l2f>:
 8000bd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bd8:	bf08      	it	eq
 8000bda:	4770      	bxeq	lr
 8000bdc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__aeabi_l2f+0x14>
 8000be2:	4240      	negs	r0, r0
 8000be4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be8:	ea5f 0c01 	movs.w	ip, r1
 8000bec:	bf02      	ittt	eq
 8000bee:	4684      	moveq	ip, r0
 8000bf0:	4601      	moveq	r1, r0
 8000bf2:	2000      	moveq	r0, #0
 8000bf4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c02:	fabc f28c 	clz	r2, ip
 8000c06:	3a08      	subs	r2, #8
 8000c08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c0c:	db10      	blt.n	8000c30 <__aeabi_l2f+0x5c>
 8000c0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c12:	4463      	add	r3, ip
 8000c14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c18:	f1c2 0220 	rsb	r2, r2, #32
 8000c1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c20:	fa20 f202 	lsr.w	r2, r0, r2
 8000c24:	eb43 0002 	adc.w	r0, r3, r2
 8000c28:	bf08      	it	eq
 8000c2a:	f020 0001 	biceq.w	r0, r0, #1
 8000c2e:	4770      	bx	lr
 8000c30:	f102 0220 	add.w	r2, r2, #32
 8000c34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c38:	f1c2 0220 	rsb	r2, r2, #32
 8000c3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c40:	fa21 f202 	lsr.w	r2, r1, r2
 8000c44:	eb43 0002 	adc.w	r0, r3, r2
 8000c48:	bf08      	it	eq
 8000c4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c4e:	4770      	bx	lr

08000c50 <__aeabi_fmul>:
 8000c50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c58:	bf1e      	ittt	ne
 8000c5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c5e:	ea92 0f0c 	teqne	r2, ip
 8000c62:	ea93 0f0c 	teqne	r3, ip
 8000c66:	d06f      	beq.n	8000d48 <__aeabi_fmul+0xf8>
 8000c68:	441a      	add	r2, r3
 8000c6a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c6e:	0240      	lsls	r0, r0, #9
 8000c70:	bf18      	it	ne
 8000c72:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c76:	d01e      	beq.n	8000cb6 <__aeabi_fmul+0x66>
 8000c78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c7c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c80:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c84:	fba0 3101 	umull	r3, r1, r0, r1
 8000c88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c8c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c90:	bf3e      	ittt	cc
 8000c92:	0049      	lslcc	r1, r1, #1
 8000c94:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c98:	005b      	lslcc	r3, r3, #1
 8000c9a:	ea40 0001 	orr.w	r0, r0, r1
 8000c9e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ca2:	2afd      	cmp	r2, #253	; 0xfd
 8000ca4:	d81d      	bhi.n	8000ce2 <__aeabi_fmul+0x92>
 8000ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000caa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cae:	bf08      	it	eq
 8000cb0:	f020 0001 	biceq.w	r0, r0, #1
 8000cb4:	4770      	bx	lr
 8000cb6:	f090 0f00 	teq	r0, #0
 8000cba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cbe:	bf08      	it	eq
 8000cc0:	0249      	lsleq	r1, r1, #9
 8000cc2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cc6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cca:	3a7f      	subs	r2, #127	; 0x7f
 8000ccc:	bfc2      	ittt	gt
 8000cce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cd2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cd6:	4770      	bxgt	lr
 8000cd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	dc5d      	bgt.n	8000da0 <__aeabi_fmul+0x150>
 8000ce4:	f112 0f19 	cmn.w	r2, #25
 8000ce8:	bfdc      	itt	le
 8000cea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cee:	4770      	bxle	lr
 8000cf0:	f1c2 0200 	rsb	r2, r2, #0
 8000cf4:	0041      	lsls	r1, r0, #1
 8000cf6:	fa21 f102 	lsr.w	r1, r1, r2
 8000cfa:	f1c2 0220 	rsb	r2, r2, #32
 8000cfe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d02:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d06:	f140 0000 	adc.w	r0, r0, #0
 8000d0a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d0e:	bf08      	it	eq
 8000d10:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d14:	4770      	bx	lr
 8000d16:	f092 0f00 	teq	r2, #0
 8000d1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d1e:	bf02      	ittt	eq
 8000d20:	0040      	lsleq	r0, r0, #1
 8000d22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d26:	3a01      	subeq	r2, #1
 8000d28:	d0f9      	beq.n	8000d1e <__aeabi_fmul+0xce>
 8000d2a:	ea40 000c 	orr.w	r0, r0, ip
 8000d2e:	f093 0f00 	teq	r3, #0
 8000d32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d36:	bf02      	ittt	eq
 8000d38:	0049      	lsleq	r1, r1, #1
 8000d3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d3e:	3b01      	subeq	r3, #1
 8000d40:	d0f9      	beq.n	8000d36 <__aeabi_fmul+0xe6>
 8000d42:	ea41 010c 	orr.w	r1, r1, ip
 8000d46:	e78f      	b.n	8000c68 <__aeabi_fmul+0x18>
 8000d48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d4c:	ea92 0f0c 	teq	r2, ip
 8000d50:	bf18      	it	ne
 8000d52:	ea93 0f0c 	teqne	r3, ip
 8000d56:	d00a      	beq.n	8000d6e <__aeabi_fmul+0x11e>
 8000d58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d5c:	bf18      	it	ne
 8000d5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d62:	d1d8      	bne.n	8000d16 <__aeabi_fmul+0xc6>
 8000d64:	ea80 0001 	eor.w	r0, r0, r1
 8000d68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	bf17      	itett	ne
 8000d74:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d78:	4608      	moveq	r0, r1
 8000d7a:	f091 0f00 	teqne	r1, #0
 8000d7e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d82:	d014      	beq.n	8000dae <__aeabi_fmul+0x15e>
 8000d84:	ea92 0f0c 	teq	r2, ip
 8000d88:	d101      	bne.n	8000d8e <__aeabi_fmul+0x13e>
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	d10f      	bne.n	8000dae <__aeabi_fmul+0x15e>
 8000d8e:	ea93 0f0c 	teq	r3, ip
 8000d92:	d103      	bne.n	8000d9c <__aeabi_fmul+0x14c>
 8000d94:	024b      	lsls	r3, r1, #9
 8000d96:	bf18      	it	ne
 8000d98:	4608      	movne	r0, r1
 8000d9a:	d108      	bne.n	8000dae <__aeabi_fmul+0x15e>
 8000d9c:	ea80 0001 	eor.w	r0, r0, r1
 8000da0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000da4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dac:	4770      	bx	lr
 8000dae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000db2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_fdiv>:
 8000db8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc0:	bf1e      	ittt	ne
 8000dc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc6:	ea92 0f0c 	teqne	r2, ip
 8000dca:	ea93 0f0c 	teqne	r3, ip
 8000dce:	d069      	beq.n	8000ea4 <__aeabi_fdiv+0xec>
 8000dd0:	eba2 0203 	sub.w	r2, r2, r3
 8000dd4:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd8:	0249      	lsls	r1, r1, #9
 8000dda:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dde:	d037      	beq.n	8000e50 <__aeabi_fdiv+0x98>
 8000de0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000de4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000de8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	428b      	cmp	r3, r1
 8000df2:	bf38      	it	cc
 8000df4:	005b      	lslcc	r3, r3, #1
 8000df6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dfa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	bf24      	itt	cs
 8000e02:	1a5b      	subcs	r3, r3, r1
 8000e04:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e08:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e0c:	bf24      	itt	cs
 8000e0e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e12:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e16:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e1a:	bf24      	itt	cs
 8000e1c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e24:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e28:	bf24      	itt	cs
 8000e2a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e2e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e32:	011b      	lsls	r3, r3, #4
 8000e34:	bf18      	it	ne
 8000e36:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e3a:	d1e0      	bne.n	8000dfe <__aeabi_fdiv+0x46>
 8000e3c:	2afd      	cmp	r2, #253	; 0xfd
 8000e3e:	f63f af50 	bhi.w	8000ce2 <__aeabi_fmul+0x92>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e48:	bf08      	it	eq
 8000e4a:	f020 0001 	biceq.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e54:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e58:	327f      	adds	r2, #127	; 0x7f
 8000e5a:	bfc2      	ittt	gt
 8000e5c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e60:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e64:	4770      	bxgt	lr
 8000e66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e6a:	f04f 0300 	mov.w	r3, #0
 8000e6e:	3a01      	subs	r2, #1
 8000e70:	e737      	b.n	8000ce2 <__aeabi_fmul+0x92>
 8000e72:	f092 0f00 	teq	r2, #0
 8000e76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e7a:	bf02      	ittt	eq
 8000e7c:	0040      	lsleq	r0, r0, #1
 8000e7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e82:	3a01      	subeq	r2, #1
 8000e84:	d0f9      	beq.n	8000e7a <__aeabi_fdiv+0xc2>
 8000e86:	ea40 000c 	orr.w	r0, r0, ip
 8000e8a:	f093 0f00 	teq	r3, #0
 8000e8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0049      	lsleq	r1, r1, #1
 8000e96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e9a:	3b01      	subeq	r3, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fdiv+0xda>
 8000e9e:	ea41 010c 	orr.w	r1, r1, ip
 8000ea2:	e795      	b.n	8000dd0 <__aeabi_fdiv+0x18>
 8000ea4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d108      	bne.n	8000ec0 <__aeabi_fdiv+0x108>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	f47f af7d 	bne.w	8000dae <__aeabi_fmul+0x15e>
 8000eb4:	ea93 0f0c 	teq	r3, ip
 8000eb8:	f47f af70 	bne.w	8000d9c <__aeabi_fmul+0x14c>
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	e776      	b.n	8000dae <__aeabi_fmul+0x15e>
 8000ec0:	ea93 0f0c 	teq	r3, ip
 8000ec4:	d104      	bne.n	8000ed0 <__aeabi_fdiv+0x118>
 8000ec6:	024b      	lsls	r3, r1, #9
 8000ec8:	f43f af4c 	beq.w	8000d64 <__aeabi_fmul+0x114>
 8000ecc:	4608      	mov	r0, r1
 8000ece:	e76e      	b.n	8000dae <__aeabi_fmul+0x15e>
 8000ed0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed4:	bf18      	it	ne
 8000ed6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eda:	d1ca      	bne.n	8000e72 <__aeabi_fdiv+0xba>
 8000edc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ee0:	f47f af5c 	bne.w	8000d9c <__aeabi_fmul+0x14c>
 8000ee4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ee8:	f47f af3c 	bne.w	8000d64 <__aeabi_fmul+0x114>
 8000eec:	e75f      	b.n	8000dae <__aeabi_fmul+0x15e>
 8000eee:	bf00      	nop

08000ef0 <__aeabi_f2iz>:
 8000ef0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ef8:	d30f      	bcc.n	8000f1a <__aeabi_f2iz+0x2a>
 8000efa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000efe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f02:	d90d      	bls.n	8000f20 <__aeabi_f2iz+0x30>
 8000f04:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f0c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f10:	fa23 f002 	lsr.w	r0, r3, r2
 8000f14:	bf18      	it	ne
 8000f16:	4240      	negne	r0, r0
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr
 8000f20:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f24:	d101      	bne.n	8000f2a <__aeabi_f2iz+0x3a>
 8000f26:	0242      	lsls	r2, r0, #9
 8000f28:	d105      	bne.n	8000f36 <__aeabi_f2iz+0x46>
 8000f2a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f2e:	bf08      	it	eq
 8000f30:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f34:	4770      	bx	lr
 8000f36:	f04f 0000 	mov.w	r0, #0
 8000f3a:	4770      	bx	lr

08000f3c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_InitTick+0x24>)
{
 8000f3e:	b510      	push	{r4, lr}
 8000f40:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f48:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f4c:	f000 fb1c 	bl	8001588 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	4621      	mov	r1, r4
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f000 fad6 	bl	8001508 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	bd10      	pop	{r4, pc}
 8000f60:	2000002c 	.word	0x2000002c

08000f64 <HAL_Init>:
{
 8000f64:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f66:	2003      	movs	r0, #3
 8000f68:	f000 fabc 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f7ff ffe5 	bl	8000f3c <HAL_InitTick>
  HAL_MspInit();
 8000f72:	f003 ff2f 	bl	8004dd4 <HAL_MspInit>
}
 8000f76:	2000      	movs	r0, #0
 8000f78:	bd08      	pop	{r3, pc}
	...

08000f7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f7c:	4a02      	ldr	r2, [pc, #8]	; (8000f88 <HAL_IncTick+0xc>)
 8000f7e:	6813      	ldr	r3, [r2, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200000c4 	.word	0x200000c4

08000f8c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f8c:	4b01      	ldr	r3, [pc, #4]	; (8000f94 <HAL_GetTick+0x8>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	200000c4 	.word	0x200000c4

08000f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000f98:	b513      	push	{r0, r1, r4, lr}
 8000f9a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000f9c:	f7ff fff6 	bl	8000f8c <HAL_GetTick>
 8000fa0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000fa2:	f7ff fff3 	bl	8000f8c <HAL_GetTick>
 8000fa6:	9b01      	ldr	r3, [sp, #4]
 8000fa8:	1b00      	subs	r0, r0, r4
 8000faa:	4298      	cmp	r0, r3
 8000fac:	d3f9      	bcc.n	8000fa2 <HAL_Delay+0xa>
  {
  }
}
 8000fae:	b002      	add	sp, #8
 8000fb0:	bd10      	pop	{r4, pc}
	...

08000fb4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	b908      	cbnz	r0, 8000fbe <HAL_ADC_Init+0xa>
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 8000fba:	2001      	movs	r0, #1
 8000fbc:	e092      	b.n	80010e4 <HAL_ADC_Init+0x130>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fbe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000fc0:	b973      	cbnz	r3, 8000fe0 <HAL_ADC_Init+0x2c>
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc2:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 8000fc4:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc8:	4b54      	ldr	r3, [pc, #336]	; (800111c <HAL_ADC_Init+0x168>)
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	f042 0201 	orr.w	r2, r2, #1
 8000fd0:	621a      	str	r2, [r3, #32]
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 8000fdc:	f002 fb50 	bl	8003680 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fe0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000fe2:	06db      	lsls	r3, r3, #27
 8000fe4:	d4e9      	bmi.n	8000fba <HAL_ADC_Init+0x6>
    ADC_STATE_CLR_SET(hadc->State,
 8000fe6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 8000fe8:	4a4d      	ldr	r2, [pc, #308]	; (8001120 <HAL_ADC_Init+0x16c>)
    ADC_STATE_CLR_SET(hadc->State,
 8000fea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fee:	f023 0302 	bic.w	r3, r3, #2
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 8000ff8:	6853      	ldr	r3, [r2, #4]
 8000ffa:	6861      	ldr	r1, [r4, #4]
 8000ffc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001000:	430b      	orrs	r3, r1
 8001002:	6053      	str	r3, [r2, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001004:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001008:	fa90 f0a0 	rbit	r0, r0
 800100c:	2302      	movs	r3, #2
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 800100e:	fab0 f080 	clz	r0, r0
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 8001012:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001014:	fa93 f3a3 	rbit	r3, r3
 8001018:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 800101c:	6965      	ldr	r5, [r4, #20]
 800101e:	68e2      	ldr	r2, [r4, #12]
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 8001020:	fa01 f303 	lsl.w	r3, r1, r3
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8001024:	432a      	orrs	r2, r5
 8001026:	6a25      	ldr	r5, [r4, #32]
 8001028:	432a      	orrs	r2, r5
 800102a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800102c:	fa05 f000 	lsl.w	r0, r5, r0
 8001030:	4302      	orrs	r2, r0
                hadc->Init.ChannelsBank                              |
 8001032:	4313      	orrs	r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001034:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001036:	6925      	ldr	r5, [r4, #16]
 8001038:	2a10      	cmp	r2, #16
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800103a:	bf1c      	itt	ne
 800103c:	6ba0      	ldrne	r0, [r4, #56]	; 0x38
 800103e:	4302      	orrne	r2, r0
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001040:	6820      	ldr	r0, [r4, #0]
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001042:	bf18      	it	ne
 8001044:	4313      	orrne	r3, r2
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001046:	6802      	ldr	r2, [r0, #0]
 8001048:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800104c:	d123      	bne.n	8001096 <HAL_ADC_Init+0xe2>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800104e:	69a6      	ldr	r6, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001050:	69e7      	ldr	r7, [r4, #28]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001052:	4333      	orrs	r3, r6
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001054:	68a6      	ldr	r6, [r4, #8]
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001056:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800105a:	ea46 0607 	orr.w	r6, r6, r7
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800105e:	d043      	beq.n	80010e8 <HAL_ADC_Init+0x134>
 8001060:	2d01      	cmp	r5, #1
 8001062:	bf08      	it	eq
 8001064:	f44f 7280 	moveq.w	r2, #256	; 0x100
                  hadc->Init.LowPowerAutoPowerOff           |
 8001068:	4332      	orrs	r2, r6
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800106a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800106c:	2e01      	cmp	r6, #1
 800106e:	d10d      	bne.n	800108c <HAL_ADC_Init+0xd8>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001070:	2900      	cmp	r1, #0
 8001072:	d13b      	bne.n	80010ec <HAL_ADC_Init+0x138>
 8001074:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001078:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800107c:	fab1 f681 	clz	r6, r1
 8001080:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001086:	3901      	subs	r1, #1
 8001088:	40b1      	lsls	r1, r6
 800108a:	430a      	orrs	r2, r1
        MODIFY_REG(hadc->Instance->CR1,
 800108c:	6846      	ldr	r6, [r0, #4]
 800108e:	4925      	ldr	r1, [pc, #148]	; (8001124 <HAL_ADC_Init+0x170>)
 8001090:	4031      	ands	r1, r6
 8001092:	430a      	orrs	r2, r1
 8001094:	6042      	str	r2, [r0, #4]
    MODIFY_REG(hadc->Instance->CR2    ,
 8001096:	6881      	ldr	r1, [r0, #8]
 8001098:	4a23      	ldr	r2, [pc, #140]	; (8001128 <HAL_ADC_Init+0x174>)
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800109a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 800109e:	ea02 0201 	and.w	r2, r2, r1
 80010a2:	ea42 0203 	orr.w	r2, r2, r3
 80010a6:	6082      	str	r2, [r0, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010a8:	d001      	beq.n	80010ae <HAL_ADC_Init+0xfa>
 80010aa:	2d01      	cmp	r5, #1
 80010ac:	d127      	bne.n	80010fe <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80010ae:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80010b0:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80010b4:	fa92 f2a2 	rbit	r2, r2
 80010b8:	fab2 f182 	clz	r1, r2
 80010bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80010be:	3a01      	subs	r2, #1
 80010c0:	408a      	lsls	r2, r1
 80010c2:	f025 71f8 	bic.w	r1, r5, #32505856	; 0x1f00000
 80010c6:	430a      	orrs	r2, r1
      MODIFY_REG(hadc->Instance->SQR1,
 80010c8:	6302      	str	r2, [r0, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80010ca:	6881      	ldr	r1, [r0, #8]
 80010cc:	4a17      	ldr	r2, [pc, #92]	; (800112c <HAL_ADC_Init+0x178>)
 80010ce:	400a      	ands	r2, r1
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d118      	bne.n	8001106 <HAL_ADC_Init+0x152>
      ADC_CLEAR_ERRORCODE(hadc);
 80010d4:	2000      	movs	r0, #0
 80010d6:	6520      	str	r0, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 80010d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80010da:	f023 0303 	bic.w	r3, r3, #3
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80010e4:	b003      	add	sp, #12
 80010e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80010e8:	462a      	mov	r2, r5
 80010ea:	e7bd      	b.n	8001068 <HAL_ADC_Init+0xb4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010ec:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80010ee:	f041 0120 	orr.w	r1, r1, #32
 80010f2:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80010f6:	f041 0101 	orr.w	r1, r1, #1
 80010fa:	6521      	str	r1, [r4, #80]	; 0x50
 80010fc:	e7c6      	b.n	800108c <HAL_ADC_Init+0xd8>
      MODIFY_REG(hadc->Instance->SQR1,
 80010fe:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001100:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001104:	e7e0      	b.n	80010c8 <HAL_ADC_Init+0x114>
      ADC_STATE_CLR_SET(hadc->State,
 8001106:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001108:	f023 0312 	bic.w	r3, r3, #18
 800110c:	f043 0310 	orr.w	r3, r3, #16
 8001110:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001112:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6523      	str	r3, [r4, #80]	; 0x50
 800111a:	e74e      	b.n	8000fba <HAL_ADC_Init+0x6>
 800111c:	40023800 	.word	0x40023800
 8001120:	40012700 	.word	0x40012700
 8001124:	fcfc16ff 	.word	0xfcfc16ff
 8001128:	c0fff189 	.word	0xc0fff189
 800112c:	bf80fffe 	.word	0xbf80fffe

08001130 <HAL_ADC_ConvCpltCallback>:
 8001130:	4770      	bx	lr

08001132 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001132:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001134:	b510      	push	{r4, lr}
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001136:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001138:	f012 0f50 	tst.w	r2, #80	; 0x50
 800113c:	d124      	bne.n	8001188 <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800113e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001144:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	6891      	ldr	r1, [r2, #8]
 800114a:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 800114e:	d117      	bne.n	8001180 <ADC_DMAConvCplt+0x4e>
 8001150:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001152:	b9a9      	cbnz	r1, 8001180 <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001154:	6b11      	ldr	r1, [r2, #48]	; 0x30
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001156:	f011 7ff8 	tst.w	r1, #32505856	; 0x1f00000
 800115a:	d002      	beq.n	8001162 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800115c:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800115e:	0549      	lsls	r1, r1, #21
 8001160:	d40e      	bmi.n	8001180 <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001162:	6851      	ldr	r1, [r2, #4]
 8001164:	f021 0120 	bic.w	r1, r1, #32
 8001168:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800116a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800116c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001170:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001174:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001176:	bf5e      	ittt	pl
 8001178:	6cda      	ldrpl	r2, [r3, #76]	; 0x4c
 800117a:	f042 0201 	orrpl.w	r2, r2, #1
 800117e:	64da      	strpl	r2, [r3, #76]	; 0x4c
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ffd5 	bl	8001130 <HAL_ADC_ConvCpltCallback>
 8001186:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  }
}
 800118a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4718      	bx	r3

08001192 <HAL_ADC_ConvHalfCpltCallback>:
 8001192:	4770      	bx	lr

08001194 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001194:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001196:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001198:	f7ff fffb 	bl	8001192 <HAL_ADC_ConvHalfCpltCallback>
 800119c:	bd08      	pop	{r3, pc}

0800119e <HAL_ADC_ErrorCallback>:
{
 800119e:	4770      	bx	lr

080011a0 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80011a2:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80011a4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80011a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011aa:	64c3      	str	r3, [r0, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80011ac:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6503      	str	r3, [r0, #80]	; 0x50
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 80011b4:	f7ff fff3 	bl	800119e <HAL_ADC_ErrorCallback>
 80011b8:	bd08      	pop	{r3, pc}
	...

080011bc <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 80011bc:	2300      	movs	r3, #0
{
 80011be:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 80011c0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80011c2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	f000 809c 	beq.w	8001304 <HAL_ADC_ConfigChannel+0x148>
 80011cc:	2301      	movs	r3, #1
  if (sConfig->Rank < 7)
 80011ce:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80011d0:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 80011d4:	2d06      	cmp	r5, #6
 80011d6:	6804      	ldr	r4, [r0, #0]
 80011d8:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80011dc:	680a      	ldr	r2, [r1, #0]
 80011de:	d821      	bhi.n	8001224 <HAL_ADC_ConfigChannel+0x68>
    MODIFY_REG(hadc->Instance->SQR5,
 80011e0:	442b      	add	r3, r5
 80011e2:	251f      	movs	r5, #31
 80011e4:	6c26      	ldr	r6, [r4, #64]	; 0x40
 80011e6:	3b05      	subs	r3, #5
 80011e8:	409d      	lsls	r5, r3
 80011ea:	ea26 0505 	bic.w	r5, r6, r5
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	432b      	orrs	r3, r5
 80011f4:	6423      	str	r3, [r4, #64]	; 0x40
  if (sConfig->Channel < ADC_CHANNEL_10)
 80011f6:	2a09      	cmp	r2, #9
 80011f8:	d84a      	bhi.n	8001290 <HAL_ADC_ConfigChannel+0xd4>
    MODIFY_REG(hadc->Instance->SMPR3,
 80011fa:	2507      	movs	r5, #7
 80011fc:	6963      	ldr	r3, [r4, #20]
 80011fe:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 8001202:	6889      	ldr	r1, [r1, #8]
 8001204:	40b5      	lsls	r5, r6
 8001206:	ea23 0305 	bic.w	r3, r3, r5
 800120a:	40b1      	lsls	r1, r6
 800120c:	430b      	orrs	r3, r1
 800120e:	6163      	str	r3, [r4, #20]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001210:	f1a2 0310 	sub.w	r3, r2, #16
 8001214:	2b01      	cmp	r3, #1
 8001216:	d95d      	bls.n	80012d4 <HAL_ADC_ConfigChannel+0x118>
  __HAL_UNLOCK(hadc);
 8001218:	2300      	movs	r3, #0
 800121a:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  return tmp_hal_status;
 800121e:	4618      	mov	r0, r3
}
 8001220:	b002      	add	sp, #8
 8001222:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13)
 8001224:	2d0c      	cmp	r5, #12
 8001226:	d80b      	bhi.n	8001240 <HAL_ADC_ConfigChannel+0x84>
    MODIFY_REG(hadc->Instance->SQR4,
 8001228:	442b      	add	r3, r5
 800122a:	251f      	movs	r5, #31
 800122c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800122e:	3b23      	subs	r3, #35	; 0x23
 8001230:	409d      	lsls	r5, r3
 8001232:	ea26 0505 	bic.w	r5, r6, r5
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	432b      	orrs	r3, r5
 800123c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800123e:	e7da      	b.n	80011f6 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 19)
 8001240:	2d12      	cmp	r5, #18
 8001242:	d80b      	bhi.n	800125c <HAL_ADC_ConfigChannel+0xa0>
    MODIFY_REG(hadc->Instance->SQR3,
 8001244:	442b      	add	r3, r5
 8001246:	251f      	movs	r5, #31
 8001248:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800124a:	3b41      	subs	r3, #65	; 0x41
 800124c:	409d      	lsls	r5, r3
 800124e:	ea26 0505 	bic.w	r5, r6, r5
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	432b      	orrs	r3, r5
 8001258:	63a3      	str	r3, [r4, #56]	; 0x38
 800125a:	e7cc      	b.n	80011f6 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 25)
 800125c:	2d18      	cmp	r5, #24
 800125e:	d80b      	bhi.n	8001278 <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SQR2,
 8001260:	442b      	add	r3, r5
 8001262:	251f      	movs	r5, #31
 8001264:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8001266:	3b5f      	subs	r3, #95	; 0x5f
 8001268:	409d      	lsls	r5, r3
 800126a:	ea26 0505 	bic.w	r5, r6, r5
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	432b      	orrs	r3, r5
 8001274:	6363      	str	r3, [r4, #52]	; 0x34
 8001276:	e7be      	b.n	80011f6 <HAL_ADC_ConfigChannel+0x3a>
    MODIFY_REG(hadc->Instance->SQR1,
 8001278:	442b      	add	r3, r5
 800127a:	251f      	movs	r5, #31
 800127c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800127e:	3b7d      	subs	r3, #125	; 0x7d
 8001280:	409d      	lsls	r5, r3
 8001282:	ea26 0505 	bic.w	r5, r6, r5
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	432b      	orrs	r3, r5
 800128c:	6323      	str	r3, [r4, #48]	; 0x30
 800128e:	e7b2      	b.n	80011f6 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001290:	2a13      	cmp	r2, #19
 8001292:	d80d      	bhi.n	80012b0 <HAL_ADC_ConfigChannel+0xf4>
    MODIFY_REG(hadc->Instance->SMPR2,
 8001294:	2607      	movs	r6, #7
 8001296:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800129a:	6923      	ldr	r3, [r4, #16]
 800129c:	3d1e      	subs	r5, #30
 800129e:	6889      	ldr	r1, [r1, #8]
 80012a0:	40ae      	lsls	r6, r5
 80012a2:	ea23 0306 	bic.w	r3, r3, r6
 80012a6:	fa01 f505 	lsl.w	r5, r1, r5
 80012aa:	432b      	orrs	r3, r5
 80012ac:	6123      	str	r3, [r4, #16]
 80012ae:	e7af      	b.n	8001210 <HAL_ADC_ConfigChannel+0x54>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80012b0:	2a1a      	cmp	r2, #26
 80012b2:	d80d      	bhi.n	80012d0 <HAL_ADC_ConfigChannel+0x114>
    MODIFY_REG(hadc->Instance->SMPR1,
 80012b4:	2607      	movs	r6, #7
 80012b6:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80012ba:	68e3      	ldr	r3, [r4, #12]
 80012bc:	3d3c      	subs	r5, #60	; 0x3c
 80012be:	6889      	ldr	r1, [r1, #8]
 80012c0:	40ae      	lsls	r6, r5
 80012c2:	ea23 0306 	bic.w	r3, r3, r6
 80012c6:	fa01 f505 	lsl.w	r5, r1, r5
 80012ca:	432b      	orrs	r3, r5
 80012cc:	60e3      	str	r3, [r4, #12]
 80012ce:	e79f      	b.n	8001210 <HAL_ADC_ConfigChannel+0x54>
  __ASM volatile ("nop");
 80012d0:	bf00      	nop
 80012d2:	e79d      	b.n	8001210 <HAL_ADC_ConfigChannel+0x54>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <HAL_ADC_ConfigChannel+0x14c>)
 80012d6:	6859      	ldr	r1, [r3, #4]
 80012d8:	0209      	lsls	r1, r1, #8
 80012da:	d49d      	bmi.n	8001218 <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80012dc:	6859      	ldr	r1, [r3, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012de:	2a10      	cmp	r2, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80012e0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80012e4:	6059      	str	r1, [r3, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012e6:	d197      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_ADC_ConfigChannel+0x150>)
 80012ea:	4a09      	ldr	r2, [pc, #36]	; (8001310 <HAL_ADC_ConfigChannel+0x154>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80012f2:	230a      	movs	r3, #10
 80012f4:	4353      	muls	r3, r2
            wait_loop_index--;
 80012f6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 80012f8:	9b01      	ldr	r3, [sp, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d08c      	beq.n	8001218 <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 80012fe:	9b01      	ldr	r3, [sp, #4]
 8001300:	3b01      	subs	r3, #1
 8001302:	e7f8      	b.n	80012f6 <HAL_ADC_ConfigChannel+0x13a>
  __HAL_LOCK(hadc);
 8001304:	2002      	movs	r0, #2
 8001306:	e78b      	b.n	8001220 <HAL_ADC_ConfigChannel+0x64>
 8001308:	40012700 	.word	0x40012700
 800130c:	2000002c 	.word	0x2000002c
 8001310:	000f4240 	.word	0x000f4240

08001314 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 8001314:	2300      	movs	r3, #0
{
 8001316:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8001318:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800131a:	6803      	ldr	r3, [r0, #0]
{
 800131c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	0652      	lsls	r2, r2, #25
 8001322:	d502      	bpl.n	800132a <ADC_Enable+0x16>
  return HAL_OK;
 8001324:	2000      	movs	r0, #0
}
 8001326:	b002      	add	sp, #8
 8001328:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	f042 0201 	orr.w	r2, r2, #1
 8001330:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <ADC_Enable+0x6c>)
 8001334:	4a13      	ldr	r2, [pc, #76]	; (8001384 <ADC_Enable+0x70>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	fbb3 f3f2 	udiv	r3, r3, r2
 800133c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      wait_loop_index--;
 8001340:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8001342:	9b01      	ldr	r3, [sp, #4]
 8001344:	b9c3      	cbnz	r3, 8001378 <ADC_Enable+0x64>
    tickstart = HAL_GetTick();    
 8001346:	f7ff fe21 	bl	8000f8c <HAL_GetTick>
 800134a:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800134c:	6823      	ldr	r3, [r4, #0]
 800134e:	681d      	ldr	r5, [r3, #0]
 8001350:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001354:	d1e6      	bne.n	8001324 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001356:	f7ff fe19 	bl	8000f8c <HAL_GetTick>
 800135a:	1b80      	subs	r0, r0, r6
 800135c:	2802      	cmp	r0, #2
 800135e:	d9f5      	bls.n	800134c <ADC_Enable+0x38>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001360:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        __HAL_UNLOCK(hadc);
 8001362:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001366:	f043 0310 	orr.w	r3, r3, #16
 800136a:	64e3      	str	r3, [r4, #76]	; 0x4c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136c:	6d23      	ldr	r3, [r4, #80]	; 0x50
        __HAL_UNLOCK(hadc);
 800136e:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6523      	str	r3, [r4, #80]	; 0x50
 8001376:	e7d6      	b.n	8001326 <ADC_Enable+0x12>
      wait_loop_index--;
 8001378:	9b01      	ldr	r3, [sp, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	e7e0      	b.n	8001340 <ADC_Enable+0x2c>
 800137e:	bf00      	nop
 8001380:	2000002c 	.word	0x2000002c
 8001384:	000f4240 	.word	0x000f4240

08001388 <HAL_ADC_Start_DMA>:
{
 8001388:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 800138c:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 8001390:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001392:	2b01      	cmp	r3, #1
{
 8001394:	460f      	mov	r7, r1
 8001396:	4690      	mov	r8, r2
  __HAL_LOCK(hadc);
 8001398:	d04e      	beq.n	8001438 <HAL_ADC_Start_DMA+0xb0>
 800139a:	2301      	movs	r3, #1
 800139c:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 80013a0:	f7ff ffb8 	bl	8001314 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80013a4:	4606      	mov	r6, r0
 80013a6:	2800      	cmp	r0, #0
 80013a8:	d143      	bne.n	8001432 <HAL_ADC_Start_DMA+0xaa>
    ADC_STATE_CLR_SET(hadc->State,
 80013aa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013ac:	6821      	ldr	r1, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80013ae:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80013b2:	f020 0001 	bic.w	r0, r0, #1
 80013b6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80013ba:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013bc:	684b      	ldr	r3, [r1, #4]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013be:	463a      	mov	r2, r7
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013c0:	055b      	lsls	r3, r3, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013c2:	bf48      	it	mi
 80013c4:	6ce0      	ldrmi	r0, [r4, #76]	; 0x4c
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013c6:	f101 0158 	add.w	r1, r1, #88	; 0x58
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013ca:	bf42      	ittt	mi
 80013cc:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80013d0:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80013d4:	64e0      	strmi	r0, [r4, #76]	; 0x4c
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013d8:	6c60      	ldr	r0, [r4, #68]	; 0x44
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013da:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013de:	bf1c      	itt	ne
 80013e0:	6d23      	ldrne	r3, [r4, #80]	; 0x50
 80013e2:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80013e6:	6523      	str	r3, [r4, #80]	; 0x50
    __HAL_UNLOCK(hadc);
 80013e8:	2300      	movs	r3, #0
 80013ea:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <HAL_ADC_Start_DMA+0xb4>)
 80013f0:	6283      	str	r3, [r0, #40]	; 0x28
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <HAL_ADC_Start_DMA+0xb8>)
 80013f4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <HAL_ADC_Start_DMA+0xbc>)
 80013f8:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013fa:	f06f 0322 	mvn.w	r3, #34	; 0x22
 80013fe:	f841 3c58 	str.w	r3, [r1, #-88]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001402:	f851 3c54 	ldr.w	r3, [r1, #-84]
 8001406:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800140a:	f841 3c54 	str.w	r3, [r1, #-84]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800140e:	f851 3c50 	ldr.w	r3, [r1, #-80]
 8001412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001416:	f841 3c50 	str.w	r3, [r1, #-80]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800141a:	4643      	mov	r3, r8
 800141c:	f000 f912 	bl	8001644 <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001428:	d103      	bne.n	8001432 <HAL_ADC_Start_DMA+0xaa>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001430:	609a      	str	r2, [r3, #8]
}
 8001432:	4630      	mov	r0, r6
 8001434:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
  __HAL_LOCK(hadc);
 8001438:	2602      	movs	r6, #2
 800143a:	e7fa      	b.n	8001432 <HAL_ADC_Start_DMA+0xaa>
 800143c:	08001133 	.word	0x08001133
 8001440:	08001195 	.word	0x08001195
 8001444:	080011a1 	.word	0x080011a1

08001448 <ADC_ConversionStop_Disable>:
{
 8001448:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800144a:	6803      	ldr	r3, [r0, #0]
{
 800144c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	0652      	lsls	r2, r2, #25
 8001452:	d401      	bmi.n	8001458 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001454:	2000      	movs	r0, #0
 8001456:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	f022 0201 	bic.w	r2, r2, #1
 800145e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001460:	f7ff fd94 	bl	8000f8c <HAL_GetTick>
 8001464:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001466:	6823      	ldr	r3, [r4, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	065b      	lsls	r3, r3, #25
 800146c:	d5f2      	bpl.n	8001454 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800146e:	f7ff fd8d 	bl	8000f8c <HAL_GetTick>
 8001472:	1b40      	subs	r0, r0, r5
 8001474:	2802      	cmp	r0, #2
 8001476:	d9f6      	bls.n	8001466 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001478:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800147a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147c:	f043 0310 	orr.w	r3, r3, #16
 8001480:	64e3      	str	r3, [r4, #76]	; 0x4c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001482:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6523      	str	r3, [r4, #80]	; 0x50
 800148a:	bd38      	pop	{r3, r4, r5, pc}

0800148c <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 800148c:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 8001490:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001492:	2b01      	cmp	r3, #1
{
 8001494:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001496:	d022      	beq.n	80014de <HAL_ADC_Stop_DMA+0x52>
 8001498:	2301      	movs	r3, #1
 800149a:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800149e:	f7ff ffd3 	bl	8001448 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 80014a2:	b9a8      	cbnz	r0, 80014d0 <HAL_ADC_Stop_DMA+0x44>
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80014a4:	6822      	ldr	r2, [r4, #0]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80014a6:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80014a8:	6893      	ldr	r3, [r2, #8]
 80014aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014ae:	6093      	str	r3, [r2, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80014b0:	f000 f906 	bl	80016c0 <HAL_DMA_Abort>
      ADC_STATE_CLR_SET(hadc->State,
 80014b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    if (tmp_hal_status == HAL_OK)
 80014b6:	b978      	cbnz	r0, 80014d8 <HAL_ADC_Stop_DMA+0x4c>
      ADC_STATE_CLR_SET(hadc->State,
 80014b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014bc:	f023 0301 	bic.w	r3, r3, #1
 80014c0:	f043 0301 	orr.w	r3, r3, #1
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80014c4:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80014c6:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80014c8:	6853      	ldr	r3, [r2, #4]
 80014ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80014ce:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hadc);
 80014d0:	2300      	movs	r3, #0
 80014d2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return tmp_hal_status;
 80014d6:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80014d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014dc:	e7f2      	b.n	80014c4 <HAL_ADC_Stop_DMA+0x38>
  __HAL_LOCK(hadc);
 80014de:	2002      	movs	r0, #2
}
 80014e0:	bd10      	pop	{r4, pc}
	...

080014e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80014e6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80014ea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014f2:	041b      	lsls	r3, r3, #16
 80014f4:	0c1b      	lsrs	r3, r3, #16
 80014f6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80014fe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001500:	60d3      	str	r3, [r2, #12]
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150a:	b530      	push	{r4, r5, lr}
 800150c:	68dc      	ldr	r4, [r3, #12]
 800150e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001512:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001516:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	2b04      	cmp	r3, #4
 800151a:	bf28      	it	cs
 800151c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001524:	bf98      	it	ls
 8001526:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	fa05 f303 	lsl.w	r3, r5, r3
 800152c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001530:	bf88      	it	hi
 8001532:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	4019      	ands	r1, r3
 8001536:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001538:	fa05 f404 	lsl.w	r4, r5, r4
 800153c:	3c01      	subs	r4, #1
 800153e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001540:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001542:	ea42 0201 	orr.w	r2, r2, r1
 8001546:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	bfaf      	iteee	ge
 800154c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	4b06      	ldrlt	r3, [pc, #24]	; (800156c <HAL_NVIC_SetPriority+0x64>)
 8001552:	f000 000f 	andlt.w	r0, r0, #15
 8001556:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	bfa5      	ittet	ge
 800155a:	b2d2      	uxtbge	r2, r2
 800155c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001566:	bd30      	pop	{r4, r5, pc}
 8001568:	e000ed00 	.word	0xe000ed00
 800156c:	e000ed14 	.word	0xe000ed14

08001570 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001570:	2301      	movs	r3, #1
 8001572:	0942      	lsrs	r2, r0, #5
 8001574:	f000 001f 	and.w	r0, r0, #31
 8001578:	fa03 f000 	lsl.w	r0, r3, r0
 800157c:	4b01      	ldr	r3, [pc, #4]	; (8001584 <HAL_NVIC_EnableIRQ+0x14>)
 800157e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100

08001588 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	3801      	subs	r0, #1
 800158a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800158e:	d20a      	bcs.n	80015a6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001596:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000e010 	.word	0xe000e010
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80015b4:	b510      	push	{r4, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015b6:	2800      	cmp	r0, #0
 80015b8:	d039      	beq.n	800162e <HAL_DMA_Init+0x7a>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015ba:	6801      	ldr	r1, [r0, #0]
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <HAL_DMA_Init+0x80>)
 80015be:	2414      	movs	r4, #20
 80015c0:	4299      	cmp	r1, r3
 80015c2:	d82c      	bhi.n	800161e <HAL_DMA_Init+0x6a>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015c4:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <HAL_DMA_Init+0x84>)
    hdma->DmaBaseAddress = DMA1;
 80015c6:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015ca:	440a      	add	r2, r1
 80015cc:	fbb2 f2f4 	udiv	r2, r2, r4
 80015d0:	0092      	lsls	r2, r2, #2
 80015d2:	6402      	str	r2, [r0, #64]	; 0x40
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 80015d4:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015d6:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015d8:	6884      	ldr	r4, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 80015da:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp |=  hdma->Init.Direction        |
 80015de:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 80015e0:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80015e2:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e4:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015e6:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ea:	4323      	orrs	r3, r4
 80015ec:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015ee:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f2:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f4:	6944      	ldr	r4, [r0, #20]
 80015f6:	4323      	orrs	r3, r4
 80015f8:	6984      	ldr	r4, [r0, #24]
 80015fa:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80015fc:	69c4      	ldr	r4, [r0, #28]
 80015fe:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001600:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001602:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001604:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 8001606:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001608:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->XferCpltCallback = NULL;
 800160a:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800160c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800160e:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001610:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_READY;
 8001612:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001616:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 800161a:	4618      	mov	r0, r3
 800161c:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <HAL_DMA_Init+0x88>)
 8001620:	440b      	add	r3, r1
 8001622:	fbb3 f3f4 	udiv	r3, r3, r4
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_DMA_Init+0x8c>)
 800162c:	e7d2      	b.n	80015d4 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 800162e:	2001      	movs	r0, #1
}
 8001630:	bd10      	pop	{r4, pc}
 8001632:	bf00      	nop
 8001634:	40026407 	.word	0x40026407
 8001638:	bffd9ff8 	.word	0xbffd9ff8
 800163c:	bffd9bf8 	.word	0xbffd9bf8
 8001640:	40026400 	.word	0x40026400

08001644 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001644:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001646:	f890 4020 	ldrb.w	r4, [r0, #32]
 800164a:	2c01      	cmp	r4, #1
 800164c:	d036      	beq.n	80016bc <HAL_DMA_Start_IT+0x78>
 800164e:	2401      	movs	r4, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8001650:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001654:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001658:	b2ed      	uxtb	r5, r5
 800165a:	42a5      	cmp	r5, r4
 800165c:	f04f 0600 	mov.w	r6, #0
 8001660:	f04f 0402 	mov.w	r4, #2
 8001664:	d128      	bne.n	80016b8 <HAL_DMA_Start_IT+0x74>
  {
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001666:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800166a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800166c:	6386      	str	r6, [r0, #56]	; 0x38
  __HAL_DMA_DISABLE(hdma);
 800166e:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001670:	6c07      	ldr	r7, [r0, #64]	; 0x40
  __HAL_DMA_DISABLE(hdma);
 8001672:	f026 0601 	bic.w	r6, r6, #1
 8001676:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001678:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 800167a:	40bd      	lsls	r5, r7
 800167c:	6075      	str	r5, [r6, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800167e:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001680:	6843      	ldr	r3, [r0, #4]
 8001682:	6805      	ldr	r5, [r0, #0]
 8001684:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8001686:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001688:	bf0b      	itete	eq
 800168a:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800168c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800168e:	60e1      	streq	r1, [r4, #12]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001690:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001692:	b14b      	cbz	r3, 80016a8 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001694:	6823      	ldr	r3, [r4, #0]
 8001696:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800169a:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);
 800169c:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800169e:	2000      	movs	r0, #0
  __HAL_DMA_ENABLE(hdma);
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	602b      	str	r3, [r5, #0]
 80016a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	f023 0304 	bic.w	r3, r3, #4
 80016ae:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016b0:	6823      	ldr	r3, [r4, #0]
 80016b2:	f043 030a 	orr.w	r3, r3, #10
 80016b6:	e7f0      	b.n	800169a <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 80016b8:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80016bc:	2002      	movs	r0, #2
} 
 80016be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016c0 <HAL_DMA_Abort>:
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c0:	6802      	ldr	r2, [r0, #0]
{
 80016c2:	4603      	mov	r3, r0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c4:	6811      	ldr	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = ((DMA_ISR_GIF1) << (hdma->ChannelIndex));
 80016c6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c8:	f021 010e 	bic.w	r1, r1, #14
 80016cc:	6011      	str	r1, [r2, #0]
  __HAL_DMA_DISABLE(hdma);
 80016ce:	6811      	ldr	r1, [r2, #0]
 80016d0:	f021 0101 	bic.w	r1, r1, #1
 80016d4:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = ((DMA_ISR_GIF1) << (hdma->ChannelIndex));
 80016d6:	2101      	movs	r1, #1
 80016d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016da:	fa01 f202 	lsl.w	r2, r1, r2
 80016de:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdma);
 80016e0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80016e2:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 80016e6:	f883 0020 	strb.w	r0, [r3, #32]
}
 80016ea:	4770      	bx	lr

080016ec <HAL_DMA_IRQHandler>:
{
 80016ec:	b470      	push	{r4, r5, r6}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80016ee:	2404      	movs	r4, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016f0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80016f2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016f4:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80016f6:	6803      	ldr	r3, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80016f8:	4094      	lsls	r4, r2
 80016fa:	4226      	tst	r6, r4
  uint32_t source_it = hdma->Instance->CCR;
 80016fc:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80016fe:	d00e      	beq.n	800171e <HAL_DMA_IRQHandler+0x32>
 8001700:	f015 0f04 	tst.w	r5, #4
 8001704:	d00b      	beq.n	800171e <HAL_DMA_IRQHandler+0x32>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800170a:	bf5e      	ittt	pl
 800170c:	681a      	ldrpl	r2, [r3, #0]
 800170e:	f022 0204 	bicpl.w	r2, r2, #4
 8001712:	601a      	strpl	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001714:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      hdma->DmaBaseAddress->IFCR  = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8001716:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001718:	b373      	cbz	r3, 8001778 <HAL_DMA_IRQHandler+0x8c>
}
 800171a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800171c:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800171e:	2402      	movs	r4, #2
 8001720:	4094      	lsls	r4, r2
 8001722:	4226      	tst	r6, r4
 8001724:	d012      	beq.n	800174c <HAL_DMA_IRQHandler+0x60>
 8001726:	f015 0f02 	tst.w	r5, #2
 800172a:	d00f      	beq.n	800174c <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	0695      	lsls	r5, r2, #26
 8001730:	d406      	bmi.n	8001740 <HAL_DMA_IRQHandler+0x54>
    __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	f022 020a 	bic.w	r2, r2, #10
 8001738:	601a      	str	r2, [r3, #0]
    hdma->State = HAL_DMA_STATE_READY;
 800173a:	2301      	movs	r3, #1
 800173c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001740:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 8001742:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001744:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001748:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800174a:	e7e5      	b.n	8001718 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800174c:	2408      	movs	r4, #8
 800174e:	4094      	lsls	r4, r2
 8001750:	4234      	tst	r4, r6
 8001752:	d011      	beq.n	8001778 <HAL_DMA_IRQHandler+0x8c>
 8001754:	072c      	lsls	r4, r5, #28
 8001756:	d50f      	bpl.n	8001778 <HAL_DMA_IRQHandler+0x8c>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001758:	681c      	ldr	r4, [r3, #0]
 800175a:	f024 040e 	bic.w	r4, r4, #14
 800175e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR  = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001760:	2301      	movs	r3, #1
 8001762:	fa03 f202 	lsl.w	r2, r3, r2
 8001766:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001768:	6383      	str	r3, [r0, #56]	; 0x38
      hdma->State = HAL_DMA_STATE_READY;
 800176a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_UNLOCK(hdma);
 800176e:	2300      	movs	r3, #0
 8001770:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001774:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001776:	e7cf      	b.n	8001718 <HAL_DMA_IRQHandler+0x2c>
}
 8001778:	bc70      	pop	{r4, r5, r6}
 800177a:	4770      	bx	lr

0800177c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 800177c:	2300      	movs	r3, #0
{ 
 800177e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001782:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	f8df 9168 	ldr.w	r9, [pc, #360]	; 80018f0 <HAL_GPIO_Init+0x174>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800178a:	4a57      	ldr	r2, [pc, #348]	; (80018e8 <HAL_GPIO_Init+0x16c>)
  while (((GPIO_Init->Pin) >> position) != 0)
 800178c:	fa38 f403 	lsrs.w	r4, r8, r3
 8001790:	d102      	bne.n	8001798 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  } 
}
 8001792:	b003      	add	sp, #12
 8001794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001798:	2401      	movs	r4, #1
 800179a:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 800179e:	ea18 050a 	ands.w	r5, r8, sl
 80017a2:	f000 8099 	beq.w	80018d8 <HAL_GPIO_Init+0x15c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80017a6:	684c      	ldr	r4, [r1, #4]
 80017a8:	f024 0b10 	bic.w	fp, r4, #16
 80017ac:	f1bb 0f02 	cmp.w	fp, #2
 80017b0:	d114      	bne.n	80017dc <HAL_GPIO_Init+0x60>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80017b2:	270f      	movs	r7, #15
        temp = GPIOx->AFR[position >> 3];
 80017b4:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80017b8:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80017bc:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80017c0:	f8de 6020 	ldr.w	r6, [lr, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80017c4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80017c8:	fa07 f70c 	lsl.w	r7, r7, ip
 80017cc:	ea26 0707 	bic.w	r7, r6, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80017d0:	690e      	ldr	r6, [r1, #16]
 80017d2:	fa06 f60c 	lsl.w	r6, r6, ip
 80017d6:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 80017d8:	f8ce 6020 	str.w	r6, [lr, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80017dc:	2703      	movs	r7, #3
 80017de:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80017e2:	fa07 f70c 	lsl.w	r7, r7, ip
 80017e6:	43ff      	mvns	r7, r7
      temp = GPIOx->MODER;
 80017e8:	6806      	ldr	r6, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017ea:	f004 0e03 	and.w	lr, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80017ee:	403e      	ands	r6, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017f0:	fa0e fe0c 	lsl.w	lr, lr, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017f4:	f10b 3bff 	add.w	fp, fp, #4294967295
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017f8:	ea4e 0606 	orr.w	r6, lr, r6
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017fc:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8001800:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001802:	d811      	bhi.n	8001828 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR; 
 8001804:	6886      	ldr	r6, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001806:	ea06 0b07 	and.w	fp, r6, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800180a:	68ce      	ldr	r6, [r1, #12]
 800180c:	fa06 fe0c 	lsl.w	lr, r6, ip
 8001810:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8001814:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001816:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001818:	ea26 0a0a 	bic.w	sl, r6, sl
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800181c:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001820:	409e      	lsls	r6, r3
 8001822:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8001826:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001828:	68c6      	ldr	r6, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800182a:	4037      	ands	r7, r6
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800182c:	688e      	ldr	r6, [r1, #8]
 800182e:	fa06 f60c 	lsl.w	r6, r6, ip
 8001832:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001834:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8001836:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001838:	d54e      	bpl.n	80018d8 <HAL_GPIO_Init+0x15c>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800183a:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	f8d9 6020 	ldr.w	r6, [r9, #32]
 8001842:	f023 0703 	bic.w	r7, r3, #3
 8001846:	f046 0601 	orr.w	r6, r6, #1
 800184a:	f8c9 6020 	str.w	r6, [r9, #32]
 800184e:	f8d9 6020 	ldr.w	r6, [r9, #32]
 8001852:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001856:	f006 0601 	and.w	r6, r6, #1
 800185a:	9601      	str	r6, [sp, #4]
 800185c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001860:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001864:	9e01      	ldr	r6, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001866:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 800186a:	68be      	ldr	r6, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800186c:	fa0e fe0c 	lsl.w	lr, lr, ip
 8001870:	ea26 0e0e 	bic.w	lr, r6, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001874:	4e1d      	ldr	r6, [pc, #116]	; (80018ec <HAL_GPIO_Init+0x170>)
 8001876:	42b0      	cmp	r0, r6
 8001878:	d030      	beq.n	80018dc <HAL_GPIO_Init+0x160>
 800187a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800187e:	42b0      	cmp	r0, r6
 8001880:	d02e      	beq.n	80018e0 <HAL_GPIO_Init+0x164>
 8001882:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001886:	42b0      	cmp	r0, r6
 8001888:	d02c      	beq.n	80018e4 <HAL_GPIO_Init+0x168>
 800188a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800188e:	42b0      	cmp	r0, r6
 8001890:	bf14      	ite	ne
 8001892:	2605      	movne	r6, #5
 8001894:	2603      	moveq	r6, #3
 8001896:	fa06 f60c 	lsl.w	r6, r6, ip
 800189a:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800189e:	60be      	str	r6, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80018a0:	43ef      	mvns	r7, r5
        temp = EXTI->IMR;
 80018a2:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018a4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80018a8:	bf0c      	ite	eq
 80018aa:	403e      	andeq	r6, r7
          SET_BIT(temp, iocurrent); 
 80018ac:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 80018ae:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 80018b0:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018b2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80018b6:	bf0c      	ite	eq
 80018b8:	403e      	andeq	r6, r7
          SET_BIT(temp, iocurrent); 
 80018ba:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 80018bc:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 80018be:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018c0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80018c4:	bf0c      	ite	eq
 80018c6:	403e      	andeq	r6, r7
          SET_BIT(temp, iocurrent); 
 80018c8:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 80018ca:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80018cc:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018ce:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80018d0:	bf54      	ite	pl
 80018d2:	403e      	andpl	r6, r7
          SET_BIT(temp, iocurrent); 
 80018d4:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 80018d6:	60d6      	str	r6, [r2, #12]
    position++;
 80018d8:	3301      	adds	r3, #1
 80018da:	e757      	b.n	800178c <HAL_GPIO_Init+0x10>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018dc:	2600      	movs	r6, #0
 80018de:	e7da      	b.n	8001896 <HAL_GPIO_Init+0x11a>
 80018e0:	2601      	movs	r6, #1
 80018e2:	e7d8      	b.n	8001896 <HAL_GPIO_Init+0x11a>
 80018e4:	2602      	movs	r6, #2
 80018e6:	e7d6      	b.n	8001896 <HAL_GPIO_Init+0x11a>
 80018e8:	40010400 	.word	0x40010400
 80018ec:	40020000 	.word	0x40020000
 80018f0:	40023800 	.word	0x40023800

080018f4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018f4:	6903      	ldr	r3, [r0, #16]
 80018f6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80018f8:	bf14      	ite	ne
 80018fa:	2001      	movne	r0, #1
 80018fc:	2000      	moveq	r0, #0
 80018fe:	4770      	bx	lr

08001900 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001900:	b10a      	cbz	r2, 8001906 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001902:	6181      	str	r1, [r0, #24]
 8001904:	4770      	bx	lr
 8001906:	0409      	lsls	r1, r1, #16
 8001908:	e7fb      	b.n	8001902 <HAL_GPIO_WritePin+0x2>

0800190a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800190a:	6802      	ldr	r2, [r0, #0]
 800190c:	6953      	ldr	r3, [r2, #20]
 800190e:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001912:	d00d      	beq.n	8001930 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001914:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001918:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800191a:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800191c:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800191e:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001920:	2300      	movs	r3, #0
 8001922:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001924:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001928:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 800192c:	2001      	movs	r0, #1
 800192e:	4770      	bx	lr
  }
  return HAL_OK;
 8001930:	4618      	mov	r0, r3
}
 8001932:	4770      	bx	lr

08001934 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001938:	4604      	mov	r4, r0
 800193a:	4617      	mov	r7, r2
 800193c:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800193e:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001942:	b28e      	uxth	r6, r1
 8001944:	6825      	ldr	r5, [r4, #0]
 8001946:	f1b8 0f01 	cmp.w	r8, #1
 800194a:	bf0c      	ite	eq
 800194c:	696b      	ldreq	r3, [r5, #20]
 800194e:	69ab      	ldrne	r3, [r5, #24]
 8001950:	ea36 0303 	bics.w	r3, r6, r3
 8001954:	bf14      	ite	ne
 8001956:	2001      	movne	r0, #1
 8001958:	2000      	moveq	r0, #0
 800195a:	b908      	cbnz	r0, 8001960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800195c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001960:	696b      	ldr	r3, [r5, #20]
 8001962:	055a      	lsls	r2, r3, #21
 8001964:	d512      	bpl.n	800198c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001966:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8001968:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800196a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800196e:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001970:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001974:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001976:	2304      	movs	r3, #4
 8001978:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800197a:	2300      	movs	r3, #0
      return HAL_ERROR;
 800197c:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 800197e:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001980:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001984:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800198c:	1c7b      	adds	r3, r7, #1
 800198e:	d0d9      	beq.n	8001944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001990:	b94f      	cbnz	r7, 80019a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001992:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001994:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001996:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001998:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800199c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 80019a0:	2003      	movs	r0, #3
 80019a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80019a6:	f7ff faf1 	bl	8000f8c <HAL_GetTick>
 80019aa:	eba0 0009 	sub.w	r0, r0, r9
 80019ae:	4287      	cmp	r7, r0
 80019b0:	d2c8      	bcs.n	8001944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80019b2:	e7ee      	b.n	8001992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

080019b4 <I2C_WaitOnFlagUntilTimeout>:
{
 80019b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019b8:	4604      	mov	r4, r0
 80019ba:	4690      	mov	r8, r2
 80019bc:	461f      	mov	r7, r3
 80019be:	9e08      	ldr	r6, [sp, #32]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019c0:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80019c4:	b28d      	uxth	r5, r1
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	f1b9 0f01 	cmp.w	r9, #1
 80019cc:	bf0c      	ite	eq
 80019ce:	695b      	ldreq	r3, [r3, #20]
 80019d0:	699b      	ldrne	r3, [r3, #24]
 80019d2:	ea35 0303 	bics.w	r3, r5, r3
 80019d6:	bf0c      	ite	eq
 80019d8:	2301      	moveq	r3, #1
 80019da:	2300      	movne	r3, #0
 80019dc:	4543      	cmp	r3, r8
 80019de:	d002      	beq.n	80019e6 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80019e0:	2000      	movs	r0, #0
}
 80019e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80019e6:	1c7b      	adds	r3, r7, #1
 80019e8:	d0ed      	beq.n	80019c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80019ea:	b95f      	cbnz	r7, 8001a04 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80019ec:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80019ee:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80019f0:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80019f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80019f6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80019fa:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001a04:	f7ff fac2 	bl	8000f8c <HAL_GetTick>
 8001a08:	1b80      	subs	r0, r0, r6
 8001a0a:	4287      	cmp	r7, r0
 8001a0c:	d2db      	bcs.n	80019c6 <I2C_WaitOnFlagUntilTimeout+0x12>
 8001a0e:	e7ed      	b.n	80019ec <I2C_WaitOnFlagUntilTimeout+0x38>

08001a10 <I2C_WaitOnTXEFlagUntilTimeout>:
{  
 8001a10:	b570      	push	{r4, r5, r6, lr}
 8001a12:	4604      	mov	r4, r0
 8001a14:	460d      	mov	r5, r1
 8001a16:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	061b      	lsls	r3, r3, #24
 8001a1e:	d501      	bpl.n	8001a24 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001a20:	2000      	movs	r0, #0
 8001a22:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a24:	4620      	mov	r0, r4
 8001a26:	f7ff ff70 	bl	800190a <I2C_IsAcknowledgeFailed>
 8001a2a:	b9a8      	cbnz	r0, 8001a58 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001a2c:	1c6a      	adds	r2, r5, #1
 8001a2e:	d0f3      	beq.n	8001a18 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a30:	b965      	cbnz	r5, 8001a4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a32:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001a34:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a36:	f043 0320 	orr.w	r3, r3, #32
 8001a3a:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a3c:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001a3e:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a40:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001a42:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001a46:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001a4a:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a4c:	f7ff fa9e 	bl	8000f8c <HAL_GetTick>
 8001a50:	1b80      	subs	r0, r0, r6
 8001a52:	4285      	cmp	r5, r0
 8001a54:	d2e0      	bcs.n	8001a18 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001a56:	e7ec      	b.n	8001a32 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001a58:	2001      	movs	r0, #1
}
 8001a5a:	bd70      	pop	{r4, r5, r6, pc}

08001a5c <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001a5c:	b570      	push	{r4, r5, r6, lr}
 8001a5e:	4604      	mov	r4, r0
 8001a60:	460d      	mov	r5, r1
 8001a62:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a64:	6820      	ldr	r0, [r4, #0]
 8001a66:	6943      	ldr	r3, [r0, #20]
 8001a68:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001a6c:	d001      	beq.n	8001a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001a6e:	2000      	movs	r0, #0
}
 8001a70:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a72:	6942      	ldr	r2, [r0, #20]
 8001a74:	06d2      	lsls	r2, r2, #27
 8001a76:	d50b      	bpl.n	8001a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a78:	f06f 0210 	mvn.w	r2, #16
 8001a7c:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8001a7e:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a80:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001a82:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001a86:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001a88:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8001a8a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001a8e:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a90:	b95d      	cbnz	r5, 8001aaa <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a92:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001a94:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a96:	f043 0320 	orr.w	r3, r3, #32
 8001a9a:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001a9c:	2320      	movs	r3, #32
 8001a9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001aa8:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001aaa:	f7ff fa6f 	bl	8000f8c <HAL_GetTick>
 8001aae:	1b80      	subs	r0, r0, r6
 8001ab0:	4285      	cmp	r5, r0
 8001ab2:	d2d7      	bcs.n	8001a64 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001ab4:	e7ed      	b.n	8001a92 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001ab6 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001ab6:	b570      	push	{r4, r5, r6, lr}
 8001ab8:	4604      	mov	r4, r0
 8001aba:	460d      	mov	r5, r1
 8001abc:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	075b      	lsls	r3, r3, #29
 8001ac4:	d501      	bpl.n	8001aca <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001aca:	4620      	mov	r0, r4
 8001acc:	f7ff ff1d 	bl	800190a <I2C_IsAcknowledgeFailed>
 8001ad0:	b9a8      	cbnz	r0, 8001afe <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001ad2:	1c6a      	adds	r2, r5, #1
 8001ad4:	d0f3      	beq.n	8001abe <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001ad6:	b965      	cbnz	r5, 8001af2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ad8:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001ada:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001adc:	f043 0320 	orr.w	r3, r3, #32
 8001ae0:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ae2:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001ae4:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ae6:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001ae8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001aec:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001af0:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001af2:	f7ff fa4b 	bl	8000f8c <HAL_GetTick>
 8001af6:	1b80      	subs	r0, r0, r6
 8001af8:	4285      	cmp	r5, r0
 8001afa:	d2e0      	bcs.n	8001abe <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001afc:	e7ec      	b.n	8001ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001afe:	2001      	movs	r0, #1
}
 8001b00:	bd70      	pop	{r4, r5, r6, pc}
	...

08001b04 <HAL_I2C_Init>:
{
 8001b04:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8001b06:	4604      	mov	r4, r0
 8001b08:	b908      	cbnz	r0, 8001b0e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	bd70      	pop	{r4, r5, r6, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001b0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b16:	b91b      	cbnz	r3, 8001b20 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001b18:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001b1c:	f001 ffe4 	bl	8003ae8 <HAL_I2C_MspInit>
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b20:	f001 f828 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
  if(pclk1 < I2C_MIN_PCLK_FREQ)
 8001b24:	4b3b      	ldr	r3, [pc, #236]	; (8001c14 <HAL_I2C_Init+0x110>)
 8001b26:	4298      	cmp	r0, r3
 8001b28:	d9ef      	bls.n	8001b0a <HAL_I2C_Init+0x6>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b2a:	2324      	movs	r3, #36	; 0x24
  freqrange = I2C_FREQ_RANGE(pclk1);
 8001b2c:	4d3a      	ldr	r5, [pc, #232]	; (8001c18 <HAL_I2C_Init+0x114>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  freqrange = I2C_FREQ_RANGE(pclk1);
 8001b32:	fbb0 f5f5 	udiv	r5, r0, r5
  __HAL_I2C_DISABLE(hi2c);
 8001b36:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b38:	4938      	ldr	r1, [pc, #224]	; (8001c1c <HAL_I2C_Init+0x118>)
  __HAL_I2C_DISABLE(hi2c);
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	f022 0201 	bic.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001b48:	432a      	orrs	r2, r5
 8001b4a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b4c:	6862      	ldr	r2, [r4, #4]
 8001b4e:	6a1e      	ldr	r6, [r3, #32]
 8001b50:	428a      	cmp	r2, r1
 8001b52:	bf81      	itttt	hi
 8001b54:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001b58:	4369      	mulhi	r1, r5
 8001b5a:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001b5e:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001b62:	bf94      	ite	ls
 8001b64:	1c69      	addls	r1, r5, #1
 8001b66:	3101      	addhi	r1, #1
 8001b68:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8001b6c:	4331      	orrs	r1, r6
 8001b6e:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b70:	69dd      	ldr	r5, [r3, #28]
 8001b72:	492a      	ldr	r1, [pc, #168]	; (8001c1c <HAL_I2C_Init+0x118>)
 8001b74:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8001b78:	428a      	cmp	r2, r1
 8001b7a:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8001b7e:	d830      	bhi.n	8001be2 <HAL_I2C_Init+0xde>
 8001b80:	0052      	lsls	r2, r2, #1
 8001b82:	fbb0 f0f2 	udiv	r0, r0, r2
 8001b86:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8001b8a:	2a03      	cmp	r2, #3
 8001b8c:	bf98      	it	ls
 8001b8e:	2004      	movls	r0, #4
 8001b90:	4328      	orrs	r0, r5
 8001b92:	61d8      	str	r0, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b94:	6819      	ldr	r1, [r3, #0]
 8001b96:	6a20      	ldr	r0, [r4, #32]
 8001b98:	69e2      	ldr	r2, [r4, #28]
 8001b9a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001b9e:	4302      	orrs	r2, r0
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ba4:	6899      	ldr	r1, [r3, #8]
 8001ba6:	68e0      	ldr	r0, [r4, #12]
 8001ba8:	6922      	ldr	r2, [r4, #16]
 8001baa:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001bae:	4302      	orrs	r2, r0
 8001bb0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bb8:	68d9      	ldr	r1, [r3, #12]
 8001bba:	69a0      	ldr	r0, [r4, #24]
 8001bbc:	6962      	ldr	r2, [r4, #20]
 8001bbe:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001bc2:	4302      	orrs	r2, r0
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001bc8:	681a      	ldr	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bca:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001bd2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bda:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bdc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8001be0:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001be2:	68a1      	ldr	r1, [r4, #8]
 8001be4:	b949      	cbnz	r1, 8001bfa <HAL_I2C_Init+0xf6>
 8001be6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001bea:	fbb0 f0f2 	udiv	r0, r0, r2
 8001bee:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8001bf2:	b162      	cbz	r2, 8001c0e <HAL_I2C_Init+0x10a>
 8001bf4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001bf8:	e7ca      	b.n	8001b90 <HAL_I2C_Init+0x8c>
 8001bfa:	2119      	movs	r1, #25
 8001bfc:	434a      	muls	r2, r1
 8001bfe:	fbb0 f0f2 	udiv	r0, r0, r2
 8001c02:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8001c06:	b112      	cbz	r2, 8001c0e <HAL_I2C_Init+0x10a>
 8001c08:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001c0c:	e7c0      	b.n	8001b90 <HAL_I2C_Init+0x8c>
 8001c0e:	2001      	movs	r0, #1
 8001c10:	e7be      	b.n	8001b90 <HAL_I2C_Init+0x8c>
 8001c12:	bf00      	nop
 8001c14:	001e847f 	.word	0x001e847f
 8001c18:	000f4240 	.word	0x000f4240
 8001c1c:	000186a0 	.word	0x000186a0

08001c20 <HAL_I2C_Master_Transmit>:
{
 8001c20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001c24:	4604      	mov	r4, r0
 8001c26:	461f      	mov	r7, r3
 8001c28:	460d      	mov	r5, r1
 8001c2a:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001c2c:	f7ff f9ae 	bl	8000f8c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001c30:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001c34:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001c36:	2b20      	cmp	r3, #32
 8001c38:	d004      	beq.n	8001c44 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY; 
 8001c3a:	2502      	movs	r5, #2
}
 8001c3c:	4628      	mov	r0, r5
 8001c3e:	b004      	add	sp, #16
 8001c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c44:	9000      	str	r0, [sp, #0]
 8001c46:	2319      	movs	r3, #25
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 8001c4e:	4620      	mov	r0, r4
 8001c50:	f7ff feb0 	bl	80019b4 <I2C_WaitOnFlagUntilTimeout>
 8001c54:	2800      	cmp	r0, #0
 8001c56:	d1f0      	bne.n	8001c3a <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001c58:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d0ec      	beq.n	8001c3a <HAL_I2C_Master_Transmit+0x1a>
 8001c60:	2301      	movs	r3, #1
 8001c62:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001c6c:	bf5e      	ittt	pl
 8001c6e:	681a      	ldrpl	r2, [r3, #0]
 8001c70:	f042 0201 	orrpl.w	r2, r2, #1
 8001c74:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c7c:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c7e:	2221      	movs	r2, #33	; 0x21
 8001c80:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c84:	2210      	movs	r2, #16
 8001c86:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c8e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001c92:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c94:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001c96:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001c98:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001c9c:	8522      	strh	r2, [r4, #40]	; 0x28
  if((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME) || (hi2c->XferOptions == I2C_NO_OPTION_FRAME))
 8001c9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ca0:	2a04      	cmp	r2, #4
 8001ca2:	d006      	beq.n	8001cb2 <HAL_I2C_Master_Transmit+0x92>
 8001ca4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ca6:	2a01      	cmp	r2, #1
 8001ca8:	d003      	beq.n	8001cb2 <HAL_I2C_Master_Transmit+0x92>
 8001caa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cac:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001cb0:	d104      	bne.n	8001cbc <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	e002      	b.n	8001cc2 <HAL_I2C_Master_Transmit+0xa2>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001cbc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cbe:	2a12      	cmp	r2, #18
 8001cc0:	d0f7      	beq.n	8001cb2 <HAL_I2C_Master_Transmit+0x92>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cc2:	9600      	str	r6, [sp, #0]
 8001cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ccc:	4620      	mov	r0, r4
 8001cce:	f7ff fe71 	bl	80019b4 <I2C_WaitOnFlagUntilTimeout>
 8001cd2:	bb28      	cbnz	r0, 8001d20 <HAL_I2C_Master_Transmit+0x100>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cd4:	6923      	ldr	r3, [r4, #16]
 8001cd6:	6822      	ldr	r2, [r4, #0]
 8001cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cdc:	d112      	bne.n	8001d04 <HAL_I2C_Master_Transmit+0xe4>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cde:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001ce2:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ce4:	4633      	mov	r3, r6
 8001ce6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001ce8:	4936      	ldr	r1, [pc, #216]	; (8001dc4 <HAL_I2C_Master_Transmit+0x1a4>)
 8001cea:	4620      	mov	r0, r4
 8001cec:	f7ff fe22 	bl	8001934 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cf0:	4605      	mov	r5, r0
 8001cf2:	b9a0      	cbnz	r0, 8001d1e <HAL_I2C_Master_Transmit+0xfe>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cf4:	6823      	ldr	r3, [r4, #0]
 8001cf6:	9003      	str	r0, [sp, #12]
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	9203      	str	r2, [sp, #12]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001d02:	e04f      	b.n	8001da4 <HAL_I2C_Master_Transmit+0x184>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d04:	11eb      	asrs	r3, r5, #7
 8001d06:	f003 0306 	and.w	r3, r3, #6
 8001d0a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001d0e:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d10:	492d      	ldr	r1, [pc, #180]	; (8001dc8 <HAL_I2C_Master_Transmit+0x1a8>)
 8001d12:	4633      	mov	r3, r6
 8001d14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001d16:	4620      	mov	r0, r4
 8001d18:	f7ff fe0c 	bl	8001934 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d1c:	b148      	cbz	r0, 8001d32 <HAL_I2C_Master_Transmit+0x112>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	d107      	bne.n	8001d3a <HAL_I2C_Master_Transmit+0x11a>
        __HAL_UNLOCK(hi2c);
 8001d2a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001d2e:	2501      	movs	r5, #1
 8001d30:	e784      	b.n	8001c3c <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d32:	6823      	ldr	r3, [r4, #0]
 8001d34:	b2ed      	uxtb	r5, r5
 8001d36:	611d      	str	r5, [r3, #16]
 8001d38:	e7d4      	b.n	8001ce4 <HAL_I2C_Master_Transmit+0xc4>
        __HAL_UNLOCK(hi2c);
 8001d3a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001d3e:	2503      	movs	r5, #3
 8001d40:	e77c      	b.n	8001c3c <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d42:	4632      	mov	r2, r6
 8001d44:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001d46:	4620      	mov	r0, r4
 8001d48:	f7ff fe62 	bl	8001a10 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d4c:	b140      	cbz	r0, 8001d60 <HAL_I2C_Master_Transmit+0x140>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d1f4      	bne.n	8001d3e <HAL_I2C_Master_Transmit+0x11e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d54:	6822      	ldr	r2, [r4, #0]
 8001d56:	6813      	ldr	r3, [r2, #0]
 8001d58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e7e6      	b.n	8001d2e <HAL_I2C_Master_Transmit+0x10e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001d62:	6820      	ldr	r0, [r4, #0]
 8001d64:	1c4b      	adds	r3, r1, #1
 8001d66:	6263      	str	r3, [r4, #36]	; 0x24
 8001d68:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001d6a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d6c:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8001d6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001d76:	1e53      	subs	r3, r2, #1
 8001d78:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 8001d7a:	6943      	ldr	r3, [r0, #20]
 8001d7c:	075b      	lsls	r3, r3, #29
 8001d7e:	d50a      	bpl.n	8001d96 <HAL_I2C_Master_Transmit+0x176>
 8001d80:	b14f      	cbz	r7, 8001d96 <HAL_I2C_Master_Transmit+0x176>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d82:	1c8b      	adds	r3, r1, #2
 8001d84:	6263      	str	r3, [r4, #36]	; 0x24
 8001d86:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001d88:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d8a:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8001d8c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001d8e:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d96:	4632      	mov	r2, r6
 8001d98:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	f7ff fe8b 	bl	8001ab6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001da0:	2800      	cmp	r0, #0
 8001da2:	d1d4      	bne.n	8001d4e <HAL_I2C_Master_Transmit+0x12e>
    while(hi2c->XferSize > 0U)
 8001da4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1cb      	bne.n	8001d42 <HAL_I2C_Master_Transmit+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001daa:	6821      	ldr	r1, [r4, #0]
 8001dac:	680a      	ldr	r2, [r1, #0]
 8001dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db2:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001db4:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8001db6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001dba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dbe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001dc2:	e73b      	b.n	8001c3c <HAL_I2C_Master_Transmit+0x1c>
 8001dc4:	00010002 	.word	0x00010002
 8001dc8:	00010008 	.word	0x00010008

08001dcc <HAL_I2C_Master_Receive>:
{
 8001dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dd0:	4604      	mov	r4, r0
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	4698      	mov	r8, r3
 8001dd6:	460d      	mov	r5, r1
 8001dd8:	4691      	mov	r9, r2
 8001dda:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001ddc:	f7ff f8d6 	bl	8000f8c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001de0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001de4:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	d004      	beq.n	8001df4 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY; 
 8001dea:	2502      	movs	r5, #2
}
 8001dec:	4628      	mov	r0, r5
 8001dee:	b009      	add	sp, #36	; 0x24
 8001df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001df4:	9000      	str	r0, [sp, #0]
 8001df6:	2319      	movs	r3, #25
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f7ff fdd8 	bl	80019b4 <I2C_WaitOnFlagUntilTimeout>
 8001e04:	2800      	cmp	r0, #0
 8001e06:	d1f0      	bne.n	8001dea <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001e08:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d0ec      	beq.n	8001dea <HAL_I2C_Master_Receive+0x1e>
 8001e10:	2301      	movs	r3, #1
 8001e12:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e16:	6823      	ldr	r3, [r4, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001e1c:	bf5e      	ittt	pl
 8001e1e:	681a      	ldrpl	r2, [r3, #0]
 8001e20:	f042 0201 	orrpl.w	r2, r2, #1
 8001e24:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e2c:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e2e:	2222      	movs	r2, #34	; 0x22
 8001e30:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e34:	2210      	movs	r2, #16
 8001e36:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e3e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001e42:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e46:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001e48:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001e4a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001e4e:	8522      	strh	r2, [r4, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e56:	601a      	str	r2, [r3, #0]
  if((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME)  || (hi2c->XferOptions == I2C_NO_OPTION_FRAME))
 8001e58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e5a:	2a04      	cmp	r2, #4
 8001e5c:	d006      	beq.n	8001e6c <HAL_I2C_Master_Receive+0xa0>
 8001e5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e60:	2a01      	cmp	r2, #1
 8001e62:	d003      	beq.n	8001e6c <HAL_I2C_Master_Receive+0xa0>
 8001e64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e66:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001e6a:	d104      	bne.n	8001e76 <HAL_I2C_Master_Receive+0xaa>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	e002      	b.n	8001e7c <HAL_I2C_Master_Receive+0xb0>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001e76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e78:	2a11      	cmp	r2, #17
 8001e7a:	d0f7      	beq.n	8001e6c <HAL_I2C_Master_Receive+0xa0>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e7c:	9600      	str	r6, [sp, #0]
 8001e7e:	463b      	mov	r3, r7
 8001e80:	2200      	movs	r2, #0
 8001e82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e86:	4620      	mov	r0, r4
 8001e88:	f7ff fd94 	bl	80019b4 <I2C_WaitOnFlagUntilTimeout>
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	d14a      	bne.n	8001f26 <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e90:	6923      	ldr	r3, [r4, #16]
 8001e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	d136      	bne.n	8001f08 <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e9a:	f045 0501 	orr.w	r5, r5, #1
 8001e9e:	b2ed      	uxtb	r5, r5
 8001ea0:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ea2:	4633      	mov	r3, r6
 8001ea4:	463a      	mov	r2, r7
 8001ea6:	4982      	ldr	r1, [pc, #520]	; (80020b0 <HAL_I2C_Master_Receive+0x2e4>)
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f7ff fd43 	bl	8001934 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eae:	4605      	mov	r5, r0
 8001eb0:	2800      	cmp	r0, #0
 8001eb2:	d137      	bne.n	8001f24 <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 8001eb4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	2a00      	cmp	r2, #0
 8001eba:	d066      	beq.n	8001f8a <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 8001ebc:	2a01      	cmp	r2, #1
 8001ebe:	d177      	bne.n	8001fb0 <HAL_I2C_Master_Receive+0x1e4>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ec6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ec8:	9504      	str	r5, [sp, #16]
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	9204      	str	r2, [sp, #16]
 8001ece:	699a      	ldr	r2, [r3, #24]
 8001ed0:	9204      	str	r2, [sp, #16]
 8001ed2:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eda:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001edc:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 80020b8 <HAL_I2C_Master_Receive+0x2ec>
    while(hi2c->XferSize > 0U)
 8001ee0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d05b      	beq.n	8001f9e <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	f200 80c3 	bhi.w	8002072 <HAL_I2C_Master_Receive+0x2a6>
        if(hi2c->XferSize == 1U)
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d17a      	bne.n	8001fe6 <HAL_I2C_Master_Receive+0x21a>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001ef0:	4632      	mov	r2, r6
 8001ef2:	4639      	mov	r1, r7
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f7ff fdb1 	bl	8001a5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001efa:	2800      	cmp	r0, #0
 8001efc:	f000 8090 	beq.w	8002020 <HAL_I2C_Master_Receive+0x254>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001f00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f02:	2b20      	cmp	r3, #32
 8001f04:	d116      	bne.n	8001f34 <HAL_I2C_Master_Receive+0x168>
 8001f06:	e03e      	b.n	8001f86 <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f08:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001f0c:	f008 0806 	and.w	r8, r8, #6
 8001f10:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001f14:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f16:	4967      	ldr	r1, [pc, #412]	; (80020b4 <HAL_I2C_Master_Receive+0x2e8>)
 8001f18:	4633      	mov	r3, r6
 8001f1a:	463a      	mov	r2, r7
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f7ff fd09 	bl	8001934 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f22:	b148      	cbz	r0, 8001f38 <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f24:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	d128      	bne.n	8001f82 <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 8001f30:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8001f34:	2501      	movs	r5, #1
 8001f36:	e759      	b.n	8001dec <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	b2ed      	uxtb	r5, r5
 8001f3c:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f3e:	463a      	mov	r2, r7
 8001f40:	4633      	mov	r3, r6
 8001f42:	495b      	ldr	r1, [pc, #364]	; (80020b0 <HAL_I2C_Master_Receive+0x2e4>)
 8001f44:	4620      	mov	r0, r4
 8001f46:	f7ff fcf5 	bl	8001934 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	2800      	cmp	r0, #0
 8001f4e:	d1e9      	bne.n	8001f24 <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	9007      	str	r0, [sp, #28]
 8001f54:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f56:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f58:	9107      	str	r1, [sp, #28]
 8001f5a:	6999      	ldr	r1, [r3, #24]
 8001f5c:	9107      	str	r1, [sp, #28]
 8001f5e:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f60:	6819      	ldr	r1, [r3, #0]
 8001f62:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001f66:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f68:	9600      	str	r6, [sp, #0]
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f70:	f7ff fd20 	bl	80019b4 <I2C_WaitOnFlagUntilTimeout>
 8001f74:	2800      	cmp	r0, #0
 8001f76:	d1d6      	bne.n	8001f26 <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001f78:	6822      	ldr	r2, [r4, #0]
 8001f7a:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8001f7e:	6113      	str	r3, [r2, #16]
 8001f80:	e78f      	b.n	8001ea2 <HAL_I2C_Master_Receive+0xd6>
        __HAL_UNLOCK(hi2c);
 8001f82:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 8001f86:	2503      	movs	r5, #3
 8001f88:	e730      	b.n	8001dec <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f8a:	9503      	str	r5, [sp, #12]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	9203      	str	r2, [sp, #12]
 8001f90:	699a      	ldr	r2, [r3, #24]
 8001f92:	9203      	str	r2, [sp, #12]
 8001f94:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f9e:	2320      	movs	r3, #32
 8001fa0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001faa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001fae:	e71d      	b.n	8001dec <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 8001fb0:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fb2:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8001fb4:	d10d      	bne.n	8001fd2 <HAL_I2C_Master_Receive+0x206>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fc2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fc4:	9505      	str	r5, [sp, #20]
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	9205      	str	r2, [sp, #20]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	9305      	str	r3, [sp, #20]
 8001fce:	9b05      	ldr	r3, [sp, #20]
 8001fd0:	e784      	b.n	8001edc <HAL_I2C_Master_Receive+0x110>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fd6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fd8:	9506      	str	r5, [sp, #24]
 8001fda:	695a      	ldr	r2, [r3, #20]
 8001fdc:	9206      	str	r2, [sp, #24]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	9306      	str	r3, [sp, #24]
 8001fe2:	9b06      	ldr	r3, [sp, #24]
 8001fe4:	e77a      	b.n	8001edc <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 8001fe6:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fe8:	9600      	str	r6, [sp, #0]
 8001fea:	463b      	mov	r3, r7
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	4641      	mov	r1, r8
 8001ff2:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001ff4:	d122      	bne.n	800203c <HAL_I2C_Master_Receive+0x270>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ff6:	f7ff fcdd 	bl	80019b4 <I2C_WaitOnFlagUntilTimeout>
 8001ffa:	2800      	cmp	r0, #0
 8001ffc:	d1c3      	bne.n	8001f86 <HAL_I2C_Master_Receive+0x1ba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffe:	6823      	ldr	r3, [r4, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002006:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002008:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	1c51      	adds	r1, r2, #1
 800200e:	6261      	str	r1, [r4, #36]	; 0x24
 8002010:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8002012:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002014:	3b01      	subs	r3, #1
 8002016:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002018:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800201a:	3b01      	subs	r3, #1
 800201c:	b29b      	uxth	r3, r3
 800201e:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	6262      	str	r2, [r4, #36]	; 0x24
 8002026:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002028:	6912      	ldr	r2, [r2, #16]
 800202a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800202c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800202e:	3b01      	subs	r3, #1
 8002030:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002032:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002034:	3b01      	subs	r3, #1
 8002036:	b29b      	uxth	r3, r3
 8002038:	8563      	strh	r3, [r4, #42]	; 0x2a
 800203a:	e751      	b.n	8001ee0 <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800203c:	f7ff fcba 	bl	80019b4 <I2C_WaitOnFlagUntilTimeout>
 8002040:	4602      	mov	r2, r0
 8002042:	2800      	cmp	r0, #0
 8002044:	d19f      	bne.n	8001f86 <HAL_I2C_Master_Receive+0x1ba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002046:	6823      	ldr	r3, [r4, #0]
 8002048:	6819      	ldr	r1, [r3, #0]
 800204a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800204e:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002050:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	1c48      	adds	r0, r1, #1
 8002056:	6260      	str	r0, [r4, #36]	; 0x24
 8002058:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 800205a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800205c:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 800205e:	3b01      	subs	r3, #1
 8002060:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002062:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002064:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8002066:	3b01      	subs	r3, #1
 8002068:	b29b      	uxth	r3, r3
 800206a:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800206c:	4620      	mov	r0, r4
 800206e:	463b      	mov	r3, r7
 8002070:	e7c1      	b.n	8001ff6 <HAL_I2C_Master_Receive+0x22a>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002072:	4632      	mov	r2, r6
 8002074:	4639      	mov	r1, r7
 8002076:	4620      	mov	r0, r4
 8002078:	f7ff fcf0 	bl	8001a5c <I2C_WaitOnRXNEFlagUntilTimeout>
 800207c:	2800      	cmp	r0, #0
 800207e:	f47f af3f 	bne.w	8001f00 <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002082:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	6262      	str	r2, [r4, #36]	; 0x24
 8002088:	6822      	ldr	r2, [r4, #0]
 800208a:	6912      	ldr	r2, [r2, #16]
 800208c:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800208e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002090:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8002092:	3b01      	subs	r3, #1
 8002094:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002096:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002098:	3b01      	subs	r3, #1
 800209a:	b29b      	uxth	r3, r3
 800209c:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800209e:	6953      	ldr	r3, [r2, #20]
 80020a0:	075b      	lsls	r3, r3, #29
 80020a2:	f57f af1d 	bpl.w	8001ee0 <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020a8:	1c59      	adds	r1, r3, #1
 80020aa:	6261      	str	r1, [r4, #36]	; 0x24
 80020ac:	e7bc      	b.n	8002028 <HAL_I2C_Master_Receive+0x25c>
 80020ae:	bf00      	nop
 80020b0:	00010002 	.word	0x00010002
 80020b4:	00010008 	.word	0x00010008
 80020b8:	00010004 	.word	0x00010004

080020bc <HAL_I2C_IsDeviceReady>:
{
 80020bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80020c0:	4604      	mov	r4, r0
 80020c2:	461f      	mov	r7, r3
 80020c4:	468a      	mov	sl, r1
 80020c6:	4691      	mov	r9, r2
  tickstart = HAL_GetTick();
 80020c8:	f7fe ff60 	bl	8000f8c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80020cc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80020d0:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80020d2:	2b20      	cmp	r3, #32
 80020d4:	d003      	beq.n	80020de <HAL_I2C_IsDeviceReady+0x22>
    return HAL_BUSY;
 80020d6:	2002      	movs	r0, #2
}
 80020d8:	b004      	add	sp, #16
 80020da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020de:	9000      	str	r0, [sp, #0]
 80020e0:	2319      	movs	r3, #25
 80020e2:	2201      	movs	r2, #1
 80020e4:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 80020e8:	4620      	mov	r0, r4
 80020ea:	f7ff fc63 	bl	80019b4 <I2C_WaitOnFlagUntilTimeout>
 80020ee:	2800      	cmp	r0, #0
 80020f0:	d1f1      	bne.n	80020d6 <HAL_I2C_IsDeviceReady+0x1a>
    __HAL_LOCK(hi2c);
 80020f2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d0ed      	beq.n	80020d6 <HAL_I2C_IsDeviceReady+0x1a>
 80020fa:	2301      	movs	r3, #1
 80020fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002100:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002102:	2500      	movs	r5, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002104:	681a      	ldr	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002106:	f00a 0afe 	and.w	sl, sl, #254	; 0xfe
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800210a:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800210c:	bf5e      	ittt	pl
 800210e:	681a      	ldrpl	r2, [r3, #0]
 8002110:	f042 0201 	orrpl.w	r2, r2, #1
 8002114:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800211c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800211e:	2324      	movs	r3, #36	; 0x24
 8002120:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002124:	4b36      	ldr	r3, [pc, #216]	; (8002200 <HAL_I2C_IsDeviceReady+0x144>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002126:	6425      	str	r5, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002128:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800212a:	6822      	ldr	r2, [r4, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800212c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002130:	6813      	ldr	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002132:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002138:	6013      	str	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800213a:	9600      	str	r6, [sp, #0]
 800213c:	463b      	mov	r3, r7
 800213e:	2200      	movs	r2, #0
 8002140:	f7ff fc38 	bl	80019b4 <I2C_WaitOnFlagUntilTimeout>
 8002144:	b108      	cbz	r0, 800214a <HAL_I2C_IsDeviceReady+0x8e>
        return HAL_TIMEOUT;
 8002146:	2003      	movs	r0, #3
 8002148:	e7c6      	b.n	80020d8 <HAL_I2C_IsDeviceReady+0x1c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800214a:	6823      	ldr	r3, [r4, #0]
            hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800214c:	f04f 08a0 	mov.w	r8, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002150:	f8c3 a010 	str.w	sl, [r3, #16]
      tickstart = HAL_GetTick();
 8002154:	f7fe ff1a 	bl	8000f8c <HAL_GetTick>
 8002158:	4606      	mov	r6, r0
      while((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == RESET) && \
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	0790      	lsls	r0, r2, #30
 8002160:	d526      	bpl.n	80021b0 <HAL_I2C_IsDeviceReady+0xf4>
      hi2c->State = HAL_I2C_STATE_READY;
 8002162:	f04f 0820 	mov.w	r8, #32
 8002166:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	0791      	lsls	r1, r2, #30
 800216e:	d52d      	bpl.n	80021cc <HAL_I2C_IsDeviceReady+0x110>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002170:	681a      	ldr	r2, [r3, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002172:	f04f 1102 	mov.w	r1, #131074	; 0x20002
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800217a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800217c:	2200      	movs	r2, #0
 800217e:	9203      	str	r2, [sp, #12]
 8002180:	695a      	ldr	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002182:	4620      	mov	r0, r4
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002184:	9203      	str	r2, [sp, #12]
 8002186:	699b      	ldr	r3, [r3, #24]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002188:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800218a:	9303      	str	r3, [sp, #12]
 800218c:	9b03      	ldr	r3, [sp, #12]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800218e:	9600      	str	r6, [sp, #0]
 8002190:	2319      	movs	r3, #25
 8002192:	f7ff fc0f 	bl	80019b4 <I2C_WaitOnFlagUntilTimeout>
 8002196:	2800      	cmp	r0, #0
 8002198:	d1d5      	bne.n	8002146 <HAL_I2C_IsDeviceReady+0x8a>
        hi2c->State = HAL_I2C_STATE_READY;
 800219a:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800219e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 80021a2:	e799      	b.n	80020d8 <HAL_I2C_IsDeviceReady+0x1c>
          if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80021a4:	f7fe fef2 	bl	8000f8c <HAL_GetTick>
 80021a8:	1b80      	subs	r0, r0, r6
 80021aa:	4287      	cmp	r7, r0
 80021ac:	d30b      	bcc.n	80021c6 <HAL_I2C_IsDeviceReady+0x10a>
 80021ae:	e7d4      	b.n	800215a <HAL_I2C_IsDeviceReady+0x9e>
            (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && \
 80021b0:	695a      	ldr	r2, [r3, #20]
      while((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == RESET) && \
 80021b2:	0552      	lsls	r2, r2, #21
 80021b4:	d4d5      	bmi.n	8002162 <HAL_I2C_IsDeviceReady+0xa6>
            (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 80021b6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
            (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && \
 80021ba:	2aa0      	cmp	r2, #160	; 0xa0
 80021bc:	d0d1      	beq.n	8002162 <HAL_I2C_IsDeviceReady+0xa6>
        if(Timeout != HAL_MAX_DELAY)
 80021be:	1c7a      	adds	r2, r7, #1
 80021c0:	d0cc      	beq.n	800215c <HAL_I2C_IsDeviceReady+0xa0>
          if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80021c2:	2f00      	cmp	r7, #0
 80021c4:	d1ee      	bne.n	80021a4 <HAL_I2C_IsDeviceReady+0xe8>
            hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80021c6:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
 80021ca:	e7c6      	b.n	800215a <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021cc:	681a      	ldr	r2, [r3, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ce:	f04f 1102 	mov.w	r1, #131074	; 0x20002
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021dc:	4620      	mov	r0, r4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021de:	615a      	str	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021e0:	9600      	str	r6, [sp, #0]
 80021e2:	2319      	movs	r3, #25
 80021e4:	2201      	movs	r2, #1
 80021e6:	f7ff fbe5 	bl	80019b4 <I2C_WaitOnFlagUntilTimeout>
 80021ea:	2800      	cmp	r0, #0
 80021ec:	d1ab      	bne.n	8002146 <HAL_I2C_IsDeviceReady+0x8a>
 80021ee:	3501      	adds	r5, #1
    }while(I2C_Trials++ < Trials);
 80021f0:	45a9      	cmp	r9, r5
 80021f2:	d89a      	bhi.n	800212a <HAL_I2C_IsDeviceReady+0x6e>
    __HAL_UNLOCK(hi2c);
 80021f4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80021f8:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    return HAL_ERROR;
 80021fc:	2001      	movs	r0, #1
 80021fe:	e76b      	b.n	80020d8 <HAL_I2C_IsDeviceReady+0x1c>
 8002200:	ffff0000 	.word	0xffff0000

08002204 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002204:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8002206:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800220e:	d00c      	beq.n	800222a <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 8002210:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8002212:	491a      	ldr	r1, [pc, #104]	; (800227c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8002214:	680b      	ldr	r3, [r1, #0]
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800221e:	6808      	ldr	r0, [r1, #0]
 8002220:	f000 0001 	and.w	r0, r0, #1
 8002224:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8002226:	b002      	add	sp, #8
 8002228:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800222a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800222c:	4914      	ldr	r1, [pc, #80]	; (8002280 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800222e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002232:	d00f      	beq.n	8002254 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002234:	680a      	ldr	r2, [r1, #0]
 8002236:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800223a:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800223e:	d1e7      	bne.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8002240:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8002244:	d1e4      	bne.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 8002246:	4a0d      	ldr	r2, [pc, #52]	; (800227c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8002248:	6813      	ldr	r3, [r2, #0]
 800224a:	f043 0304 	orr.w	r3, r3, #4
 800224e:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8002250:	2201      	movs	r2, #1
 8002252:	e7de      	b.n	8002212 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002256:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800225a:	625a      	str	r2, [r3, #36]	; 0x24
 800225c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800225e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002262:	9201      	str	r2, [sp, #4]
 8002264:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002266:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002268:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800226a:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800226e:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8002272:	6259      	str	r1, [r3, #36]	; 0x24
 8002274:	e7e1      	b.n	800223a <RCC_SetFlashLatencyFromMSIRange+0x36>
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800
 800227c:	40023c00 	.word	0x40023c00
 8002280:	40007000 	.word	0x40007000

08002284 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002284:	6803      	ldr	r3, [r0, #0]
{
 8002286:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228a:	07d9      	lsls	r1, r3, #31
{
 800228c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228e:	d46a      	bmi.n	8002366 <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002290:	6823      	ldr	r3, [r4, #0]
 8002292:	079a      	lsls	r2, r3, #30
 8002294:	f100 80e6 	bmi.w	8002464 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002298:	6823      	ldr	r3, [r4, #0]
 800229a:	06de      	lsls	r6, r3, #27
 800229c:	d555      	bpl.n	800234a <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800229e:	4dc1      	ldr	r5, [pc, #772]	; (80025a4 <HAL_RCC_OscConfig+0x320>)
 80022a0:	68ab      	ldr	r3, [r5, #8]
 80022a2:	f013 0f0c 	tst.w	r3, #12
 80022a6:	f040 8183 	bne.w	80025b0 <HAL_RCC_OscConfig+0x32c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ae:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022b2:	6829      	ldr	r1, [r5, #0]
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	2201      	movs	r2, #1
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	420b      	tst	r3, r1
 80022c8:	d002      	beq.n	80022d0 <HAL_RCC_OscConfig+0x4c>
 80022ca:	69a3      	ldr	r3, [r4, #24]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d06e      	beq.n	80023ae <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022d0:	4db4      	ldr	r5, [pc, #720]	; (80025a4 <HAL_RCC_OscConfig+0x320>)
 80022d2:	6a20      	ldr	r0, [r4, #32]
 80022d4:	686b      	ldr	r3, [r5, #4]
 80022d6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80022da:	4298      	cmp	r0, r3
 80022dc:	f240 814a 	bls.w	8002574 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022e0:	f7ff ff90 	bl	8002204 <RCC_SetFlashLatencyFromMSIRange>
 80022e4:	2800      	cmp	r0, #0
 80022e6:	d162      	bne.n	80023ae <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e8:	686b      	ldr	r3, [r5, #4]
 80022ea:	6a22      	ldr	r2, [r4, #32]
 80022ec:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80022f0:	4313      	orrs	r3, r2
 80022f2:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022f4:	6869      	ldr	r1, [r5, #4]
 80022f6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80022fa:	fa93 f3a3 	rbit	r3, r3
 80022fe:	fab3 f283 	clz	r2, r3
 8002302:	69e3      	ldr	r3, [r4, #28]
 8002304:	4093      	lsls	r3, r2
 8002306:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 800230a:	4313      	orrs	r3, r2
 800230c:	606b      	str	r3, [r5, #4]
 800230e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002312:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8002316:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800231a:	4ba2      	ldr	r3, [pc, #648]	; (80025a4 <HAL_RCC_OscConfig+0x320>)
 800231c:	21f0      	movs	r1, #240	; 0xf0
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	fa91 f1a1 	rbit	r1, r1
 8002324:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8002328:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800232a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800232e:	40c3      	lsrs	r3, r0
 8002330:	1c58      	adds	r0, r3, #1
 8002332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8002336:	40ca      	lsrs	r2, r1
 8002338:	499b      	ldr	r1, [pc, #620]	; (80025a8 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800233a:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800233c:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 800233e:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8002340:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8002342:	4a9a      	ldr	r2, [pc, #616]	; (80025ac <HAL_RCC_OscConfig+0x328>)
 8002344:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8002346:	f7fe fdf9 	bl	8000f3c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234a:	6823      	ldr	r3, [r4, #0]
 800234c:	071d      	lsls	r5, r3, #28
 800234e:	f100 8191 	bmi.w	8002674 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002352:	6823      	ldr	r3, [r4, #0]
 8002354:	0758      	lsls	r0, r3, #29
 8002356:	f100 81d3 	bmi.w	8002700 <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800235a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800235c:	2a00      	cmp	r2, #0
 800235e:	f040 8257 	bne.w	8002810 <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 8002362:	2000      	movs	r0, #0
 8002364:	e024      	b.n	80023b0 <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002366:	4b8f      	ldr	r3, [pc, #572]	; (80025a4 <HAL_RCC_OscConfig+0x320>)
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	f002 020c 	and.w	r2, r2, #12
 800236e:	2a08      	cmp	r2, #8
 8002370:	d007      	beq.n	8002382 <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	f002 020c 	and.w	r2, r2, #12
 8002378:	2a0c      	cmp	r2, #12
 800237a:	d11c      	bne.n	80023b6 <HAL_RCC_OscConfig+0x132>
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	03db      	lsls	r3, r3, #15
 8002380:	d519      	bpl.n	80023b6 <HAL_RCC_OscConfig+0x132>
 8002382:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002386:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238a:	4a86      	ldr	r2, [pc, #536]	; (80025a4 <HAL_RCC_OscConfig+0x320>)
 800238c:	6811      	ldr	r1, [r2, #0]
 800238e:	fa93 f3a3 	rbit	r3, r3
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	2201      	movs	r2, #1
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	420b      	tst	r3, r1
 80023a2:	f43f af75 	beq.w	8002290 <HAL_RCC_OscConfig+0xc>
 80023a6:	6863      	ldr	r3, [r4, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f47f af71 	bne.w	8002290 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80023ae:	2001      	movs	r0, #1
}
 80023b0:	b003      	add	sp, #12
 80023b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b6:	6863      	ldr	r3, [r4, #4]
 80023b8:	4d7a      	ldr	r5, [pc, #488]	; (80025a4 <HAL_RCC_OscConfig+0x320>)
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d120      	bne.n	8002400 <HAL_RCC_OscConfig+0x17c>
 80023be:	682b      	ldr	r3, [r5, #0]
 80023c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80023c6:	f7fe fde1 	bl	8000f8c <HAL_GetTick>
 80023ca:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80023ce:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d0:	2601      	movs	r6, #1
 80023d2:	4f74      	ldr	r7, [pc, #464]	; (80025a4 <HAL_RCC_OscConfig+0x320>)
 80023d4:	fa95 f3a5 	rbit	r3, r5
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	fa95 f3a5 	rbit	r3, r5
 80023de:	fab3 f383 	clz	r3, r3
 80023e2:	f003 031f 	and.w	r3, r3, #31
 80023e6:	fa06 f303 	lsl.w	r3, r6, r3
 80023ea:	4213      	tst	r3, r2
 80023ec:	f47f af50 	bne.w	8002290 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f0:	f7fe fdcc 	bl	8000f8c <HAL_GetTick>
 80023f4:	eba0 0008 	sub.w	r0, r0, r8
 80023f8:	2864      	cmp	r0, #100	; 0x64
 80023fa:	d9eb      	bls.n	80023d4 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 80023fc:	2003      	movs	r0, #3
 80023fe:	e7d7      	b.n	80023b0 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002400:	bb13      	cbnz	r3, 8002448 <HAL_RCC_OscConfig+0x1c4>
 8002402:	682b      	ldr	r3, [r5, #0]
 8002404:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8002408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240c:	602b      	str	r3, [r5, #0]
 800240e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002410:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002416:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002418:	f7fe fdb8 	bl	8000f8c <HAL_GetTick>
 800241c:	4680      	mov	r8, r0
 800241e:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002422:	682a      	ldr	r2, [r5, #0]
 8002424:	fa96 f3a6 	rbit	r3, r6
 8002428:	fab3 f383 	clz	r3, r3
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	fa07 f303 	lsl.w	r3, r7, r3
 8002434:	4213      	tst	r3, r2
 8002436:	f43f af2b 	beq.w	8002290 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800243a:	f7fe fda7 	bl	8000f8c <HAL_GetTick>
 800243e:	eba0 0008 	sub.w	r0, r0, r8
 8002442:	2864      	cmp	r0, #100	; 0x64
 8002444:	d9eb      	bls.n	800241e <HAL_RCC_OscConfig+0x19a>
 8002446:	e7d9      	b.n	80023fc <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002448:	2b05      	cmp	r3, #5
 800244a:	682b      	ldr	r3, [r5, #0]
 800244c:	d103      	bne.n	8002456 <HAL_RCC_OscConfig+0x1d2>
 800244e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002452:	602b      	str	r3, [r5, #0]
 8002454:	e7b3      	b.n	80023be <HAL_RCC_OscConfig+0x13a>
 8002456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245a:	602b      	str	r3, [r5, #0]
 800245c:	682b      	ldr	r3, [r5, #0]
 800245e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002462:	e7af      	b.n	80023c4 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002464:	4b4f      	ldr	r3, [pc, #316]	; (80025a4 <HAL_RCC_OscConfig+0x320>)
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	f002 020c 	and.w	r2, r2, #12
 800246c:	2a04      	cmp	r2, #4
 800246e:	d007      	beq.n	8002480 <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	f002 020c 	and.w	r2, r2, #12
 8002476:	2a0c      	cmp	r2, #12
 8002478:	d124      	bne.n	80024c4 <HAL_RCC_OscConfig+0x240>
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	03df      	lsls	r7, r3, #15
 800247e:	d421      	bmi.n	80024c4 <HAL_RCC_OscConfig+0x240>
 8002480:	2302      	movs	r3, #2
 8002482:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002486:	4a47      	ldr	r2, [pc, #284]	; (80025a4 <HAL_RCC_OscConfig+0x320>)
 8002488:	6810      	ldr	r0, [r2, #0]
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	2101      	movs	r1, #1
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	4203      	tst	r3, r0
 800249e:	4613      	mov	r3, r2
 80024a0:	d002      	beq.n	80024a8 <HAL_RCC_OscConfig+0x224>
 80024a2:	68e2      	ldr	r2, [r4, #12]
 80024a4:	428a      	cmp	r2, r1
 80024a6:	d182      	bne.n	80023ae <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a8:	6858      	ldr	r0, [r3, #4]
 80024aa:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 80024ae:	fa92 f2a2 	rbit	r2, r2
 80024b2:	fab2 f182 	clz	r1, r2
 80024b6:	6922      	ldr	r2, [r4, #16]
 80024b8:	408a      	lsls	r2, r1
 80024ba:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 80024be:	430a      	orrs	r2, r1
 80024c0:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c2:	e6e9      	b.n	8002298 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024c4:	68e2      	ldr	r2, [r4, #12]
 80024c6:	2501      	movs	r5, #1
 80024c8:	b382      	cbz	r2, 800252c <HAL_RCC_OscConfig+0x2a8>
 80024ca:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024d6:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80024de:	f7fe fd55 	bl	8000f8c <HAL_GetTick>
 80024e2:	2702      	movs	r7, #2
 80024e4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e6:	4e2f      	ldr	r6, [pc, #188]	; (80025a4 <HAL_RCC_OscConfig+0x320>)
 80024e8:	fa97 f3a7 	rbit	r3, r7
 80024ec:	6832      	ldr	r2, [r6, #0]
 80024ee:	fa97 f3a7 	rbit	r3, r7
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	fa05 f303 	lsl.w	r3, r5, r3
 80024fe:	4213      	tst	r3, r2
 8002500:	d00d      	beq.n	800251e <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002502:	6871      	ldr	r1, [r6, #4]
 8002504:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	fab3 f283 	clz	r2, r3
 8002510:	6923      	ldr	r3, [r4, #16]
 8002512:	4093      	lsls	r3, r2
 8002514:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 8002518:	4313      	orrs	r3, r2
 800251a:	6073      	str	r3, [r6, #4]
 800251c:	e6bc      	b.n	8002298 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800251e:	f7fe fd35 	bl	8000f8c <HAL_GetTick>
 8002522:	eba0 0008 	sub.w	r0, r0, r8
 8002526:	2802      	cmp	r0, #2
 8002528:	d9de      	bls.n	80024e8 <HAL_RCC_OscConfig+0x264>
 800252a:	e767      	b.n	80023fc <HAL_RCC_OscConfig+0x178>
 800252c:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002538:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002540:	f7fe fd24 	bl	8000f8c <HAL_GetTick>
 8002544:	2602      	movs	r6, #2
 8002546:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002548:	4f16      	ldr	r7, [pc, #88]	; (80025a4 <HAL_RCC_OscConfig+0x320>)
 800254a:	fa96 f3a6 	rbit	r3, r6
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	fa96 f3a6 	rbit	r3, r6
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	fa05 f303 	lsl.w	r3, r5, r3
 8002560:	4213      	tst	r3, r2
 8002562:	f43f ae99 	beq.w	8002298 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002566:	f7fe fd11 	bl	8000f8c <HAL_GetTick>
 800256a:	eba0 0008 	sub.w	r0, r0, r8
 800256e:	2802      	cmp	r0, #2
 8002570:	d9eb      	bls.n	800254a <HAL_RCC_OscConfig+0x2c6>
 8002572:	e743      	b.n	80023fc <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002574:	686b      	ldr	r3, [r5, #4]
 8002576:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800257a:	4303      	orrs	r3, r0
 800257c:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800257e:	6869      	ldr	r1, [r5, #4]
 8002580:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002584:	fa93 f3a3 	rbit	r3, r3
 8002588:	fab3 f283 	clz	r2, r3
 800258c:	69e3      	ldr	r3, [r4, #28]
 800258e:	4093      	lsls	r3, r2
 8002590:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8002594:	4313      	orrs	r3, r2
 8002596:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002598:	f7ff fe34 	bl	8002204 <RCC_SetFlashLatencyFromMSIRange>
 800259c:	2800      	cmp	r0, #0
 800259e:	f43f aeb6 	beq.w	800230e <HAL_RCC_OscConfig+0x8a>
 80025a2:	e704      	b.n	80023ae <HAL_RCC_OscConfig+0x12a>
 80025a4:	40023800 	.word	0x40023800
 80025a8:	08005bdf 	.word	0x08005bdf
 80025ac:	2000002c 	.word	0x2000002c
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025b0:	69a2      	ldr	r2, [r4, #24]
 80025b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025b6:	2a00      	cmp	r2, #0
 80025b8:	d037      	beq.n	800262a <HAL_RCC_OscConfig+0x3a6>
 80025ba:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	2601      	movs	r6, #1
 80025c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025c8:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80025d0:	f7fe fcdc 	bl	8000f8c <HAL_GetTick>
 80025d4:	f44f 7700 	mov.w	r7, #512	; 0x200
 80025d8:	4680      	mov	r8, r0
 80025da:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80025de:	682a      	ldr	r2, [r5, #0]
 80025e0:	fa97 f3a7 	rbit	r3, r7
 80025e4:	fab3 f383 	clz	r3, r3
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	fa06 f303 	lsl.w	r3, r6, r3
 80025f0:	4213      	tst	r3, r2
 80025f2:	d013      	beq.n	800261c <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f4:	686b      	ldr	r3, [r5, #4]
 80025f6:	6a22      	ldr	r2, [r4, #32]
 80025f8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80025fc:	4313      	orrs	r3, r2
 80025fe:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002600:	6869      	ldr	r1, [r5, #4]
 8002602:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	fab3 f283 	clz	r2, r3
 800260e:	69e3      	ldr	r3, [r4, #28]
 8002610:	4093      	lsls	r3, r2
 8002612:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8002616:	4313      	orrs	r3, r2
 8002618:	606b      	str	r3, [r5, #4]
 800261a:	e696      	b.n	800234a <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800261c:	f7fe fcb6 	bl	8000f8c <HAL_GetTick>
 8002620:	eba0 0008 	sub.w	r0, r0, r8
 8002624:	2802      	cmp	r0, #2
 8002626:	d9d8      	bls.n	80025da <HAL_RCC_OscConfig+0x356>
 8002628:	e6e8      	b.n	80023fc <HAL_RCC_OscConfig+0x178>
 800262a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002636:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800263e:	f7fe fca5 	bl	8000f8c <HAL_GetTick>
 8002642:	f44f 7600 	mov.w	r6, #512	; 0x200
 8002646:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8002648:	2701      	movs	r7, #1
 800264a:	fa96 f3a6 	rbit	r3, r6
 800264e:	682a      	ldr	r2, [r5, #0]
 8002650:	fa96 f3a6 	rbit	r3, r6
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	fa07 f303 	lsl.w	r3, r7, r3
 8002660:	4213      	tst	r3, r2
 8002662:	f43f ae72 	beq.w	800234a <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002666:	f7fe fc91 	bl	8000f8c <HAL_GetTick>
 800266a:	eba0 0008 	sub.w	r0, r0, r8
 800266e:	2802      	cmp	r0, #2
 8002670:	d9eb      	bls.n	800264a <HAL_RCC_OscConfig+0x3c6>
 8002672:	e6c3      	b.n	80023fc <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002674:	6962      	ldr	r2, [r4, #20]
 8002676:	2501      	movs	r5, #1
 8002678:	49a9      	ldr	r1, [pc, #676]	; (8002920 <HAL_RCC_OscConfig+0x69c>)
 800267a:	b302      	cbz	r2, 80026be <HAL_RCC_OscConfig+0x43a>
 800267c:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	440b      	add	r3, r1
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 800268a:	f7fe fc7f 	bl	8000f8c <HAL_GetTick>
 800268e:	2602      	movs	r6, #2
 8002690:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	4fa4      	ldr	r7, [pc, #656]	; (8002924 <HAL_RCC_OscConfig+0x6a0>)
 8002694:	fa96 f3a6 	rbit	r3, r6
 8002698:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800269a:	fa96 f3a6 	rbit	r3, r6
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	fa05 f303 	lsl.w	r3, r5, r3
 80026aa:	4213      	tst	r3, r2
 80026ac:	f47f ae51 	bne.w	8002352 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b0:	f7fe fc6c 	bl	8000f8c <HAL_GetTick>
 80026b4:	eba0 0008 	sub.w	r0, r0, r8
 80026b8:	2802      	cmp	r0, #2
 80026ba:	d9eb      	bls.n	8002694 <HAL_RCC_OscConfig+0x410>
 80026bc:	e69e      	b.n	80023fc <HAL_RCC_OscConfig+0x178>
 80026be:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	440b      	add	r3, r1
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80026cc:	f7fe fc5e 	bl	8000f8c <HAL_GetTick>
 80026d0:	2602      	movs	r6, #2
 80026d2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d4:	4f93      	ldr	r7, [pc, #588]	; (8002924 <HAL_RCC_OscConfig+0x6a0>)
 80026d6:	fa96 f3a6 	rbit	r3, r6
 80026da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026dc:	fa96 f3a6 	rbit	r3, r6
 80026e0:	fab3 f383 	clz	r3, r3
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	fa05 f303 	lsl.w	r3, r5, r3
 80026ec:	4213      	tst	r3, r2
 80026ee:	f43f ae30 	beq.w	8002352 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f2:	f7fe fc4b 	bl	8000f8c <HAL_GetTick>
 80026f6:	eba0 0008 	sub.w	r0, r0, r8
 80026fa:	2802      	cmp	r0, #2
 80026fc:	d9eb      	bls.n	80026d6 <HAL_RCC_OscConfig+0x452>
 80026fe:	e67d      	b.n	80023fc <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002700:	4b88      	ldr	r3, [pc, #544]	; (8002924 <HAL_RCC_OscConfig+0x6a0>)
 8002702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002704:	00d1      	lsls	r1, r2, #3
 8002706:	d434      	bmi.n	8002772 <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 8002708:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800270c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002710:	625a      	str	r2, [r3, #36]	; 0x24
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	4d82      	ldr	r5, [pc, #520]	; (8002928 <HAL_RCC_OscConfig+0x6a4>)
 800271e:	682b      	ldr	r3, [r5, #0]
 8002720:	05da      	lsls	r2, r3, #23
 8002722:	d528      	bpl.n	8002776 <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002724:	68a3      	ldr	r3, [r4, #8]
 8002726:	4d7f      	ldr	r5, [pc, #508]	; (8002924 <HAL_RCC_OscConfig+0x6a0>)
 8002728:	2b01      	cmp	r3, #1
 800272a:	d134      	bne.n	8002796 <HAL_RCC_OscConfig+0x512>
 800272c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800272e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002732:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002734:	f7fe fc2a 	bl	8000f8c <HAL_GetTick>
 8002738:	f44f 7500 	mov.w	r5, #512	; 0x200
 800273c:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273e:	2701      	movs	r7, #1
 8002740:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8002924 <HAL_RCC_OscConfig+0x6a0>
 8002744:	fa95 f3a5 	rbit	r3, r5
 8002748:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 800274c:	fa95 f3a5 	rbit	r3, r5
 8002750:	fab3 f383 	clz	r3, r3
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	fa07 f303 	lsl.w	r3, r7, r3
 800275c:	4213      	tst	r3, r2
 800275e:	d04e      	beq.n	80027fe <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 8002760:	2e00      	cmp	r6, #0
 8002762:	f43f adfa 	beq.w	800235a <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002766:	4a6f      	ldr	r2, [pc, #444]	; (8002924 <HAL_RCC_OscConfig+0x6a0>)
 8002768:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800276a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276e:	6253      	str	r3, [r2, #36]	; 0x24
 8002770:	e5f3      	b.n	800235a <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 8002772:	2600      	movs	r6, #0
 8002774:	e7d2      	b.n	800271c <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002776:	682b      	ldr	r3, [r5, #0]
 8002778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800277e:	f7fe fc05 	bl	8000f8c <HAL_GetTick>
 8002782:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002784:	682b      	ldr	r3, [r5, #0]
 8002786:	05db      	lsls	r3, r3, #23
 8002788:	d4cc      	bmi.n	8002724 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278a:	f7fe fbff 	bl	8000f8c <HAL_GetTick>
 800278e:	1bc0      	subs	r0, r0, r7
 8002790:	2864      	cmp	r0, #100	; 0x64
 8002792:	d9f7      	bls.n	8002784 <HAL_RCC_OscConfig+0x500>
 8002794:	e632      	b.n	80023fc <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002796:	bb23      	cbnz	r3, 80027e2 <HAL_RCC_OscConfig+0x55e>
 8002798:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800279a:	f44f 7700 	mov.w	r7, #512	; 0x200
 800279e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027a2:	636b      	str	r3, [r5, #52]	; 0x34
 80027a4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a6:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027ae:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80027b0:	f7fe fbec 	bl	8000f8c <HAL_GetTick>
 80027b4:	4681      	mov	r9, r0
 80027b6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ba:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80027bc:	fa97 f3a7 	rbit	r3, r7
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	fa08 f303 	lsl.w	r3, r8, r3
 80027cc:	4213      	tst	r3, r2
 80027ce:	d0c7      	beq.n	8002760 <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d0:	f7fe fbdc 	bl	8000f8c <HAL_GetTick>
 80027d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80027d8:	eba0 0009 	sub.w	r0, r0, r9
 80027dc:	4298      	cmp	r0, r3
 80027de:	d9ea      	bls.n	80027b6 <HAL_RCC_OscConfig+0x532>
 80027e0:	e60c      	b.n	80023fc <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e2:	2b05      	cmp	r3, #5
 80027e4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80027e6:	d103      	bne.n	80027f0 <HAL_RCC_OscConfig+0x56c>
 80027e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ec:	636b      	str	r3, [r5, #52]	; 0x34
 80027ee:	e79d      	b.n	800272c <HAL_RCC_OscConfig+0x4a8>
 80027f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027f4:	636b      	str	r3, [r5, #52]	; 0x34
 80027f6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80027f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027fc:	e799      	b.n	8002732 <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7fe fbc5 	bl	8000f8c <HAL_GetTick>
 8002802:	f241 3388 	movw	r3, #5000	; 0x1388
 8002806:	eba0 0009 	sub.w	r0, r0, r9
 800280a:	4298      	cmp	r0, r3
 800280c:	d99a      	bls.n	8002744 <HAL_RCC_OscConfig+0x4c0>
 800280e:	e5f5      	b.n	80023fc <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002810:	4d44      	ldr	r5, [pc, #272]	; (8002924 <HAL_RCC_OscConfig+0x6a0>)
 8002812:	68ab      	ldr	r3, [r5, #8]
 8002814:	f003 030c 	and.w	r3, r3, #12
 8002818:	2b0c      	cmp	r3, #12
 800281a:	f43f adc8 	beq.w	80023ae <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800281e:	2a02      	cmp	r2, #2
 8002820:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002824:	d156      	bne.n	80028d4 <HAL_RCC_OscConfig+0x650>
 8002826:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	2200      	movs	r2, #0
 8002830:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002834:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800283c:	f7fe fba6 	bl	8000f8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002840:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 8002842:	4680      	mov	r8, r0
 8002844:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002848:	2501      	movs	r5, #1
 800284a:	fa97 f3a7 	rbit	r3, r7
 800284e:	6832      	ldr	r2, [r6, #0]
 8002850:	fa97 f3a7 	rbit	r3, r7
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	fa05 f303 	lsl.w	r3, r5, r3
 8002860:	4213      	tst	r3, r2
 8002862:	d130      	bne.n	80028c6 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002864:	68b2      	ldr	r2, [r6, #8]
 8002866:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002868:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800286a:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 800286e:	430b      	orrs	r3, r1
 8002870:	4313      	orrs	r3, r2
 8002872:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002874:	4313      	orrs	r3, r2
 8002876:	60b3      	str	r3, [r6, #8]
 8002878:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800287c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002880:	fab3 f383 	clz	r3, r3
 8002884:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002888:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8002890:	f7fe fb7c 	bl	8000f8c <HAL_GetTick>
 8002894:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8002898:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800289a:	2501      	movs	r5, #1
 800289c:	4e21      	ldr	r6, [pc, #132]	; (8002924 <HAL_RCC_OscConfig+0x6a0>)
 800289e:	fa94 f3a4 	rbit	r3, r4
 80028a2:	6832      	ldr	r2, [r6, #0]
 80028a4:	fa94 f3a4 	rbit	r3, r4
 80028a8:	fab3 f383 	clz	r3, r3
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	fa05 f303 	lsl.w	r3, r5, r3
 80028b4:	4213      	tst	r3, r2
 80028b6:	f47f ad54 	bne.w	8002362 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ba:	f7fe fb67 	bl	8000f8c <HAL_GetTick>
 80028be:	1bc0      	subs	r0, r0, r7
 80028c0:	2802      	cmp	r0, #2
 80028c2:	d9ec      	bls.n	800289e <HAL_RCC_OscConfig+0x61a>
 80028c4:	e59a      	b.n	80023fc <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c6:	f7fe fb61 	bl	8000f8c <HAL_GetTick>
 80028ca:	eba0 0008 	sub.w	r0, r0, r8
 80028ce:	2802      	cmp	r0, #2
 80028d0:	d9bb      	bls.n	800284a <HAL_RCC_OscConfig+0x5c6>
 80028d2:	e593      	b.n	80023fc <HAL_RCC_OscConfig+0x178>
 80028d4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80028d8:	fab3 f383 	clz	r3, r3
 80028dc:	2200      	movs	r2, #0
 80028de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028e2:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028ea:	f7fe fb4f 	bl	8000f8c <HAL_GetTick>
 80028ee:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80028f2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f4:	2601      	movs	r6, #1
 80028f6:	fa94 f3a4 	rbit	r3, r4
 80028fa:	682a      	ldr	r2, [r5, #0]
 80028fc:	fa94 f3a4 	rbit	r3, r4
 8002900:	fab3 f383 	clz	r3, r3
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	fa06 f303 	lsl.w	r3, r6, r3
 800290c:	4213      	tst	r3, r2
 800290e:	f43f ad28 	beq.w	8002362 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002912:	f7fe fb3b 	bl	8000f8c <HAL_GetTick>
 8002916:	1bc0      	subs	r0, r0, r7
 8002918:	2802      	cmp	r0, #2
 800291a:	d9ec      	bls.n	80028f6 <HAL_RCC_OscConfig+0x672>
 800291c:	e56e      	b.n	80023fc <HAL_RCC_OscConfig+0x178>
 800291e:	bf00      	nop
 8002920:	1091c1a0 	.word	0x1091c1a0
 8002924:	40023800 	.word	0x40023800
 8002928:	40007000 	.word	0x40007000

0800292c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800292c:	491e      	ldr	r1, [pc, #120]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 800292e:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8002930:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8002932:	f003 020c 	and.w	r2, r3, #12
 8002936:	2a08      	cmp	r2, #8
 8002938:	d005      	beq.n	8002946 <HAL_RCC_GetSysClockFreq+0x1a>
 800293a:	2a0c      	cmp	r2, #12
 800293c:	d005      	beq.n	800294a <HAL_RCC_GetSysClockFreq+0x1e>
 800293e:	2a04      	cmp	r2, #4
 8002940:	d122      	bne.n	8002988 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 8002942:	481a      	ldr	r0, [pc, #104]	; (80029ac <HAL_RCC_GetSysClockFreq+0x80>)
}
 8002944:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8002946:	481a      	ldr	r0, [pc, #104]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x84>)
 8002948:	bd10      	pop	{r4, pc}
 800294a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800294e:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002952:	fab2 f282 	clz	r2, r2
 8002956:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 800295a:	fa20 f202 	lsr.w	r2, r0, r2
 800295e:	4815      	ldr	r0, [pc, #84]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x88>)
 8002960:	5c84      	ldrb	r4, [r0, r2]
 8002962:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8002966:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 800296a:	fab0 f280 	clz	r2, r0
 800296e:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002972:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8002974:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002976:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8002978:	bf4c      	ite	mi
 800297a:	4b0d      	ldrmi	r3, [pc, #52]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 800297c:	4b0b      	ldrpl	r3, [pc, #44]	; (80029ac <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 800297e:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 8002980:	4363      	muls	r3, r4
 8002982:	fbb3 f0f0 	udiv	r0, r3, r0
 8002986:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8002988:	6848      	ldr	r0, [r1, #4]
 800298a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 800299a:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 800299c:	1c43      	adds	r3, r0, #1
 800299e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80029a2:	4098      	lsls	r0, r3
 80029a4:	bd10      	pop	{r4, pc}
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800
 80029ac:	00f42400 	.word	0x00f42400
 80029b0:	007a1200 	.word	0x007a1200
 80029b4:	08005bf7 	.word	0x08005bf7

080029b8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80029b8:	4b6a      	ldr	r3, [pc, #424]	; (8002b64 <HAL_RCC_ClockConfig+0x1ac>)
{
 80029ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80029be:	681a      	ldr	r2, [r3, #0]
{
 80029c0:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80029c2:	f002 0201 	and.w	r2, r2, #1
 80029c6:	428a      	cmp	r2, r1
{
 80029c8:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80029ca:	d330      	bcc.n	8002a2e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029cc:	6832      	ldr	r2, [r6, #0]
 80029ce:	0794      	lsls	r4, r2, #30
 80029d0:	d440      	bmi.n	8002a54 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d2:	07d0      	lsls	r0, r2, #31
 80029d4:	d446      	bmi.n	8002a64 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80029d6:	4b63      	ldr	r3, [pc, #396]	; (8002b64 <HAL_RCC_ClockConfig+0x1ac>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	f002 0201 	and.w	r2, r2, #1
 80029de:	4295      	cmp	r5, r2
 80029e0:	f0c0 80ae 	bcc.w	8002b40 <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e4:	6832      	ldr	r2, [r6, #0]
 80029e6:	0751      	lsls	r1, r2, #29
 80029e8:	f100 80b3 	bmi.w	8002b52 <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ec:	0713      	lsls	r3, r2, #28
 80029ee:	d507      	bpl.n	8002a00 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029f0:	4a5d      	ldr	r2, [pc, #372]	; (8002b68 <HAL_RCC_ClockConfig+0x1b0>)
 80029f2:	6931      	ldr	r1, [r6, #16]
 80029f4:	6893      	ldr	r3, [r2, #8]
 80029f6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80029fa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029fe:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a00:	f7ff ff94 	bl	800292c <HAL_RCC_GetSysClockFreq>
 8002a04:	4b58      	ldr	r3, [pc, #352]	; (8002b68 <HAL_RCC_ClockConfig+0x1b0>)
 8002a06:	22f0      	movs	r2, #240	; 0xf0
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	fa92 f2a2 	rbit	r2, r2
 8002a0e:	fab2 f282 	clz	r2, r2
 8002a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a16:	40d3      	lsrs	r3, r2
 8002a18:	4a54      	ldr	r2, [pc, #336]	; (8002b6c <HAL_RCC_ClockConfig+0x1b4>)
 8002a1a:	5cd3      	ldrb	r3, [r2, r3]
 8002a1c:	40d8      	lsrs	r0, r3
 8002a1e:	4b54      	ldr	r3, [pc, #336]	; (8002b70 <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a22:	2000      	movs	r0, #0
 8002a24:	f7fe fa8a 	bl	8000f3c <HAL_InitTick>
  return HAL_OK;
 8002a28:	2000      	movs	r0, #0
}
 8002a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	2901      	cmp	r1, #1
 8002a30:	bf02      	ittt	eq
 8002a32:	681a      	ldreq	r2, [r3, #0]
 8002a34:	f042 0204 	orreq.w	r2, r2, #4
 8002a38:	601a      	streq	r2, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	f022 0201 	bic.w	r2, r2, #1
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	4299      	cmp	r1, r3
 8002a4c:	d0be      	beq.n	80029cc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8002a4e:	2001      	movs	r0, #1
 8002a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a54:	4944      	ldr	r1, [pc, #272]	; (8002b68 <HAL_RCC_ClockConfig+0x1b0>)
 8002a56:	68b0      	ldr	r0, [r6, #8]
 8002a58:	688b      	ldr	r3, [r1, #8]
 8002a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a5e:	4303      	orrs	r3, r0
 8002a60:	608b      	str	r3, [r1, #8]
 8002a62:	e7b6      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a64:	6872      	ldr	r2, [r6, #4]
 8002a66:	4940      	ldr	r1, [pc, #256]	; (8002b68 <HAL_RCC_ClockConfig+0x1b0>)
 8002a68:	2a02      	cmp	r2, #2
 8002a6a:	d10f      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xd4>
 8002a6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a70:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8002a74:	6808      	ldr	r0, [r1, #0]
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	2101      	movs	r1, #1
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	fa01 f303 	lsl.w	r3, r1, r3
 8002a88:	4203      	tst	r3, r0
 8002a8a:	e013      	b.n	8002ab4 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8c:	2a03      	cmp	r2, #3
 8002a8e:	d102      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xde>
 8002a90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a94:	e7ec      	b.n	8002a70 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a96:	2a01      	cmp	r2, #1
 8002a98:	d129      	bne.n	8002aee <HAL_RCC_ClockConfig+0x136>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa0:	6809      	ldr	r1, [r1, #0]
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	fab3 f383 	clz	r3, r3
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8002ab4:	d0cb      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ab6:	4c2c      	ldr	r4, [pc, #176]	; (8002b68 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002abc:	68a3      	ldr	r3, [r4, #8]
 8002abe:	f023 0303 	bic.w	r3, r3, #3
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8002ac6:	f7fe fa61 	bl	8000f8c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aca:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002acc:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d110      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ad2:	68a3      	ldr	r3, [r4, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	f43f af7c 	beq.w	80029d6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ade:	f7fe fa55 	bl	8000f8c <HAL_GetTick>
 8002ae2:	1bc0      	subs	r0, r0, r7
 8002ae4:	4540      	cmp	r0, r8
 8002ae6:	d9f4      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8002ae8:	2003      	movs	r0, #3
 8002aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002af2:	e7bd      	b.n	8002a70 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d10b      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002af8:	68a3      	ldr	r3, [r4, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b0c      	cmp	r3, #12
 8002b00:	f43f af69 	beq.w	80029d6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b04:	f7fe fa42 	bl	8000f8c <HAL_GetTick>
 8002b08:	1bc0      	subs	r0, r0, r7
 8002b0a:	4540      	cmp	r0, r8
 8002b0c:	d9f4      	bls.n	8002af8 <HAL_RCC_ClockConfig+0x140>
 8002b0e:	e7eb      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d110      	bne.n	8002b36 <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b14:	68a3      	ldr	r3, [r4, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	f43f af5b 	beq.w	80029d6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b20:	f7fe fa34 	bl	8000f8c <HAL_GetTick>
 8002b24:	1bc0      	subs	r0, r0, r7
 8002b26:	4540      	cmp	r0, r8
 8002b28:	d9f4      	bls.n	8002b14 <HAL_RCC_ClockConfig+0x15c>
 8002b2a:	e7dd      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b2c:	f7fe fa2e 	bl	8000f8c <HAL_GetTick>
 8002b30:	1bc0      	subs	r0, r0, r7
 8002b32:	4540      	cmp	r0, r8
 8002b34:	d8d8      	bhi.n	8002ae8 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b36:	68a3      	ldr	r3, [r4, #8]
 8002b38:	f013 0f0c 	tst.w	r3, #12
 8002b3c:	d1f6      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x174>
 8002b3e:	e74a      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	f022 0201 	bic.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	07da      	lsls	r2, r3, #31
 8002b4c:	f53f af7f 	bmi.w	8002a4e <HAL_RCC_ClockConfig+0x96>
 8002b50:	e748      	b.n	80029e4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b52:	4905      	ldr	r1, [pc, #20]	; (8002b68 <HAL_RCC_ClockConfig+0x1b0>)
 8002b54:	68f0      	ldr	r0, [r6, #12]
 8002b56:	688b      	ldr	r3, [r1, #8]
 8002b58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b5c:	4303      	orrs	r3, r0
 8002b5e:	608b      	str	r3, [r1, #8]
 8002b60:	e744      	b.n	80029ec <HAL_RCC_ClockConfig+0x34>
 8002b62:	bf00      	nop
 8002b64:	40023c00 	.word	0x40023c00
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	08005bdf 	.word	0x08005bdf
 8002b70:	2000002c 	.word	0x2000002c

08002b74 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b74:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b76:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	fa92 f2a2 	rbit	r2, r2
 8002b80:	fab2 f282 	clz	r2, r2
 8002b84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b88:	40d3      	lsrs	r3, r2
 8002b8a:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b8c:	5cd3      	ldrb	r3, [r2, r3]
 8002b8e:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002b90:	6810      	ldr	r0, [r2, #0]
}    
 8002b92:	40d8      	lsrs	r0, r3
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	08005bef 	.word	0x08005bef
 8002ba0:	2000002c 	.word	0x2000002c

08002ba4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ba4:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ba6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	fa92 f2a2 	rbit	r2, r2
 8002bb0:	fab2 f282 	clz	r2, r2
 8002bb4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002bb8:	40d3      	lsrs	r3, r2
 8002bba:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bbc:	5cd3      	ldrb	r3, [r2, r3]
 8002bbe:	4a04      	ldr	r2, [pc, #16]	; (8002bd0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8002bc0:	6810      	ldr	r0, [r2, #0]
} 
 8002bc2:	40d8      	lsrs	r0, r3
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	08005bef 	.word	0x08005bef
 8002bd0:	2000002c 	.word	0x2000002c

08002bd4 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002bd4:	6803      	ldr	r3, [r0, #0]
{
 8002bd6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002bda:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8002bdc:	0798      	lsls	r0, r3, #30
 8002bde:	d101      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x10>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  
  return HAL_OK;
 8002be0:	2000      	movs	r0, #0
 8002be2:	e055      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be4:	4b4f      	ldr	r3, [pc, #316]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be8:	00d1      	lsls	r1, r2, #3
 8002bea:	d43f      	bmi.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x98>
      pwrclkchanged = SET;
 8002bec:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c00:	4e49      	ldr	r6, [pc, #292]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002c02:	6833      	ldr	r3, [r6, #0]
 8002c04:	05da      	lsls	r2, r3, #23
 8002c06:	d533      	bpl.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002c08:	4b46      	ldr	r3, [pc, #280]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x150>)
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002c0a:	6862      	ldr	r2, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002c0c:	6819      	ldr	r1, [r3, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002c0e:	f002 40c0 	and.w	r0, r2, #1610612736	; 0x60000000
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002c12:	f001 41c0 	and.w	r1, r1, #1610612736	; 0x60000000
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002c16:	4281      	cmp	r1, r0
 8002c18:	d104      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x50>
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002c1a:	68a0      	ldr	r0, [r4, #8]
 8002c1c:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
 8002c20:	4281      	cmp	r1, r0
 8002c22:	d007      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x60>
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002c24:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8002c28:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8002c2c:	d102      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002c2e:	6819      	ldr	r1, [r3, #0]
 8002c30:	0388      	lsls	r0, r1, #14
 8002c32:	d475      	bmi.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002c36:	f413 3340 	ands.w	r3, r3, #196608	; 0x30000
 8002c3a:	d12c      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c3c:	6860      	ldr	r0, [r4, #4]
 8002c3e:	4b39      	ldr	r3, [pc, #228]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002c40:	f400 3140 	and.w	r1, r0, #196608	; 0x30000
 8002c44:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8002c48:	d106      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
 8002c50:	f022 42c0 	bic.w	r2, r2, #1610612736	; 0x60000000
 8002c54:	4302      	orrs	r2, r0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5a:	4311      	orrs	r1, r2
 8002c5c:	6359      	str	r1, [r3, #52]	; 0x34
    if(pwrclkchanged == SET)
 8002c5e:	2d00      	cmp	r5, #0
 8002c60:	d0be      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0xc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c64:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24
 8002c6a:	e7b9      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0xc>
    FlagStatus       pwrclkchanged = RESET;
 8002c6c:	2500      	movs	r5, #0
 8002c6e:	e7c7      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c70:	6833      	ldr	r3, [r6, #0]
 8002c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c76:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002c78:	f7fe f988 	bl	8000f8c <HAL_GetTick>
 8002c7c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7e:	6833      	ldr	r3, [r6, #0]
 8002c80:	05db      	lsls	r3, r3, #23
 8002c82:	d4c1      	bmi.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c84:	f7fe f982 	bl	8000f8c <HAL_GetTick>
 8002c88:	1bc0      	subs	r0, r0, r7
 8002c8a:	2864      	cmp	r0, #100	; 0x64
 8002c8c:	d9f7      	bls.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xaa>
          return HAL_TIMEOUT;
 8002c8e:	2003      	movs	r0, #3
}
 8002c90:	b003      	add	sp, #12
 8002c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002c96:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d002      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c9e:	6822      	ldr	r2, [r4, #0]
 8002ca0:	07d1      	lsls	r1, r2, #31
 8002ca2:	d407      	bmi.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002ca4:	68a2      	ldr	r2, [r4, #8]
 8002ca6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d0c6      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x68>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002cae:	6823      	ldr	r3, [r4, #0]
 8002cb0:	079a      	lsls	r2, r3, #30
 8002cb2:	d5c3      	bpl.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x68>
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002cb4:	4e1b      	ldr	r6, [pc, #108]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002cb6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002cba:	6b71      	ldr	r1, [r6, #52]	; 0x34
 8002cbc:	f421 3040 	bic.w	r0, r1, #196608	; 0x30000
 8002cc0:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cc4:	fab2 f282 	clz	r2, r2
 8002cc8:	2701      	movs	r7, #1
 8002cca:	f8df e060 	ldr.w	lr, [pc, #96]	; 8002d2c <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002cce:	4472      	add	r2, lr
 8002cd0:	0092      	lsls	r2, r2, #2
 8002cd2:	6017      	str	r7, [r2, #0]
 8002cd4:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd8:	fab3 f383 	clz	r3, r3
 8002cdc:	2200      	movs	r2, #0
 8002cde:	4473      	add	r3, lr
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002ce4:	05cb      	lsls	r3, r1, #23
      RCC->CSR = temp_reg;
 8002ce6:	6370      	str	r0, [r6, #52]	; 0x34
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002ce8:	d5a8      	bpl.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        tickstart = HAL_GetTick();
 8002cea:	f7fe f94f 	bl	8000f8c <HAL_GetTick>
 8002cee:	f44f 7800 	mov.w	r8, #512	; 0x200
 8002cf2:	4681      	mov	r9, r0
 8002cf4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf8:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8002cfa:	fa98 f3a8 	rbit	r3, r8
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	fa07 f303 	lsl.w	r3, r7, r3
 8002d0a:	4213      	tst	r3, r2
 8002d0c:	d196      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x68>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fe f93d 	bl	8000f8c <HAL_GetTick>
 8002d12:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d16:	eba0 0009 	sub.w	r0, r0, r9
 8002d1a:	4298      	cmp	r0, r3
 8002d1c:	d9ea      	bls.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8002d1e:	e7b6      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0xba>
        return HAL_ERROR; 
 8002d20:	2001      	movs	r0, #1
 8002d22:	e7b5      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40007000 	.word	0x40007000
 8002d2c:	1091c1a0 	.word	0x1091c1a0

08002d30 <RTC_EnterInitMode>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002d30:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002d32:	6803      	ldr	r3, [r0, #0]
{
 8002d34:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	0652      	lsls	r2, r2, #25
 8002d3a:	d501      	bpl.n	8002d40 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002d40:	f04f 32ff 	mov.w	r2, #4294967295
 8002d44:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002d46:	f7fe f921 	bl	8000f8c <HAL_GetTick>
 8002d4a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002d4c:	6823      	ldr	r3, [r4, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	065b      	lsls	r3, r3, #25
 8002d52:	d4f3      	bmi.n	8002d3c <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002d54:	f7fe f91a 	bl	8000f8c <HAL_GetTick>
 8002d58:	1b40      	subs	r0, r0, r5
 8002d5a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d5e:	d9f5      	bls.n	8002d4c <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8002d60:	2003      	movs	r0, #3
}
 8002d62:	bd38      	pop	{r3, r4, r5, pc}

08002d64 <HAL_RTC_Init>:
{
 8002d64:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002d66:	4604      	mov	r4, r0
 8002d68:	b1b0      	cbz	r0, 8002d98 <HAL_RTC_Init+0x34>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002d6a:	7f43      	ldrb	r3, [r0, #29]
 8002d6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d70:	b913      	cbnz	r3, 8002d78 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8002d72:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002d74:	f001 fd26 	bl	80047c4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002d78:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d7a:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002d7c:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d7e:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d80:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24
 8002d84:	2253      	movs	r2, #83	; 0x53
 8002d86:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d88:	f7ff ffd2 	bl	8002d30 <RTC_EnterInitMode>
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	b128      	cbz	r0, 8002d9c <HAL_RTC_Init+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002d90:	22ff      	movs	r2, #255	; 0xff
 8002d92:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d94:	2304      	movs	r3, #4
 8002d96:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8002d98:	2001      	movs	r0, #1
}
 8002d9a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d9c:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d9e:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002da0:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8002da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da8:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002daa:	6862      	ldr	r2, [r4, #4]
 8002dac:	6899      	ldr	r1, [r3, #8]
 8002dae:	432a      	orrs	r2, r5
 8002db0:	6965      	ldr	r5, [r4, #20]
 8002db2:	432a      	orrs	r2, r5
 8002db4:	430a      	orrs	r2, r1
 8002db6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002db8:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002dba:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002dbc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002dc4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8002dc6:	68da      	ldr	r2, [r3, #12]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002dc8:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8002dca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dce:	60da      	str	r2, [r3, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002dde:	22ff      	movs	r2, #255	; 0xff
 8002de0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002de2:	2301      	movs	r3, #1
 8002de4:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8002de6:	bd38      	pop	{r3, r4, r5, pc}

08002de8 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8002de8:	2300      	movs	r3, #0
  
  while(Value >= 10)
 8002dea:	2809      	cmp	r0, #9
 8002dec:	d803      	bhi.n	8002df6 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8002dee:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8002df2:	b2c0      	uxtb	r0, r0
 8002df4:	4770      	bx	lr
    Value -= 10;
 8002df6:	380a      	subs	r0, #10
    bcdhigh++;
 8002df8:	3301      	adds	r3, #1
    Value -= 10;
 8002dfa:	b2c0      	uxtb	r0, r0
 8002dfc:	e7f5      	b.n	8002dea <RTC_ByteToBcd2+0x2>

08002dfe <HAL_RTC_SetTime>:
{
 8002dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002e00:	7f03      	ldrb	r3, [r0, #28]
{
 8002e02:	4606      	mov	r6, r0
  __HAL_LOCK(hrtc);
 8002e04:	2b01      	cmp	r3, #1
{
 8002e06:	460f      	mov	r7, r1
 8002e08:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8002e0c:	d05e      	beq.n	8002ecc <HAL_RTC_SetTime+0xce>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	7733      	strb	r3, [r6, #28]
 8002e12:	6833      	ldr	r3, [r6, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e14:	7770      	strb	r0, [r6, #29]
 8002e16:	7808      	ldrb	r0, [r1, #0]
 8002e18:	784d      	ldrb	r5, [r1, #1]
 8002e1a:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e1c:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8002e1e:	bb3a      	cbnz	r2, 8002e70 <HAL_RTC_SetTime+0x72>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e20:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00;
 8002e24:	bf08      	it	eq
 8002e26:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002e28:	f7ff ffde 	bl	8002de8 <RTC_ByteToBcd2>
 8002e2c:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002e2e:	4628      	mov	r0, r5
 8002e30:	f7ff ffda 	bl	8002de8 <RTC_ByteToBcd2>
 8002e34:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002e36:	4620      	mov	r0, r4
 8002e38:	f7ff ffd6 	bl	8002de8 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002e3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002e42:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8002e46:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e4a:	22ca      	movs	r2, #202	; 0xca
 8002e4c:	6833      	ldr	r3, [r6, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e4e:	4630      	mov	r0, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e50:	625a      	str	r2, [r3, #36]	; 0x24
 8002e52:	2253      	movs	r2, #83	; 0x53
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e56:	f7ff ff6b 	bl	8002d30 <RTC_EnterInitMode>
 8002e5a:	6833      	ldr	r3, [r6, #0]
 8002e5c:	4605      	mov	r5, r0
 8002e5e:	b1a0      	cbz	r0, 8002e8a <HAL_RTC_SetTime+0x8c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002e60:	22ff      	movs	r2, #255	; 0xff
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e64:	2304      	movs	r3, #4
 8002e66:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8002e68:	2300      	movs	r3, #0
 8002e6a:	7733      	strb	r3, [r6, #28]
      return HAL_ERROR;
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e70:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002e74:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00;
 8002e78:	bf08      	it	eq
 8002e7a:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002e7c:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002e80:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8002e82:	78cc      	ldrb	r4, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002e84:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8002e88:	e7df      	b.n	8002e4a <HAL_RTC_SetTime+0x4c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e8a:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8002e8e:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8002e92:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002e94:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e96:	6938      	ldr	r0, [r7, #16]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002e98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e9c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	6899      	ldr	r1, [r3, #8]
 8002ea2:	4302      	orrs	r2, r0
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002ea8:	68da      	ldr	r2, [r3, #12]
    if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002eaa:	4630      	mov	r0, r6
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eb0:	60da      	str	r2, [r3, #12]
    if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002eb2:	f000 f8b7 	bl	8003024 <HAL_RTC_WaitForSynchro>
 8002eb6:	22ff      	movs	r2, #255	; 0xff
 8002eb8:	6833      	ldr	r3, [r6, #0]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002eba:	625a      	str	r2, [r3, #36]	; 0x24
    if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ebc:	b118      	cbz	r0, 8002ec6 <HAL_RTC_SetTime+0xc8>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002ebe:	2304      	movs	r3, #4
      __HAL_UNLOCK(hrtc);
 8002ec0:	7735      	strb	r5, [r6, #28]
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002ec2:	7773      	strb	r3, [r6, #29]
 8002ec4:	e7d2      	b.n	8002e6c <HAL_RTC_SetTime+0x6e>
   hrtc->State = HAL_RTC_STATE_READY;
 8002ec6:	2301      	movs	r3, #1
   __HAL_UNLOCK(hrtc); 
 8002ec8:	7730      	strb	r0, [r6, #28]
   hrtc->State = HAL_RTC_STATE_READY;
 8002eca:	7773      	strb	r3, [r6, #29]
}
 8002ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ece <HAL_RTC_SetDate>:
{
 8002ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8002ed0:	7f03      	ldrb	r3, [r0, #28]
{
 8002ed2:	4605      	mov	r5, r0
 __HAL_LOCK(hrtc);
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	f04f 0002 	mov.w	r0, #2
 8002eda:	d050      	beq.n	8002f7e <HAL_RTC_SetDate+0xb0>
 8002edc:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002ede:	7768      	strb	r0, [r5, #29]
 __HAL_LOCK(hrtc);
 8002ee0:	772b      	strb	r3, [r5, #28]
 8002ee2:	784b      	ldrb	r3, [r1, #1]
 8002ee4:	78c8      	ldrb	r0, [r1, #3]
 8002ee6:	788e      	ldrb	r6, [r1, #2]
 8002ee8:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8002eea:	2a00      	cmp	r2, #0
 8002eec:	d140      	bne.n	8002f70 <HAL_RTC_SetDate+0xa2>
 8002eee:	06da      	lsls	r2, r3, #27
 8002ef0:	d503      	bpl.n	8002efa <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8002ef2:	f023 0310 	bic.w	r3, r3, #16
 8002ef6:	330a      	adds	r3, #10
 8002ef8:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002efa:	f7ff ff75 	bl	8002de8 <RTC_ByteToBcd2>
 8002efe:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002f00:	7848      	ldrb	r0, [r1, #1]
 8002f02:	f7ff ff71 	bl	8002de8 <RTC_ByteToBcd2>
 8002f06:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002f08:	4630      	mov	r0, r6
 8002f0a:	f7ff ff6d 	bl	8002de8 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002f0e:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8002f12:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8002f16:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f1a:	22ca      	movs	r2, #202	; 0xca
 8002f1c:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f1e:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
 8002f22:	2253      	movs	r2, #83	; 0x53
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f26:	f7ff ff03 	bl	8002d30 <RTC_EnterInitMode>
 8002f2a:	682b      	ldr	r3, [r5, #0]
 8002f2c:	4606      	mov	r6, r0
 8002f2e:	b138      	cbz	r0, 8002f40 <HAL_RTC_SetDate+0x72>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002f30:	22ff      	movs	r2, #255	; 0xff
 8002f32:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f34:	2304      	movs	r3, #4
 8002f36:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8002f38:	2300      	movs	r3, #0
 8002f3a:	772b      	strb	r3, [r5, #28]
      return HAL_ERROR;
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002f40:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8002f44:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8002f48:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002f4a:	68da      	ldr	r2, [r3, #12]
    if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f4c:	4628      	mov	r0, r5
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f52:	60da      	str	r2, [r3, #12]
    if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f54:	f000 f866 	bl	8003024 <HAL_RTC_WaitForSynchro>
 8002f58:	22ff      	movs	r2, #255	; 0xff
 8002f5a:	682b      	ldr	r3, [r5, #0]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24
    if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f5e:	b118      	cbz	r0, 8002f68 <HAL_RTC_SetDate+0x9a>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002f60:	2304      	movs	r3, #4
      __HAL_UNLOCK(hrtc);
 8002f62:	772e      	strb	r6, [r5, #28]
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002f64:	776b      	strb	r3, [r5, #29]
 8002f66:	e7e9      	b.n	8002f3c <HAL_RTC_SetDate+0x6e>
    hrtc->State = HAL_RTC_STATE_READY ;
 8002f68:	2301      	movs	r3, #1
    __HAL_UNLOCK(hrtc);
 8002f6a:	7728      	strb	r0, [r5, #28]
    hrtc->State = HAL_RTC_STATE_READY ;
 8002f6c:	776b      	strb	r3, [r5, #29]
    return HAL_OK;    
 8002f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  (((uint32_t)sDate->Month) << 8) | \
 8002f70:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002f72:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 8002f76:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002f78:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8002f7c:	e7cd      	b.n	8002f1a <HAL_RTC_SetDate+0x4c>
}
 8002f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f80 <RTC_Bcd2ToByte>:
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 8002f80:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002f82:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8002f84:	f000 000f 	and.w	r0, r0, #15
 8002f88:	fb02 0003 	mla	r0, r2, r3, r0
}
 8002f8c:	b2c0      	uxtb	r0, r0
 8002f8e:	4770      	bx	lr

08002f90 <HAL_RTC_GetDate>:
{
 8002f90:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8002f92:	6803      	ldr	r3, [r0, #0]
 8002f94:	685c      	ldr	r4, [r3, #4]
 8002f96:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
 8002f9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8002f9e:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8002fa0:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002fa4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8002fa8:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8002fac:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8002fae:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002fb0:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8002fb2:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8002fb4:	b952      	cbnz	r2, 8002fcc <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002fb6:	f7ff ffe3 	bl	8002f80 <RTC_Bcd2ToByte>
 8002fba:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	f7ff ffdf 	bl	8002f80 <RTC_Bcd2ToByte>
 8002fc2:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	f7ff ffdb 	bl	8002f80 <RTC_Bcd2ToByte>
 8002fca:	7088      	strb	r0, [r1, #2]
}
 8002fcc:	2000      	movs	r0, #0
 8002fce:	bd38      	pop	{r3, r4, r5, pc}

08002fd0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002fd0:	b538      	push	{r3, r4, r5, lr}
 8002fd2:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX) 
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 8002fd4:	6803      	ldr	r3, [r0, #0]
 8002fd6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002fd8:	b289      	uxth	r1, r1
 8002fda:	6061      	str	r1, [r4, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002fdc:	6919      	ldr	r1, [r3, #16]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8002fde:	681d      	ldr	r5, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002fe0:	f3c1 010e 	ubfx	r1, r1, #0, #15
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8002fe4:	f005 337f 	and.w	r3, r5, #2139062143	; 0x7f7f7f7f
 8002fe8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002fec:	60a1      	str	r1, [r4, #8]
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8002fee:	0c19      	lsrs	r1, r3, #16
 8002ff0:	f001 003f 	and.w	r0, r1, #63	; 0x3f
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8002ff4:	f3c3 2306 	ubfx	r3, r3, #8, #7
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002ff8:	f005 057f 	and.w	r5, r5, #127	; 0x7f
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8002ffc:	f001 0140 	and.w	r1, r1, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8003000:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8003002:	7063      	strb	r3, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003004:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8003006:	70e1      	strb	r1, [r4, #3]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003008:	b952      	cbnz	r2, 8003020 <HAL_RTC_GetTime+0x50>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800300a:	f7ff ffb9 	bl	8002f80 <RTC_Bcd2ToByte>
 800300e:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003010:	7860      	ldrb	r0, [r4, #1]
 8003012:	f7ff ffb5 	bl	8002f80 <RTC_Bcd2ToByte>
 8003016:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8003018:	78a0      	ldrb	r0, [r4, #2]
 800301a:	f7ff ffb1 	bl	8002f80 <RTC_Bcd2ToByte>
 800301e:	70a0      	strb	r0, [r4, #2]
  }
  
  return HAL_OK;
}
 8003020:	2000      	movs	r0, #0
 8003022:	bd38      	pop	{r3, r4, r5, pc}

08003024 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003024:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)   
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003026:	6803      	ldr	r3, [r0, #0]
{
 8003028:	4604      	mov	r4, r0
  if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	0692      	lsls	r2, r2, #26
 800302e:	d501      	bpl.n	8003034 <HAL_RTC_WaitForSynchro+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }

  return HAL_OK;
 8003030:	2000      	movs	r0, #0
 8003032:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800303a:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 800303c:	f7fd ffa6 	bl	8000f8c <HAL_GetTick>
 8003040:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	069b      	lsls	r3, r3, #26
 8003048:	d4f2      	bmi.n	8003030 <HAL_RTC_WaitForSynchro+0xc>
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 800304a:	f7fd ff9f 	bl	8000f8c <HAL_GetTick>
 800304e:	1b40      	subs	r0, r0, r5
 8003050:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003054:	d9f5      	bls.n	8003042 <HAL_RTC_WaitForSynchro+0x1e>
        return HAL_TIMEOUT;
 8003056:	2003      	movs	r0, #3
}
 8003058:	bd38      	pop	{r3, r4, r5, pc}
	...

0800305c <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800305c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003060:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003062:	6805      	ldr	r5, [r0, #0]
 8003064:	68c2      	ldr	r2, [r0, #12]
 8003066:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003068:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800306a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800306e:	4313      	orrs	r3, r2
 8003070:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003072:	6883      	ldr	r3, [r0, #8]
 8003074:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 8003076:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003078:	4303      	orrs	r3, r0
 800307a:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 800307e:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003082:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 8003084:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003088:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800308a:	4313      	orrs	r3, r2
 800308c:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800308e:	696b      	ldr	r3, [r5, #20]
 8003090:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8003094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003098:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800309a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800309e:	616b      	str	r3, [r5, #20]
 80030a0:	4b7e      	ldr	r3, [pc, #504]	; (800329c <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030a2:	d17f      	bne.n	80031a4 <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 80030a4:	429d      	cmp	r5, r3
 80030a6:	f04f 0419 	mov.w	r4, #25
 80030aa:	d147      	bne.n	800313c <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80030ac:	f7ff fd7a 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 80030b0:	fb04 f300 	mul.w	r3, r4, r0
 80030b4:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80030b8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80030bc:	007f      	lsls	r7, r7, #1
 80030be:	fbb3 f3f7 	udiv	r3, r3, r7
 80030c2:	fbb3 f3f8 	udiv	r3, r3, r8
 80030c6:	011f      	lsls	r7, r3, #4
 80030c8:	f7ff fd6c 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 80030cc:	4360      	muls	r0, r4
 80030ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fbb0 f6f3 	udiv	r6, r0, r3
 80030d8:	f7ff fd64 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 80030dc:	4360      	muls	r0, r4
 80030de:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e8:	fbb3 f3f8 	udiv	r3, r3, r8
 80030ec:	fb08 6313 	mls	r3, r8, r3, r6
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	3332      	adds	r3, #50	; 0x32
 80030f4:	fbb3 f3f8 	udiv	r3, r3, r8
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 80030fe:	f7ff fd51 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 8003102:	4360      	muls	r0, r4
 8003104:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003108:	0052      	lsls	r2, r2, #1
 800310a:	fbb0 faf2 	udiv	sl, r0, r2
 800310e:	f7ff fd49 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003112:	4360      	muls	r0, r4
 8003114:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	fbb0 f3f3 	udiv	r3, r0, r3
 800311e:	fbb3 f3f8 	udiv	r3, r3, r8
 8003122:	fb08 a313 	mls	r3, r8, r3, sl
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	3332      	adds	r3, #50	; 0x32
 800312a:	fbb3 f3f8 	udiv	r3, r3, r8
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003134:	4433      	add	r3, r6
 8003136:	60ab      	str	r3, [r5, #8]
 8003138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800313c:	f7ff fd1a 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 8003140:	fb04 f300 	mul.w	r3, r4, r0
 8003144:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8003148:	f04f 0864 	mov.w	r8, #100	; 0x64
 800314c:	007f      	lsls	r7, r7, #1
 800314e:	fbb3 f3f7 	udiv	r3, r3, r7
 8003152:	fbb3 f3f8 	udiv	r3, r3, r8
 8003156:	011f      	lsls	r7, r3, #4
 8003158:	f7ff fd0c 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 800315c:	4360      	muls	r0, r4
 800315e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	fbb0 f6f3 	udiv	r6, r0, r3
 8003168:	f7ff fd04 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 800316c:	4360      	muls	r0, r4
 800316e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	fbb0 f3f3 	udiv	r3, r0, r3
 8003178:	fbb3 f3f8 	udiv	r3, r3, r8
 800317c:	fb08 6313 	mls	r3, r8, r3, r6
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	3332      	adds	r3, #50	; 0x32
 8003184:	fbb3 f3f8 	udiv	r3, r3, r8
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 800318e:	f7ff fcf1 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 8003192:	4360      	muls	r0, r4
 8003194:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003198:	0052      	lsls	r2, r2, #1
 800319a:	fbb0 faf2 	udiv	sl, r0, r2
 800319e:	f7ff fce9 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 80031a2:	e7b6      	b.n	8003112 <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 80031a4:	429d      	cmp	r5, r3
 80031a6:	f04f 0419 	mov.w	r4, #25
 80031aa:	d143      	bne.n	8003234 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80031ac:	f7ff fcfa 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 80031b0:	fb04 f300 	mul.w	r3, r4, r0
 80031b4:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80031b8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80031bc:	00b6      	lsls	r6, r6, #2
 80031be:	fbb3 f3f6 	udiv	r3, r3, r6
 80031c2:	fbb3 f3f8 	udiv	r3, r3, r8
 80031c6:	011e      	lsls	r6, r3, #4
 80031c8:	f7ff fcec 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 80031cc:	4360      	muls	r0, r4
 80031ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	fbb0 f7f3 	udiv	r7, r0, r3
 80031d8:	f7ff fce4 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 80031dc:	4360      	muls	r0, r4
 80031de:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e8:	fbb3 f3f8 	udiv	r3, r3, r8
 80031ec:	fb08 7313 	mls	r3, r8, r3, r7
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	3332      	adds	r3, #50	; 0x32
 80031f4:	fbb3 f3f8 	udiv	r3, r3, r8
 80031f8:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80031fc:	f7ff fcd2 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 8003200:	4360      	muls	r0, r4
 8003202:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003206:	0092      	lsls	r2, r2, #2
 8003208:	fbb0 faf2 	udiv	sl, r0, r2
 800320c:	f7ff fcca 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003210:	4360      	muls	r0, r4
 8003212:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	fbb0 f3f3 	udiv	r3, r0, r3
 800321c:	fbb3 f3f8 	udiv	r3, r3, r8
 8003220:	fb08 a313 	mls	r3, r8, r3, sl
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	3332      	adds	r3, #50	; 0x32
 8003228:	fbb3 f3f8 	udiv	r3, r3, r8
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	433b      	orrs	r3, r7
 8003232:	e77f      	b.n	8003134 <UART_SetConfig+0xd8>
 8003234:	f7ff fc9e 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 8003238:	fb04 f300 	mul.w	r3, r4, r0
 800323c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8003240:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003244:	00b6      	lsls	r6, r6, #2
 8003246:	fbb3 f3f6 	udiv	r3, r3, r6
 800324a:	fbb3 f3f8 	udiv	r3, r3, r8
 800324e:	011e      	lsls	r6, r3, #4
 8003250:	f7ff fc90 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 8003254:	4360      	muls	r0, r4
 8003256:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	fbb0 f7f3 	udiv	r7, r0, r3
 8003260:	f7ff fc88 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 8003264:	4360      	muls	r0, r4
 8003266:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003270:	fbb3 f3f8 	udiv	r3, r3, r8
 8003274:	fb08 7313 	mls	r3, r8, r3, r7
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	3332      	adds	r3, #50	; 0x32
 800327c:	fbb3 f3f8 	udiv	r3, r3, r8
 8003280:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8003284:	f7ff fc76 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 8003288:	4360      	muls	r0, r4
 800328a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800328e:	0092      	lsls	r2, r2, #2
 8003290:	fbb0 faf2 	udiv	sl, r0, r2
 8003294:	f7ff fc6e 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 8003298:	e7ba      	b.n	8003210 <UART_SetConfig+0x1b4>
 800329a:	bf00      	nop
 800329c:	40013800 	.word	0x40013800

080032a0 <UART_WaitOnFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 80032a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a2:	4604      	mov	r4, r0
 80032a4:	460e      	mov	r6, r1
 80032a6:	4615      	mov	r5, r2
  tickstart = HAL_GetTick();
 80032a8:	f7fd fe70 	bl	8000f8c <HAL_GetTick>
 80032ac:	4607      	mov	r7, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80032ae:	6822      	ldr	r2, [r4, #0]
 80032b0:	6813      	ldr	r3, [r2, #0]
 80032b2:	ea36 0303 	bics.w	r3, r6, r3
 80032b6:	d101      	bne.n	80032bc <UART_WaitOnFlagUntilTimeout.constprop.1+0x1c>
  return HAL_OK;
 80032b8:	2000      	movs	r0, #0
}
 80032ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 80032bc:	1c6b      	adds	r3, r5, #1
 80032be:	d0f7      	beq.n	80032b0 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80032c0:	b9c5      	cbnz	r5, 80032f4 <UART_WaitOnFlagUntilTimeout.constprop.1+0x54>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032c2:	6823      	ldr	r3, [r4, #0]
          return HAL_TIMEOUT;
 80032c4:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032cc:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	f022 0220 	bic.w	r2, r2, #32
 80032d4:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032dc:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	f022 0201 	bic.w	r2, r2, #1
 80032e4:	615a      	str	r2, [r3, #20]
          huart->State= HAL_UART_STATE_READY;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
          __HAL_UNLOCK(huart);
 80032ec:	2300      	movs	r3, #0
 80032ee:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80032f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80032f4:	f7fd fe4a 	bl	8000f8c <HAL_GetTick>
 80032f8:	1bc0      	subs	r0, r0, r7
 80032fa:	4285      	cmp	r5, r0
 80032fc:	d2d7      	bcs.n	80032ae <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 80032fe:	e7e0      	b.n	80032c2 <UART_WaitOnFlagUntilTimeout.constprop.1+0x22>

08003300 <HAL_UART_Init>:
{
 8003300:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003302:	4604      	mov	r4, r0
 8003304:	b330      	cbz	r0, 8003354 <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 8003306:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800330a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800330e:	b91b      	cbnz	r3, 8003318 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003310:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003314:	f001 fe32 	bl	8004f7c <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 8003318:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 800331a:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 800331c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003320:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003322:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003324:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003328:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800332a:	f7ff fe97 	bl	800305c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800332e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003330:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003338:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800333a:	695a      	ldr	r2, [r3, #20]
 800333c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003340:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003348:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 800334a:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 800334e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003352:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003354:	2001      	movs	r0, #1
}
 8003356:	bd10      	pop	{r4, pc}

08003358 <HAL_UART_Transmit>:
{
 8003358:	b570      	push	{r4, r5, r6, lr}
 800335a:	460d      	mov	r5, r1
  tmp_state = huart->State;
 800335c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
{
 8003360:	4604      	mov	r4, r0
  tmp_state = huart->State;
 8003362:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8003364:	2901      	cmp	r1, #1
{
 8003366:	461e      	mov	r6, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8003368:	d001      	beq.n	800336e <HAL_UART_Transmit+0x16>
 800336a:	2922      	cmp	r1, #34	; 0x22
 800336c:	d14d      	bne.n	800340a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0))
 800336e:	2d00      	cmp	r5, #0
 8003370:	d049      	beq.n	8003406 <HAL_UART_Transmit+0xae>
 8003372:	2a00      	cmp	r2, #0
 8003374:	d047      	beq.n	8003406 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8003376:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800337a:	2b01      	cmp	r3, #1
 800337c:	d045      	beq.n	800340a <HAL_UART_Transmit+0xb2>
 800337e:	2301      	movs	r3, #1
 8003380:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003384:	2300      	movs	r3, #0
 8003386:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8003388:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 800338c:	84a2      	strh	r2, [r4, #36]	; 0x24
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 800338e:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8003390:	bf0c      	ite	eq
 8003392:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 8003394:	2312      	movne	r3, #18
    huart->TxXferCount = Size;
 8003396:	84e2      	strh	r2, [r4, #38]	; 0x26
      huart->State = HAL_UART_STATE_BUSY_TX;
 8003398:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    while(huart->TxXferCount > 0)
 800339c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800339e:	b98a      	cbnz	r2, 80033c4 <HAL_UART_Transmit+0x6c>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80033a0:	4632      	mov	r2, r6
 80033a2:	2140      	movs	r1, #64	; 0x40
 80033a4:	4620      	mov	r0, r4
 80033a6:	f7ff ff7b 	bl	80032a0 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80033aa:	b9c0      	cbnz	r0, 80033de <HAL_UART_Transmit+0x86>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80033ac:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80033b0:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 80033b2:	bf0c      	ite	eq
 80033b4:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 80033b6:	2301      	movne	r3, #1
 80033b8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80033bc:	2300      	movs	r3, #0
 80033be:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 80033c2:	bd70      	pop	{r4, r5, r6, pc}
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033c4:	68a3      	ldr	r3, [r4, #8]
      huart->TxXferCount--;
 80033c6:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->TxXferCount--;
 80033cc:	84e2      	strh	r2, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80033ce:	f04f 0180 	mov.w	r1, #128	; 0x80
 80033d2:	4632      	mov	r2, r6
 80033d4:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033d6:	d10d      	bne.n	80033f4 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80033d8:	f7ff ff62 	bl	80032a0 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80033dc:	b108      	cbz	r0, 80033e2 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80033de:	2003      	movs	r0, #3
 80033e0:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80033e2:	882b      	ldrh	r3, [r5, #0]
 80033e4:	6822      	ldr	r2, [r4, #0]
 80033e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ea:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80033ec:	6923      	ldr	r3, [r4, #16]
 80033ee:	b943      	cbnz	r3, 8003402 <HAL_UART_Transmit+0xaa>
          pData +=2;
 80033f0:	3502      	adds	r5, #2
 80033f2:	e7d3      	b.n	800339c <HAL_UART_Transmit+0x44>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80033f4:	f7ff ff54 	bl	80032a0 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80033f8:	2800      	cmp	r0, #0
 80033fa:	d1f0      	bne.n	80033de <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	782a      	ldrb	r2, [r5, #0]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	3501      	adds	r5, #1
 8003404:	e7ca      	b.n	800339c <HAL_UART_Transmit+0x44>
      return  HAL_ERROR;
 8003406:	2001      	movs	r0, #1
 8003408:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800340a:	2002      	movs	r0, #2
}
 800340c:	bd70      	pop	{r4, r5, r6, pc}

0800340e <HAL_UART_Receive_IT>:
  tmp_state = huart->State;
 800340e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003412:	b2db      	uxtb	r3, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 8003414:	2b01      	cmp	r3, #1
 8003416:	d001      	beq.n	800341c <HAL_UART_Receive_IT+0xe>
 8003418:	2b12      	cmp	r3, #18
 800341a:	d128      	bne.n	800346e <HAL_UART_Receive_IT+0x60>
    if((pData == NULL ) || (Size == 0))
 800341c:	b329      	cbz	r1, 800346a <HAL_UART_Receive_IT+0x5c>
 800341e:	b322      	cbz	r2, 800346a <HAL_UART_Receive_IT+0x5c>
    __HAL_LOCK(huart);
 8003420:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003424:	2b01      	cmp	r3, #1
 8003426:	d022      	beq.n	800346e <HAL_UART_Receive_IT+0x60>
 8003428:	2301      	movs	r3, #1
 800342a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342e:	2300      	movs	r3, #0
 8003430:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxXferSize = Size;
 8003432:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003434:	85c2      	strh	r2, [r0, #46]	; 0x2e
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8003436:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800343a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 800343e:	2a12      	cmp	r2, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8003440:	bf0c      	ite	eq
 8003442:	2232      	moveq	r2, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8003444:	2222      	movne	r2, #34	; 0x22
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003446:	6803      	ldr	r3, [r0, #0]
      huart->State = HAL_UART_STATE_BUSY_RX;
 8003448:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800344c:	68da      	ldr	r2, [r3, #12]
    huart->pRxBuffPtr = pData;
 800344e:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003454:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003456:	695a      	ldr	r2, [r3, #20]
    return HAL_OK;
 8003458:	2000      	movs	r0, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	f042 0220 	orr.w	r2, r2, #32
 8003466:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8003468:	4770      	bx	lr
      return HAL_ERROR;
 800346a:	2001      	movs	r0, #1
 800346c:	4770      	bx	lr
    return HAL_BUSY;
 800346e:	2002      	movs	r0, #2
}
 8003470:	4770      	bx	lr

08003472 <HAL_UART_TxCpltCallback>:
 8003472:	4770      	bx	lr

08003474 <HAL_UART_ErrorCallback>:
{
 8003474:	4770      	bx	lr

08003476 <HAL_UART_IRQHandler>:
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8003476:	6802      	ldr	r2, [r0, #0]
{
 8003478:	b513      	push	{r0, r1, r4, lr}
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 800347a:	6811      	ldr	r1, [r2, #0]
{
 800347c:	4604      	mov	r4, r0
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800347e:	07c9      	lsls	r1, r1, #31
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8003480:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003482:	d505      	bpl.n	8003490 <HAL_UART_IRQHandler+0x1a>
 8003484:	05db      	lsls	r3, r3, #23
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003486:	bf42      	ittt	mi
 8003488:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 800348a:	f043 0301 	orrmi.w	r3, r3, #1
 800348e:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8003490:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8003492:	6953      	ldr	r3, [r2, #20]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003494:	0788      	lsls	r0, r1, #30
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8003496:	f003 0301 	and.w	r3, r3, #1
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800349a:	d504      	bpl.n	80034a6 <HAL_UART_IRQHandler+0x30>
 800349c:	b11b      	cbz	r3, 80034a6 <HAL_UART_IRQHandler+0x30>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 800349e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80034a0:	f041 0104 	orr.w	r1, r1, #4
 80034a4:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 80034a6:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80034a8:	0749      	lsls	r1, r1, #29
 80034aa:	d504      	bpl.n	80034b6 <HAL_UART_IRQHandler+0x40>
 80034ac:	b11b      	cbz	r3, 80034b6 <HAL_UART_IRQHandler+0x40>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034ae:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80034b0:	f041 0102 	orr.w	r1, r1, #2
 80034b4:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80034b6:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80034b8:	0708      	lsls	r0, r1, #28
 80034ba:	d504      	bpl.n	80034c6 <HAL_UART_IRQHandler+0x50>
 80034bc:	b11b      	cbz	r3, 80034c6 <HAL_UART_IRQHandler+0x50>
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80034c0:	f043 0308 	orr.w	r3, r3, #8
 80034c4:	63e3      	str	r3, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 80034c6:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 80034c8:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80034ca:	0689      	lsls	r1, r1, #26
 80034cc:	d533      	bpl.n	8003536 <HAL_UART_IRQHandler+0xc0>
 80034ce:	0698      	lsls	r0, r3, #26
 80034d0:	d531      	bpl.n	8003536 <HAL_UART_IRQHandler+0xc0>
  tmp_state = huart->State; 
 80034d2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 80034d6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80034da:	2b22      	cmp	r3, #34	; 0x22
 80034dc:	d12b      	bne.n	8003536 <HAL_UART_IRQHandler+0xc0>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034de:	68a3      	ldr	r3, [r4, #8]
 80034e0:	6921      	ldr	r1, [r4, #16]
 80034e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80034e8:	d176      	bne.n	80035d8 <HAL_UART_IRQHandler+0x162>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034ea:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80034ec:	2900      	cmp	r1, #0
 80034ee:	d16f      	bne.n	80035d0 <HAL_UART_IRQHandler+0x15a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034f4:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1;
 80034f8:	62a3      	str	r3, [r4, #40]	; 0x28
    if(--huart->RxXferCount == 0)
 80034fa:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29b      	uxth	r3, r3
 8003500:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8003502:	b9c3      	cbnz	r3, 8003536 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003504:	6823      	ldr	r3, [r4, #0]
      HAL_UART_RxCpltCallback(huart);
 8003506:	4620      	mov	r0, r4
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	f022 0220 	bic.w	r2, r2, #32
 800350e:	60da      	str	r2, [r3, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8003510:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003514:	2a32      	cmp	r2, #50	; 0x32
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003516:	bf17      	itett	ne
 8003518:	68da      	ldrne	r2, [r3, #12]
        huart->State = HAL_UART_STATE_BUSY_TX;
 800351a:	2312      	moveq	r3, #18
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800351c:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 8003520:	60da      	strne	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003522:	bf1f      	itttt	ne
 8003524:	695a      	ldrne	r2, [r3, #20]
 8003526:	f022 0201 	bicne.w	r2, r2, #1
 800352a:	615a      	strne	r2, [r3, #20]
        huart->State = HAL_UART_STATE_READY;
 800352c:	2301      	movne	r3, #1
 800352e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 8003532:	f001 f8ab 	bl	800468c <HAL_UART_RxCpltCallback>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 800353a:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800353c:	0609      	lsls	r1, r1, #24
 800353e:	d522      	bpl.n	8003586 <HAL_UART_IRQHandler+0x110>
 8003540:	0610      	lsls	r0, r2, #24
 8003542:	d520      	bpl.n	8003586 <HAL_UART_IRQHandler+0x110>
  tmp_state = huart->State;
 8003544:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8003548:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800354c:	2a12      	cmp	r2, #18
 800354e:	d11a      	bne.n	8003586 <HAL_UART_IRQHandler+0x110>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003550:	68a2      	ldr	r2, [r4, #8]
 8003552:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003556:	6a22      	ldr	r2, [r4, #32]
 8003558:	d14c      	bne.n	80035f4 <HAL_UART_IRQHandler+0x17e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800355a:	8811      	ldrh	r1, [r2, #0]
 800355c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003560:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003562:	6921      	ldr	r1, [r4, #16]
 8003564:	2900      	cmp	r1, #0
 8003566:	d143      	bne.n	80035f0 <HAL_UART_IRQHandler+0x17a>
        huart->pTxBuffPtr += 2;
 8003568:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1;
 800356a:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0)
 800356c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800356e:	3a01      	subs	r2, #1
 8003570:	b292      	uxth	r2, r2
 8003572:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003574:	b93a      	cbnz	r2, 8003586 <HAL_UART_IRQHandler+0x110>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800357c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003584:	60da      	str	r2, [r3, #12]
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8003586:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8003588:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800358a:	0649      	lsls	r1, r1, #25
 800358c:	d510      	bpl.n	80035b0 <HAL_UART_IRQHandler+0x13a>
 800358e:	0652      	lsls	r2, r2, #25
 8003590:	d50e      	bpl.n	80035b0 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003592:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003594:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359a:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800359c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80035a0:	2b32      	cmp	r3, #50	; 0x32
    huart->State = HAL_UART_STATE_BUSY_RX;
 80035a2:	bf0c      	ite	eq
 80035a4:	2322      	moveq	r3, #34	; 0x22
    huart->State = HAL_UART_STATE_READY;
 80035a6:	2301      	movne	r3, #1
 80035a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80035ac:	f7ff ff61 	bl	8003472 <HAL_UART_TxCpltCallback>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80035b2:	b15b      	cbz	r3, 80035cc <HAL_UART_IRQHandler+0x156>
    __HAL_UART_CLEAR_PEFLAG(huart);
 80035b4:	6823      	ldr	r3, [r4, #0]
    HAL_UART_ErrorCallback(huart);
 80035b6:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_PEFLAG(huart);
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	9201      	str	r2, [sp, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	9b01      	ldr	r3, [sp, #4]
    huart->State = HAL_UART_STATE_READY;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 80035c8:	f7ff ff54 	bl	8003474 <HAL_UART_ErrorCallback>
}
 80035cc:	b002      	add	sp, #8
 80035ce:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	f823 2b01 	strh.w	r2, [r3], #1
 80035d6:	e78f      	b.n	80034f8 <HAL_UART_IRQHandler+0x82>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80035d8:	b921      	cbnz	r1, 80035e4 <HAL_UART_IRQHandler+0x16e>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035da:	1c59      	adds	r1, r3, #1
 80035dc:	6852      	ldr	r2, [r2, #4]
 80035de:	62a1      	str	r1, [r4, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	e78a      	b.n	80034fa <HAL_UART_IRQHandler+0x84>
 80035e4:	6852      	ldr	r2, [r2, #4]
 80035e6:	1c59      	adds	r1, r3, #1
 80035e8:	62a1      	str	r1, [r4, #40]	; 0x28
 80035ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035ee:	e7f7      	b.n	80035e0 <HAL_UART_IRQHandler+0x16a>
        huart->pTxBuffPtr += 1;
 80035f0:	3201      	adds	r2, #1
 80035f2:	e7ba      	b.n	800356a <HAL_UART_IRQHandler+0xf4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035f4:	1c51      	adds	r1, r2, #1
 80035f6:	6221      	str	r1, [r4, #32]
 80035f8:	7812      	ldrb	r2, [r2, #0]
 80035fa:	605a      	str	r2, [r3, #4]
 80035fc:	e7b6      	b.n	800356c <HAL_UART_IRQHandler+0xf6>
	...

08003600 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8003600:	b530      	push	{r4, r5, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8003602:	2400      	movs	r4, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8003604:	481c      	ldr	r0, [pc, #112]	; (8003678 <MX_ADC_Init+0x78>)
 8003606:	4b1d      	ldr	r3, [pc, #116]	; (800367c <MX_ADC_Init+0x7c>)
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
  hadc.Init.ContinuousConvMode = ENABLE;
 8003608:	2501      	movs	r5, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800360a:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800360e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003612:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003618:	6143      	str	r3, [r0, #20]
  hadc.Init.NbrOfConversion = 2;
 800361a:	2302      	movs	r3, #2
 800361c:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800361e:	2310      	movs	r3, #16
{
 8003620:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8003622:	9401      	str	r4, [sp, #4]
 8003624:	9402      	str	r4, [sp, #8]
 8003626:	9403      	str	r4, [sp, #12]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003628:	6084      	str	r4, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800362a:	60c4      	str	r4, [r0, #12]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 800362c:	6184      	str	r4, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800362e:	61c4      	str	r4, [r0, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8003630:	6204      	str	r4, [r0, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003632:	6245      	str	r5, [r0, #36]	; 0x24
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003634:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003636:	6343      	str	r3, [r0, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003638:	6384      	str	r4, [r0, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 800363a:	63c5      	str	r5, [r0, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800363c:	f7fd fcba 	bl	8000fb4 <HAL_ADC_Init>
 8003640:	b108      	cbz	r0, 8003646 <MX_ADC_Init+0x46>
  {
    Error_Handler();
 8003642:	f001 f877 	bl	8004734 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 8003646:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003648:	a901      	add	r1, sp, #4
 800364a:	480b      	ldr	r0, [pc, #44]	; (8003678 <MX_ADC_Init+0x78>)
  sConfig.Channel = ADC_CHANNEL_0;
 800364c:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800364e:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 8003650:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003652:	f7fd fdb3 	bl	80011bc <HAL_ADC_ConfigChannel>
 8003656:	b108      	cbz	r0, 800365c <MX_ADC_Init+0x5c>
  {
    Error_Handler();
 8003658:	f001 f86c 	bl	8004734 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800365c:	2301      	movs	r3, #1
 800365e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003660:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003662:	a901      	add	r1, sp, #4
 8003664:	4804      	ldr	r0, [pc, #16]	; (8003678 <MX_ADC_Init+0x78>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003666:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003668:	f7fd fda8 	bl	80011bc <HAL_ADC_ConfigChannel>
 800366c:	b108      	cbz	r0, 8003672 <MX_ADC_Init+0x72>
  {
    Error_Handler();
 800366e:	f001 f861 	bl	8004734 <Error_Handler>
  }

}
 8003672:	b005      	add	sp, #20
 8003674:	bd30      	pop	{r4, r5, pc}
 8003676:	bf00      	nop
 8003678:	2000010c 	.word	0x2000010c
 800367c:	40012400 	.word	0x40012400

08003680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003680:	b530      	push	{r4, r5, lr}
 8003682:	4605      	mov	r5, r0
 8003684:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003686:	2214      	movs	r2, #20
 8003688:	2100      	movs	r1, #0
 800368a:	a803      	add	r0, sp, #12
 800368c:	f001 fd4a 	bl	8005124 <memset>
  if(adcHandle->Instance==ADC1)
 8003690:	682a      	ldr	r2, [r5, #0]
 8003692:	4b1d      	ldr	r3, [pc, #116]	; (8003708 <HAL_ADC_MspInit+0x88>)
 8003694:	429a      	cmp	r2, r3
 8003696:	d134      	bne.n	8003702 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003698:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 800369c:	6a1a      	ldr	r2, [r3, #32]
    PA1     ------> ADC_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800369e:	481b      	ldr	r0, [pc, #108]	; (800370c <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a4:	621a      	str	r2, [r3, #32]
 80036a6:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a8:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036aa:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80036ae:	9201      	str	r2, [sp, #4]
 80036b0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b2:	69da      	ldr	r2, [r3, #28]

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80036b4:	4c16      	ldr	r4, [pc, #88]	; (8003710 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	61da      	str	r2, [r3, #28]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	9302      	str	r3, [sp, #8]
 80036c4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80036c6:	2303      	movs	r3, #3
 80036c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036ca:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036cc:	f7fe f856 	bl	800177c <HAL_GPIO_Init>
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80036d0:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 80036d2:	4b10      	ldr	r3, [pc, #64]	; (8003714 <HAL_ADC_MspInit+0x94>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80036d4:	60e2      	str	r2, [r4, #12]
    hdma_adc.Instance = DMA1_Channel1;
 80036d6:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036d8:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036dc:	2300      	movs	r3, #0
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036de:	6122      	str	r2, [r4, #16]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036e0:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80036e2:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc.Init.Mode = DMA_NORMAL;
 80036e8:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 80036ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80036ee:	4620      	mov	r0, r4
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036f0:	6162      	str	r2, [r4, #20]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 80036f2:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80036f4:	f7fd ff5e 	bl	80015b4 <HAL_DMA_Init>
 80036f8:	b108      	cbz	r0, 80036fe <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 80036fa:	f001 f81b 	bl	8004734 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80036fe:	646c      	str	r4, [r5, #68]	; 0x44
 8003700:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003702:	b009      	add	sp, #36	; 0x24
 8003704:	bd30      	pop	{r4, r5, pc}
 8003706:	bf00      	nop
 8003708:	40012400 	.word	0x40012400
 800370c:	40020000 	.word	0x40020000
 8003710:	200000c8 	.word	0x200000c8
 8003714:	40026008 	.word	0x40026008

08003718 <BH1750_SetMtreg.part.0>:
		return BH1750_OK;

	return BH1750_ERROR;
}

BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
 8003718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	if(Mtreg <= 32 || Mtreg > 254) return BH1750_ERROR;

	Bh1750_Mtreg = Mtreg;
 800371a:	4b0e      	ldr	r3, [pc, #56]	; (8003754 <BH1750_SetMtreg.part.0+0x3c>)
	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
	tmp[1] = (0x60 | (Mtreg & 0x1F));

	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 800371c:	aa03      	add	r2, sp, #12
	Bh1750_Mtreg = Mtreg;
 800371e:	7018      	strb	r0, [r3, #0]
	tmp[0] = (0x40 | (Mtreg >> 5));
 8003720:	0943      	lsrs	r3, r0, #5
 8003722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003726:	f88d 300c 	strb.w	r3, [sp, #12]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 800372a:	230a      	movs	r3, #10
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 800372c:	f000 001f 	and.w	r0, r0, #31
 8003730:	f040 0060 	orr.w	r0, r0, #96	; 0x60
 8003734:	f88d 000d 	strb.w	r0, [sp, #13]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 8003738:	4807      	ldr	r0, [pc, #28]	; (8003758 <BH1750_SetMtreg.part.0+0x40>)
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	2146      	movs	r1, #70	; 0x46
 800373e:	2302      	movs	r3, #2
 8003740:	6800      	ldr	r0, [r0, #0]
 8003742:	f7fe fa6d 	bl	8001c20 <HAL_I2C_Master_Transmit>
		return BH1750_OK;

	return BH1750_ERROR;
}
 8003746:	3000      	adds	r0, #0
 8003748:	bf18      	it	ne
 800374a:	2001      	movne	r0, #1
 800374c:	b005      	add	sp, #20
 800374e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003752:	bf00      	nop
 8003754:	20000168 	.word	0x20000168
 8003758:	20000164 	.word	0x20000164

0800375c <BH1750_Reset>:
{
 800375c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t tmp = 0x07;
 800375e:	2307      	movs	r3, #7
 8003760:	aa04      	add	r2, sp, #16
 8003762:	f802 3d01 	strb.w	r3, [r2, #-1]!
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8003766:	230a      	movs	r3, #10
 8003768:	4806      	ldr	r0, [pc, #24]	; (8003784 <BH1750_Reset+0x28>)
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	2146      	movs	r1, #70	; 0x46
 800376e:	2301      	movs	r3, #1
 8003770:	6800      	ldr	r0, [r0, #0]
 8003772:	f7fe fa55 	bl	8001c20 <HAL_I2C_Master_Transmit>
}
 8003776:	3000      	adds	r0, #0
 8003778:	bf18      	it	ne
 800377a:	2001      	movne	r0, #1
 800377c:	b005      	add	sp, #20
 800377e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003782:	bf00      	nop
 8003784:	20000164 	.word	0x20000164

08003788 <BH1750_Init>:
{
 8003788:	b508      	push	{r3, lr}
	bh1750_i2c = hi2c;
 800378a:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <BH1750_Init+0x20>)
 800378c:	6018      	str	r0, [r3, #0]
	if(BH1750_OK == BH1750_Reset())
 800378e:	f7ff ffe5 	bl	800375c <BH1750_Reset>
 8003792:	b930      	cbnz	r0, 80037a2 <BH1750_Init+0x1a>
 8003794:	2045      	movs	r0, #69	; 0x45
 8003796:	f7ff ffbf 	bl	8003718 <BH1750_SetMtreg.part.0>
			return BH1750_OK;
 800379a:	3000      	adds	r0, #0
 800379c:	bf18      	it	ne
 800379e:	2001      	movne	r0, #1
 80037a0:	bd08      	pop	{r3, pc}
	return BH1750_ERROR;
 80037a2:	2001      	movs	r0, #1
}
 80037a4:	bd08      	pop	{r3, pc}
 80037a6:	bf00      	nop
 80037a8:	20000164 	.word	0x20000164

080037ac <BH1750_SetMode>:
{
 80037ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 80037ae:	0903      	lsrs	r3, r0, #4
{
 80037b0:	f88d 000f 	strb.w	r0, [sp, #15]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 80037b4:	d015      	beq.n	80037e2 <BH1750_SetMode+0x36>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 80037b6:	f000 030f 	and.w	r3, r0, #15
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d811      	bhi.n	80037e2 <BH1750_SetMode+0x36>
	Bh1750_Mode = Mode;
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <BH1750_SetMode+0x3c>)
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 80037c0:	f10d 020f 	add.w	r2, sp, #15
	Bh1750_Mode = Mode;
 80037c4:	7018      	strb	r0, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 80037c6:	230a      	movs	r3, #10
 80037c8:	4808      	ldr	r0, [pc, #32]	; (80037ec <BH1750_SetMode+0x40>)
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	2146      	movs	r1, #70	; 0x46
 80037ce:	2301      	movs	r3, #1
 80037d0:	6800      	ldr	r0, [r0, #0]
 80037d2:	f7fe fa25 	bl	8001c20 <HAL_I2C_Master_Transmit>
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 80037d6:	3000      	adds	r0, #0
 80037d8:	bf18      	it	ne
 80037da:	2001      	movne	r0, #1
}
 80037dc:	b005      	add	sp, #20
 80037de:	f85d fb04 	ldr.w	pc, [sp], #4
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 80037e2:	2001      	movs	r0, #1
 80037e4:	e7fa      	b.n	80037dc <BH1750_SetMode+0x30>
 80037e6:	bf00      	nop
 80037e8:	20000160 	.word	0x20000160
 80037ec:	20000164 	.word	0x20000164

080037f0 <BH1750_ReadLight>:
BH1750_STATUS BH1750_ReadLight(float *Result)
{
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 80037f0:	230a      	movs	r3, #10
{
 80037f2:	b530      	push	{r4, r5, lr}
 80037f4:	4605      	mov	r5, r0
 80037f6:	b085      	sub	sp, #20
	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 80037f8:	481a      	ldr	r0, [pc, #104]	; (8003864 <BH1750_ReadLight+0x74>)
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	aa03      	add	r2, sp, #12
 80037fe:	2302      	movs	r3, #2
 8003800:	2146      	movs	r1, #70	; 0x46
 8003802:	6800      	ldr	r0, [r0, #0]
 8003804:	f7fe fae2 	bl	8001dcc <HAL_I2C_Master_Receive>
 8003808:	bb48      	cbnz	r0, 800385e <BH1750_ReadLight+0x6e>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 800380a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800380e:	ba40      	rev16	r0, r0
 8003810:	b280      	uxth	r0, r0
 8003812:	f7fd f9c9 	bl	8000ba8 <__aeabi_i2f>

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8003816:	4b14      	ldr	r3, [pc, #80]	; (8003868 <BH1750_ReadLight+0x78>)
		result = (tmp[0] << 8) | (tmp[1]);
 8003818:	4604      	mov	r4, r0
		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 800381a:	7818      	ldrb	r0, [r3, #0]
 800381c:	2845      	cmp	r0, #69	; 0x45
 800381e:	d00a      	beq.n	8003836 <BH1750_ReadLight+0x46>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 8003820:	f7fd f9be 	bl	8000ba0 <__aeabi_ui2f>
 8003824:	4601      	mov	r1, r0
 8003826:	4811      	ldr	r0, [pc, #68]	; (800386c <BH1750_ReadLight+0x7c>)
 8003828:	f7fd fac6 	bl	8000db8 <__aeabi_fdiv>
 800382c:	4601      	mov	r1, r0
 800382e:	4620      	mov	r0, r4
 8003830:	f7fd fa0e 	bl	8000c50 <__aeabi_fmul>
 8003834:	4604      	mov	r4, r0
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 8003836:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <BH1750_ReadLight+0x80>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b21      	cmp	r3, #33	; 0x21
 800383c:	d001      	beq.n	8003842 <BH1750_ReadLight+0x52>
 800383e:	2b11      	cmp	r3, #17
 8003840:	d105      	bne.n	800384e <BH1750_ReadLight+0x5e>
		{
			result /= 2.0;
 8003842:	4620      	mov	r0, r4
 8003844:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003848:	f7fd fa02 	bl	8000c50 <__aeabi_fmul>
 800384c:	4604      	mov	r4, r0
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 800384e:	4909      	ldr	r1, [pc, #36]	; (8003874 <BH1750_ReadLight+0x84>)
 8003850:	4620      	mov	r0, r4
 8003852:	f7fd fab1 	bl	8000db8 <__aeabi_fdiv>
 8003856:	6028      	str	r0, [r5, #0]
		return BH1750_OK;
 8003858:	2000      	movs	r0, #0
	}
	return BH1750_ERROR;
}
 800385a:	b005      	add	sp, #20
 800385c:	bd30      	pop	{r4, r5, pc}
	return BH1750_ERROR;
 800385e:	2001      	movs	r0, #1
 8003860:	e7fb      	b.n	800385a <BH1750_ReadLight+0x6a>
 8003862:	bf00      	nop
 8003864:	20000164 	.word	0x20000164
 8003868:	20000168 	.word	0x20000168
 800386c:	428a0000 	.word	0x428a0000
 8003870:	20000160 	.word	0x20000160
 8003874:	3f99999a 	.word	0x3f99999a

08003878 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <MX_DMA_Init+0x2c>)
{
 800387a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800387c:	69da      	ldr	r2, [r3, #28]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800387e:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003880:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003884:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003886:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003888:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800388a:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800388c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003894:	f7fd fe38 	bl	8001508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003898:	200b      	movs	r0, #11
 800389a:	f7fd fe69 	bl	8001570 <HAL_NVIC_EnableIRQ>

}
 800389e:	b003      	add	sp, #12
 80038a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80038a4:	40023800 	.word	0x40023800

080038a8 <filter_sred>:

#include "filter_sred.h"

unsigned short int	filter_sred(unsigned short int ADC_val, unsigned short int* buf, FILTER_REG* filter_reg){
	if (filter_reg->Reg.Flag){
 80038a8:	7813      	ldrb	r3, [r2, #0]
unsigned short int	filter_sred(unsigned short int ADC_val, unsigned short int* buf, FILTER_REG* filter_reg){
 80038aa:	b530      	push	{r4, r5, lr}
	if (filter_reg->Reg.Flag){
 80038ac:	f013 0401 	ands.w	r4, r3, #1
 80038b0:	6813      	ldr	r3, [r2, #0]
 80038b2:	d01d      	beq.n	80038f0 <filter_sred+0x48>
		filter_reg->Reg.Filter_sum-=buf[filter_reg->Reg.Index];
 80038b4:	8814      	ldrh	r4, [r2, #0]
 80038b6:	f3c4 0447 	ubfx	r4, r4, #1, #8
 80038ba:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80038be:	ebc5 2553 	rsb	r5, r5, r3, lsr #9
		filter_reg->Reg.Filter_sum+=ADC_val;
 80038c2:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80038c6:	4405      	add	r5, r0
 80038c8:	f365 235f 	bfi	r3, r5, #9, #23
 80038cc:	6013      	str	r3, [r2, #0]
		buf[filter_reg->Reg.Index]=ADC_val;
 80038ce:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
		if (filter_reg->Reg.Index>=COUNT_FILTER-1){
 80038d2:	8813      	ldrh	r3, [r2, #0]
 80038d4:	f403 71ff 	and.w	r1, r3, #510	; 0x1fe
 80038d8:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
			filter_reg->Reg.Index=0;
		}
		else{
			filter_reg->Reg.Index++;
 80038dc:	bf16      	itet	ne
 80038de:	3401      	addne	r4, #1
			filter_reg->Reg.Index=0;
 80038e0:	f36f 0348 	bfceq	r3, #1, #8
			filter_reg->Reg.Index++;
 80038e4:	f364 0348 	bfine	r3, r4, #1, #8
 80038e8:	8013      	strh	r3, [r2, #0]
		}
		else{
			filter_reg->Reg.Index++;
		}
	}
	return (filter_reg->Reg.Filter_sum/COUNT_FILTER);
 80038ea:	6810      	ldr	r0, [r2, #0]
}
 80038ec:	0c40      	lsrs	r0, r0, #17
 80038ee:	bd30      	pop	{r4, r5, pc}
		filter_reg->Reg.Filter_sum+=ADC_val;
 80038f0:	eb00 2553 	add.w	r5, r0, r3, lsr #9
 80038f4:	f365 235f 	bfi	r3, r5, #9, #23
 80038f8:	6013      	str	r3, [r2, #0]
		buf[filter_reg->Reg.Index]=ADC_val;
 80038fa:	f3c3 0347 	ubfx	r3, r3, #1, #8
 80038fe:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
		if (filter_reg->Reg.Index>=COUNT_FILTER-1){
 8003902:	8811      	ldrh	r1, [r2, #0]
 8003904:	f401 70ff 	and.w	r0, r1, #510	; 0x1fe
 8003908:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
			filter_reg->Reg.Index=0;
 800390c:	bf05      	ittet	eq
 800390e:	f364 0148 	bfieq	r1, r4, #1, #8
 8003912:	8011      	strheq	r1, [r2, #0]
			filter_reg->Reg.Index++;
 8003914:	3301      	addne	r3, #1
			filter_reg->Reg.Flag=1;
 8003916:	b2c9      	uxtbeq	r1, r1
 8003918:	bf0b      	itete	eq
 800391a:	f041 0101 	orreq.w	r1, r1, #1
			filter_reg->Reg.Index++;
 800391e:	f363 0148 	bfine	r1, r3, #1, #8
			filter_reg->Reg.Flag=1;
 8003922:	7011      	strbeq	r1, [r2, #0]
			filter_reg->Reg.Index++;
 8003924:	8011      	strhne	r1, [r2, #0]
 8003926:	e7e0      	b.n	80038ea <filter_sred+0x42>

08003928 <MX_GPIO_Init>:
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003928:	2214      	movs	r2, #20
{
 800392a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800392e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003930:	eb0d 0002 	add.w	r0, sp, r2
 8003934:	2100      	movs	r1, #0
 8003936:	f001 fbf5 	bl	8005124 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800393a:	4b56      	ldr	r3, [pc, #344]	; (8003a94 <MX_GPIO_Init+0x16c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_1_EN_Pin|MOTOR_1_D_Pin|MOTOR_0_EN_Pin|MOTOR_0_D_Pin 
 800393c:	4d56      	ldr	r5, [pc, #344]	; (8003a98 <MX_GPIO_Init+0x170>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800393e:	69da      	ldr	r2, [r3, #28]
                          |MOTOR_3_D_Pin|MOTOR_4_D_Pin|MOTOR_4_EN_Pin|SIM_PWR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_3_EN_Pin|MOTOR_2_D_Pin|MOTOR_2_EN_Pin|SIM_SLP_Pin, GPIO_PIN_RESET);
 8003940:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8003aa4 <MX_GPIO_Init+0x17c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003944:	f042 0204 	orr.w	r2, r2, #4
 8003948:	61da      	str	r2, [r3, #28]
 800394a:	69da      	ldr	r2, [r3, #28]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, KEY_3V_BUS_Pin|CHR_KEY_1_Pin|CHR_KEY_2_Pin|BAT_KEY_2_Pin 
 800394c:	4e53      	ldr	r6, [pc, #332]	; (8003a9c <MX_GPIO_Init+0x174>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800394e:	f002 0204 	and.w	r2, r2, #4
 8003952:	9200      	str	r2, [sp, #0]
 8003954:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003956:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOB, MOTOR_1_EN_Pin|MOTOR_1_D_Pin|MOTOR_0_EN_Pin|MOTOR_0_D_Pin 
 8003958:	4628      	mov	r0, r5
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800395a:	f042 0220 	orr.w	r2, r2, #32
 800395e:	61da      	str	r2, [r3, #28]
 8003960:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOB, MOTOR_1_EN_Pin|MOTOR_1_D_Pin|MOTOR_0_EN_Pin|MOTOR_0_D_Pin 
 8003962:	f24f 4107 	movw	r1, #62471	; 0xf407
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003966:	f002 0220 	and.w	r2, r2, #32
 800396a:	9201      	str	r2, [sp, #4]
 800396c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800396e:	69da      	ldr	r2, [r3, #28]
                          |BAT_KEY_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	61da      	str	r2, [r3, #28]
 8003978:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800397a:	f04f 0903 	mov.w	r9, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800397e:	f002 0201 	and.w	r2, r2, #1
 8003982:	9202      	str	r2, [sp, #8]
 8003984:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003986:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ESTOP_0_0_Pin|ESTOP_0_1_Pin|ESTOP_1_0_Pin|ESTOP_1_1_Pin;
 8003988:	f04f 0af0 	mov.w	sl, #240	; 0xf0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800398c:	f042 0202 	orr.w	r2, r2, #2
 8003990:	61da      	str	r2, [r3, #28]
 8003992:	69da      	ldr	r2, [r3, #28]

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_1_EN_Pin|MOTOR_1_D_Pin|MOTOR_3_D_Pin|MOTOR_4_D_Pin 
                          |MOTOR_4_EN_Pin|SIM_PWR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003994:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003996:	f002 0202 	and.w	r2, r2, #2
 800399a:	9203      	str	r2, [sp, #12]
 800399c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800399e:	69da      	ldr	r2, [r3, #28]
 80039a0:	f042 0208 	orr.w	r2, r2, #8
 80039a4:	61da      	str	r2, [r3, #28]
 80039a6:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(GPIOB, MOTOR_1_EN_Pin|MOTOR_1_D_Pin|MOTOR_0_EN_Pin|MOTOR_0_D_Pin 
 80039a8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	9304      	str	r3, [sp, #16]
 80039b0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, MOTOR_1_EN_Pin|MOTOR_1_D_Pin|MOTOR_0_EN_Pin|MOTOR_0_D_Pin 
 80039b2:	f7fd ffa5 	bl	8001900 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, MOTOR_3_EN_Pin|MOTOR_2_D_Pin|MOTOR_2_EN_Pin|SIM_SLP_Pin, GPIO_PIN_RESET);
 80039b6:	4640      	mov	r0, r8
 80039b8:	2200      	movs	r2, #0
 80039ba:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80039be:	f7fd ff9f 	bl	8001900 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, KEY_3V_BUS_Pin|CHR_KEY_1_Pin|CHR_KEY_2_Pin|BAT_KEY_2_Pin 
 80039c2:	2200      	movs	r2, #0
 80039c4:	4630      	mov	r0, r6
 80039c6:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80039ca:	f7fd ff99 	bl	8001900 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5;
 80039ce:	f242 0330 	movw	r3, #8240	; 0x2030
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039d2:	a905      	add	r1, sp, #20
 80039d4:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5;
 80039d6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039d8:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039de:	f7fd fecd 	bl	800177c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_7_Pin|BUTTON_4_Pin|BUTTON_5_Pin 
 80039e2:	f641 030f 	movw	r3, #6159	; 0x180f
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039e6:	a905      	add	r1, sp, #20
 80039e8:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_7_Pin|BUTTON_4_Pin|BUTTON_5_Pin 
 80039ea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039ec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ee:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039f0:	f7fd fec4 	bl	800177c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f4:	a905      	add	r1, sp, #20
 80039f6:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = ESTOP_0_0_Pin|ESTOP_0_1_Pin|ESTOP_1_0_Pin|ESTOP_1_1_Pin;
 80039f8:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039fc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fe:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a00:	f7fd febc 	bl	800177c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MOTOR_1_EN_Pin|MOTOR_1_D_Pin|MOTOR_3_D_Pin|MOTOR_4_D_Pin 
 8003a04:	f24f 0303 	movw	r3, #61443	; 0xf003
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a08:	a905      	add	r1, sp, #20
 8003a0a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = MOTOR_1_EN_Pin|MOTOR_1_D_Pin|MOTOR_3_D_Pin|MOTOR_4_D_Pin 
 8003a0c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a0e:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a12:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a14:	f7fd feb2 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_0_EN_Pin|MOTOR_0_D_Pin;
 8003a18:	f240 4304 	movw	r3, #1028	; 0x404
 8003a1c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a1e:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a20:	a905      	add	r1, sp, #20
 8003a22:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a24:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a26:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a28:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a2a:	f7fd fea7 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR_3_EN_Pin|MOTOR_2_D_Pin|MOTOR_2_EN_Pin|SIM_SLP_Pin;
 8003a2e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a32:	a905      	add	r1, sp, #20
 8003a34:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = MOTOR_3_EN_Pin|MOTOR_2_D_Pin|MOTOR_2_EN_Pin|SIM_SLP_Pin;
 8003a36:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a38:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a3e:	f7fd fe9d 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = KEY_3V_BUS_Pin|CHR_KEY_1_Pin|CHR_KEY_2_Pin|BAT_KEY_2_Pin 
 8003a42:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
                          |BAT_KEY_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a46:	a905      	add	r1, sp, #20
 8003a48:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = KEY_3V_BUS_Pin|CHR_KEY_1_Pin|CHR_KEY_2_Pin|BAT_KEY_2_Pin 
 8003a4a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a4c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a50:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a52:	f7fd fe93 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5a:	a905      	add	r1, sp, #20
 8003a5c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003a5e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a60:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a64:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a66:	f7fd fe89 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a6a:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a6c:	a905      	add	r1, sp, #20
 8003a6e:	480c      	ldr	r0, [pc, #48]	; (8003aa0 <MX_GPIO_Init+0x178>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a70:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a72:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a76:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a78:	f7fd fe80 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_2_Pin|BUTTON_0_Pin|BUTTON_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a7c:	a905      	add	r1, sp, #20
 8003a7e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_2_Pin|BUTTON_0_Pin|BUTTON_1_Pin;
 8003a80:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a84:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a88:	f7fd fe78 	bl	800177c <HAL_GPIO_Init>

}
 8003a8c:	b00a      	add	sp, #40	; 0x28
 8003a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a92:	bf00      	nop
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40020400 	.word	0x40020400
 8003a9c:	40020000 	.word	0x40020000
 8003aa0:	40020c00 	.word	0x40020c00
 8003aa4:	40020800 	.word	0x40020800

08003aa8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003aa8:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8003aaa:	480c      	ldr	r0, [pc, #48]	; (8003adc <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 8003aac:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <MX_I2C1_Init+0x38>)
 8003aae:	f8df e034 	ldr.w	lr, [pc, #52]	; 8003ae4 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ab2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 8003ab6:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003aba:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003abc:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003abe:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003ac0:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ac2:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003ac4:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ac6:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ac8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003aca:	f7fe f81b 	bl	8001b04 <HAL_I2C_Init>
 8003ace:	b118      	cbz	r0, 8003ad8 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8003ad0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003ad4:	f000 be2e 	b.w	8004734 <Error_Handler>
 8003ad8:	bd08      	pop	{r3, pc}
 8003ada:	bf00      	nop
 8003adc:	2000016c 	.word	0x2000016c
 8003ae0:	40005400 	.word	0x40005400
 8003ae4:	00061a80 	.word	0x00061a80

08003ae8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003ae8:	b510      	push	{r4, lr}
 8003aea:	4604      	mov	r4, r0
 8003aec:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aee:	2214      	movs	r2, #20
 8003af0:	2100      	movs	r1, #0
 8003af2:	a803      	add	r0, sp, #12
 8003af4:	f001 fb16 	bl	8005124 <memset>
  if(i2cHandle->Instance==I2C1)
 8003af8:	6822      	ldr	r2, [r4, #0]
 8003afa:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <HAL_I2C_MspInit+0x60>)
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d121      	bne.n	8003b44 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b00:	4c12      	ldr	r4, [pc, #72]	; (8003b4c <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b02:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b04:	69e3      	ldr	r3, [r4, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b06:	4812      	ldr	r0, [pc, #72]	; (8003b50 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b08:	f043 0302 	orr.w	r3, r3, #2
 8003b0c:	61e3      	str	r3, [r4, #28]
 8003b0e:	69e3      	ldr	r3, [r4, #28]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	9301      	str	r3, [sp, #4]
 8003b16:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b1c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b1e:	2312      	movs	r3, #18
 8003b20:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b22:	2301      	movs	r3, #1
 8003b24:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b26:	2303      	movs	r3, #3
 8003b28:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b2a:	2304      	movs	r3, #4
 8003b2c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b2e:	f7fd fe25 	bl	800177c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b38:	6263      	str	r3, [r4, #36]	; 0x24
 8003b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b40:	9302      	str	r3, [sp, #8]
 8003b42:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003b44:	b008      	add	sp, #32
 8003b46:	bd10      	pop	{r4, pc}
 8003b48:	40005400 	.word	0x40005400
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40020400 	.word	0x40020400

08003b54 <getDateTime>:
	memset(_buffer, 0, sizeof(uint8_t) * size);
	return _buffer;
}

void getDateTime()
{
 8003b54:	b510      	push	{r4, lr}
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8003b56:	4c15      	ldr	r4, [pc, #84]	; (8003bac <getDateTime+0x58>)
{
 8003b58:	b086      	sub	sp, #24
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8003b5a:	a901      	add	r1, sp, #4
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	4620      	mov	r0, r4
 8003b60:	f7ff fa36 	bl	8002fd0 <HAL_RTC_GetTime>

	c_hour = time.Hours;
 8003b64:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003b68:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <getDateTime+0x5c>)
	c_min = time.Minutes;
	c_sec = time.Seconds;

	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003b6a:	4669      	mov	r1, sp
	c_hour = time.Hours;
 8003b6c:	701a      	strb	r2, [r3, #0]
	c_min = time.Minutes;
 8003b6e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <getDateTime+0x60>)
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003b74:	4620      	mov	r0, r4
	c_min = time.Minutes;
 8003b76:	701a      	strb	r2, [r3, #0]
	c_sec = time.Seconds;
 8003b78:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8003b7c:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <getDateTime+0x64>)
 8003b7e:	701a      	strb	r2, [r3, #0]
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003b80:	2200      	movs	r2, #0
 8003b82:	f7ff fa05 	bl	8002f90 <HAL_RTC_GetDate>

	c_dow = date.WeekDay;
 8003b86:	f89d 2000 	ldrb.w	r2, [sp]
 8003b8a:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <getDateTime+0x68>)
 8003b8c:	701a      	strb	r2, [r3, #0]
	c_year = date.Year;
 8003b8e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003b92:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <getDateTime+0x6c>)
 8003b94:	701a      	strb	r2, [r3, #0]
	c_month = date.Month;
 8003b96:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <getDateTime+0x70>)
 8003b9c:	701a      	strb	r2, [r3, #0]
	c_day =  date.Date;
 8003b9e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8003ba2:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <getDateTime+0x74>)
 8003ba4:	701a      	strb	r2, [r3, #0]
}
 8003ba6:	b006      	add	sp, #24
 8003ba8:	bd10      	pop	{r4, pc}
 8003baa:	bf00      	nop
 8003bac:	20000720 	.word	0x20000720
 8003bb0:	200006e8 	.word	0x200006e8
 8003bb4:	200003f4 	.word	0x200003f4
 8003bb8:	20000713 	.word	0x20000713
 8003bbc:	200006fe 	.word	0x200006fe
 8003bc0:	200003d5 	.word	0x200003d5
 8003bc4:	200003d7 	.word	0x200003d7
 8003bc8:	200001cc 	.word	0x200001cc

08003bcc <RTC_Set>:

_Bool RTC_Set(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec, uint8_t dow)
{
 8003bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bce:	4607      	mov	r7, r0
 8003bd0:	460e      	mov	r6, r1
 8003bd2:	4615      	mov	r5, r2
 8003bd4:	b087      	sub	sp, #28
    HAL_StatusTypeDef res;
    RTC_TimeTypeDef time;
    RTC_DateTypeDef date;

    memset(&time, 0, sizeof(time));
 8003bd6:	2214      	movs	r2, #20
 8003bd8:	2100      	movs	r1, #0
 8003bda:	a801      	add	r0, sp, #4
{
 8003bdc:	461c      	mov	r4, r3
    memset(&time, 0, sizeof(time));
 8003bde:	f001 faa1 	bl	8005124 <memset>
    memset(&date, 0, sizeof(date));

    date.WeekDay = dow;
 8003be2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    date.Year = year;
    date.Month = month;
    date.Date = day;

    res = HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003be6:	2200      	movs	r2, #0
 8003be8:	4669      	mov	r1, sp
 8003bea:	4811      	ldr	r0, [pc, #68]	; (8003c30 <RTC_Set+0x64>)
    date.WeekDay = dow;
 8003bec:	f88d 3000 	strb.w	r3, [sp]
    date.Year = year;
 8003bf0:	f88d 7003 	strb.w	r7, [sp, #3]
    date.Month = month;
 8003bf4:	f88d 6001 	strb.w	r6, [sp, #1]
    date.Date = day;
 8003bf8:	f88d 5002 	strb.w	r5, [sp, #2]
    res = HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003bfc:	f7ff f967 	bl	8002ece <HAL_RTC_SetDate>
    if(res != HAL_OK) {
 8003c00:	4602      	mov	r2, r0
 8003c02:	b990      	cbnz	r0, 8003c2a <RTC_Set+0x5e>
        return 1;
    }

    time.Hours = hour;
    time.Minutes = min;
 8003c04:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    time.Seconds = sec;

    res = HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8003c08:	a901      	add	r1, sp, #4
    time.Minutes = min;
 8003c0a:	f88d 3005 	strb.w	r3, [sp, #5]
    time.Seconds = sec;
 8003c0e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    res = HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8003c12:	4807      	ldr	r0, [pc, #28]	; (8003c30 <RTC_Set+0x64>)
    time.Hours = hour;
 8003c14:	f88d 4004 	strb.w	r4, [sp, #4]
    time.Seconds = sec;
 8003c18:	f88d 3006 	strb.w	r3, [sp, #6]
    res = HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8003c1c:	f7ff f8ef 	bl	8002dfe <HAL_RTC_SetTime>
    if(res != HAL_OK) {
 8003c20:	3000      	adds	r0, #0
 8003c22:	bf18      	it	ne
 8003c24:	2001      	movne	r0, #1
        return 1;
    }
    return 0;
}
 8003c26:	b007      	add	sp, #28
 8003c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return 1;
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	e7fb      	b.n	8003c26 <RTC_Set+0x5a>
 8003c2e:	bf00      	nop
 8003c30:	20000720 	.word	0x20000720

08003c34 <batKey1Handler>:

void batKey1Handler()
{
	if(batKey1State == 1){
 8003c34:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <batKey1Handler+0x14>)
 8003c36:	781a      	ldrb	r2, [r3, #0]
 8003c38:	b102      	cbz	r2, 8003c3c <batKey1Handler+0x8>
		HAL_GPIO_WritePin(GPIOA, BAT_KEY_1_Pin, GPIO_PIN_SET);
 8003c3a:	2201      	movs	r2, #1
	} else if (batKey1State == 0) {
		HAL_GPIO_WritePin(GPIOA, BAT_KEY_1_Pin, GPIO_PIN_RESET);
 8003c3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c40:	4802      	ldr	r0, [pc, #8]	; (8003c4c <batKey1Handler+0x18>)
 8003c42:	f7fd be5d 	b.w	8001900 <HAL_GPIO_WritePin>
 8003c46:	bf00      	nop
 8003c48:	200006ec 	.word	0x200006ec
 8003c4c:	40020000 	.word	0x40020000

08003c50 <batKey2Handler>:
	}
}

void batKey2Handler()
{
	if(batKey2State == 1){
 8003c50:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <batKey2Handler+0x14>)
 8003c52:	781a      	ldrb	r2, [r3, #0]
 8003c54:	b102      	cbz	r2, 8003c58 <batKey2Handler+0x8>
		HAL_GPIO_WritePin(GPIOA, BAT_KEY_2_Pin, GPIO_PIN_SET);
 8003c56:	2201      	movs	r2, #1
	} else if (batKey2State == 0) {
		HAL_GPIO_WritePin(GPIOA, BAT_KEY_2_Pin, GPIO_PIN_RESET);
 8003c58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c5c:	4802      	ldr	r0, [pc, #8]	; (8003c68 <batKey2Handler+0x18>)
 8003c5e:	f7fd be4f 	b.w	8001900 <HAL_GPIO_WritePin>
 8003c62:	bf00      	nop
 8003c64:	200003d8 	.word	0x200003d8
 8003c68:	40020000 	.word	0x40020000

08003c6c <chrKey1Handler>:
	}
}

void chrKey1Handler()
{
	if(chrKey1State == 1){
 8003c6c:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <chrKey1Handler+0x14>)
 8003c6e:	781a      	ldrb	r2, [r3, #0]
 8003c70:	b102      	cbz	r2, 8003c74 <chrKey1Handler+0x8>
		HAL_GPIO_WritePin(GPIOA, CHR_KEY_1_Pin, GPIO_PIN_SET);
 8003c72:	2201      	movs	r2, #1
	} else if (chrKey1State == 0) {
		HAL_GPIO_WritePin(GPIOA, CHR_KEY_1_Pin, GPIO_PIN_RESET);
 8003c74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c78:	4802      	ldr	r0, [pc, #8]	; (8003c84 <chrKey1Handler+0x18>)
 8003c7a:	f7fd be41 	b.w	8001900 <HAL_GPIO_WritePin>
 8003c7e:	bf00      	nop
 8003c80:	2000046c 	.word	0x2000046c
 8003c84:	40020000 	.word	0x40020000

08003c88 <chrKey2Handler>:
	}
}

void chrKey2Handler()
{
	if(chrKey2State == 1){
 8003c88:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <chrKey2Handler+0x14>)
 8003c8a:	781a      	ldrb	r2, [r3, #0]
 8003c8c:	b102      	cbz	r2, 8003c90 <chrKey2Handler+0x8>
		HAL_GPIO_WritePin(GPIOA, CHR_KEY_2_Pin, GPIO_PIN_SET);
 8003c8e:	2201      	movs	r2, #1
	} else if (chrKey2State == 0) {
		HAL_GPIO_WritePin(GPIOA, CHR_KEY_2_Pin, GPIO_PIN_RESET);
 8003c90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c94:	4802      	ldr	r0, [pc, #8]	; (8003ca0 <chrKey2Handler+0x18>)
 8003c96:	f7fd be33 	b.w	8001900 <HAL_GPIO_WritePin>
 8003c9a:	bf00      	nop
 8003c9c:	200003f2 	.word	0x200003f2
 8003ca0:	40020000 	.word	0x40020000

08003ca4 <key3VBusHandler>:
	}
}

void key3VBusHandler()
{
	if(key3VBusState == 1){
 8003ca4:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <key3VBusHandler+0x14>)
 8003ca6:	781a      	ldrb	r2, [r3, #0]
 8003ca8:	b102      	cbz	r2, 8003cac <key3VBusHandler+0x8>
		HAL_GPIO_WritePin(GPIOA, KEY_3V_BUS_Pin, GPIO_PIN_SET);
 8003caa:	2201      	movs	r2, #1
	} else if (key3VBusState == 0) {
		HAL_GPIO_WritePin(GPIOA, KEY_3V_BUS_Pin, GPIO_PIN_RESET);
 8003cac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cb0:	4802      	ldr	r0, [pc, #8]	; (8003cbc <key3VBusHandler+0x18>)
 8003cb2:	f7fd be25 	b.w	8001900 <HAL_GPIO_WritePin>
 8003cb6:	bf00      	nop
 8003cb8:	200003f3 	.word	0x200003f3
 8003cbc:	40020000 	.word	0x40020000

08003cc0 <adcRead>:
	}
}

void adcRead()
{
 8003cc0:	b570      	push	{r4, r5, r6, lr}
	HAL_ADC_Stop_DMA(&hadc);
 8003cc2:	4d0f      	ldr	r5, [pc, #60]	; (8003d00 <adcRead+0x40>)

	ADC11 = ADC_value[0];
 8003cc4:	4c0f      	ldr	r4, [pc, #60]	; (8003d04 <adcRead+0x44>)
	HAL_ADC_Stop_DMA(&hadc);
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	f7fd fbe0 	bl	800148c <HAL_ADC_Stop_DMA>
	ADC11 = ADC_value[0];
 8003ccc:	8820      	ldrh	r0, [r4, #0]
 8003cce:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <adcRead+0x48>)
	ADC12 = ADC_value[1];
 8003cd0:	4e0e      	ldr	r6, [pc, #56]	; (8003d0c <adcRead+0x4c>)
	ADC11 = ADC_value[0];
 8003cd2:	8018      	strh	r0, [r3, #0]
	ADC12 = ADC_value[1];
 8003cd4:	8863      	ldrh	r3, [r4, #2]

	filter_11 = filter_sred(ADC11, buf_11, &F11);
 8003cd6:	4a0e      	ldr	r2, [pc, #56]	; (8003d10 <adcRead+0x50>)
 8003cd8:	490e      	ldr	r1, [pc, #56]	; (8003d14 <adcRead+0x54>)
	ADC12 = ADC_value[1];
 8003cda:	8033      	strh	r3, [r6, #0]
	filter_11 = filter_sred(ADC11, buf_11, &F11);
 8003cdc:	f7ff fde4 	bl	80038a8 <filter_sred>
 8003ce0:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <adcRead+0x58>)
	filter_12 = filter_sred(ADC12, buf_12, &F12);
 8003ce2:	4a0e      	ldr	r2, [pc, #56]	; (8003d1c <adcRead+0x5c>)
	filter_11 = filter_sred(ADC11, buf_11, &F11);
 8003ce4:	8018      	strh	r0, [r3, #0]
	filter_12 = filter_sred(ADC12, buf_12, &F12);
 8003ce6:	490e      	ldr	r1, [pc, #56]	; (8003d20 <adcRead+0x60>)
 8003ce8:	8830      	ldrh	r0, [r6, #0]
 8003cea:	f7ff fddd 	bl	80038a8 <filter_sred>
 8003cee:	4b0d      	ldr	r3, [pc, #52]	; (8003d24 <adcRead+0x64>)

	HAL_ADC_Start_DMA(&hadc, (uint32_t *)&ADC_value, 2);
 8003cf0:	4621      	mov	r1, r4
	filter_12 = filter_sred(ADC12, buf_12, &F12);
 8003cf2:	8018      	strh	r0, [r3, #0]
	HAL_ADC_Start_DMA(&hadc, (uint32_t *)&ADC_value, 2);
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	4628      	mov	r0, r5
}
 8003cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_ADC_Start_DMA(&hadc, (uint32_t *)&ADC_value, 2);
 8003cfc:	f7fd bb44 	b.w	8001388 <HAL_ADC_Start_DMA>
 8003d00:	2000010c 	.word	0x2000010c
 8003d04:	200003f6 	.word	0x200003f6
 8003d08:	200006fc 	.word	0x200006fc
 8003d0c:	200003f0 	.word	0x200003f0
 8003d10:	2000070c 	.word	0x2000070c
 8003d14:	200001d4 	.word	0x200001d4
 8003d18:	200003de 	.word	0x200003de
 8003d1c:	200001d0 	.word	0x200001d0
 8003d20:	200004e0 	.word	0x200004e0
 8003d24:	20000710 	.word	0x20000710

08003d28 <readLs>:

void readLs()
{
 8003d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	troykaI2CHub_setBusChannel(0);
	BH1750_ReadLight(&ls_tl);
 8003d2c:	4c2f      	ldr	r4, [pc, #188]	; (8003dec <readLs+0xc4>)
	troykaI2CHub_setBusChannel(0);
 8003d2e:	2000      	movs	r0, #0
 8003d30:	f001 f8d2 	bl	8004ed8 <troykaI2CHub_setBusChannel>

	troykaI2CHub_setBusChannel(1);
	BH1750_ReadLight(&ls_tr);
 8003d34:	4d2e      	ldr	r5, [pc, #184]	; (8003df0 <readLs+0xc8>)
	BH1750_ReadLight(&ls_tl);
 8003d36:	4620      	mov	r0, r4
 8003d38:	f7ff fd5a 	bl	80037f0 <BH1750_ReadLight>
	troykaI2CHub_setBusChannel(1);
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	f001 f8cb 	bl	8004ed8 <troykaI2CHub_setBusChannel>

	troykaI2CHub_setBusChannel(3);
	BH1750_ReadLight(&ls_bl);
 8003d42:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8003e10 <readLs+0xe8>
	BH1750_ReadLight(&ls_tr);
 8003d46:	4628      	mov	r0, r5
 8003d48:	f7ff fd52 	bl	80037f0 <BH1750_ReadLight>
	troykaI2CHub_setBusChannel(3);
 8003d4c:	2003      	movs	r0, #3
 8003d4e:	f001 f8c3 	bl	8004ed8 <troykaI2CHub_setBusChannel>

	troykaI2CHub_setBusChannel(4);
	BH1750_ReadLight(&ls_br);
 8003d52:	4e28      	ldr	r6, [pc, #160]	; (8003df4 <readLs+0xcc>)
	BH1750_ReadLight(&ls_bl);
 8003d54:	4640      	mov	r0, r8
 8003d56:	f7ff fd4b 	bl	80037f0 <BH1750_ReadLight>
	troykaI2CHub_setBusChannel(4);
 8003d5a:	2004      	movs	r0, #4
 8003d5c:	f001 f8bc 	bl	8004ed8 <troykaI2CHub_setBusChannel>
	BH1750_ReadLight(&ls_br);
 8003d60:	4630      	mov	r0, r6
 8003d62:	f7ff fd45 	bl	80037f0 <BH1750_ReadLight>

	avt = (ls_tl + ls_tr)/2;
 8003d66:	6824      	ldr	r4, [r4, #0]
 8003d68:	682f      	ldr	r7, [r5, #0]
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	4639      	mov	r1, r7
 8003d6e:	f7fc fe67 	bl	8000a40 <__addsf3>
 8003d72:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003d76:	f7fc ff6b 	bl	8000c50 <__aeabi_fmul>
 8003d7a:	f7fd f8b9 	bl	8000ef0 <__aeabi_f2iz>
 8003d7e:	4b1e      	ldr	r3, [pc, #120]	; (8003df8 <readLs+0xd0>)
	avb = (ls_bl + ls_br)/2;
 8003d80:	f8d8 9000 	ldr.w	r9, [r8]
 8003d84:	f8d6 8000 	ldr.w	r8, [r6]
	avt = (ls_tl + ls_tr)/2;
 8003d88:	b205      	sxth	r5, r0
 8003d8a:	801d      	strh	r5, [r3, #0]
	avb = (ls_bl + ls_br)/2;
 8003d8c:	4641      	mov	r1, r8
 8003d8e:	4648      	mov	r0, r9
 8003d90:	f7fc fe56 	bl	8000a40 <__addsf3>
 8003d94:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003d98:	f7fc ff5a 	bl	8000c50 <__aeabi_fmul>
 8003d9c:	f7fd f8a8 	bl	8000ef0 <__aeabi_f2iz>
 8003da0:	4b16      	ldr	r3, [pc, #88]	; (8003dfc <readLs+0xd4>)
 8003da2:	b206      	sxth	r6, r0
 8003da4:	801e      	strh	r6, [r3, #0]
	avl = (ls_tl + ls_bl)/2;
 8003da6:	4649      	mov	r1, r9
 8003da8:	4620      	mov	r0, r4
 8003daa:	f7fc fe49 	bl	8000a40 <__addsf3>
 8003dae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003db2:	f7fc ff4d 	bl	8000c50 <__aeabi_fmul>
 8003db6:	f7fd f89b 	bl	8000ef0 <__aeabi_f2iz>
 8003dba:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <readLs+0xd8>)
 8003dbc:	b204      	sxth	r4, r0
 8003dbe:	801c      	strh	r4, [r3, #0]
	avr = (ls_tr + ls_br)/2;
 8003dc0:	4641      	mov	r1, r8
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	f7fc fe3c 	bl	8000a40 <__addsf3>
 8003dc8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003dcc:	f7fc ff40 	bl	8000c50 <__aeabi_fmul>
 8003dd0:	f7fd f88e 	bl	8000ef0 <__aeabi_f2iz>
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <readLs+0xdc>)
 8003dd6:	b200      	sxth	r0, r0
 8003dd8:	8018      	strh	r0, [r3, #0]

	dvert = avt - avb;
 8003dda:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <readLs+0xe0>)
 8003ddc:	1bad      	subs	r5, r5, r6
 8003dde:	801d      	strh	r5, [r3, #0]
	dhorz = avl - avr;
 8003de0:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <readLs+0xe4>)
 8003de2:	1a24      	subs	r4, r4, r0
 8003de4:	801c      	strh	r4, [r3, #0]
 8003de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dea:	bf00      	nop
 8003dec:	200003e0 	.word	0x200003e0
 8003df0:	200001c4 	.word	0x200001c4
 8003df4:	200006f0 	.word	0x200006f0
 8003df8:	2000046e 	.word	0x2000046e
 8003dfc:	200003dc 	.word	0x200003dc
 8003e00:	200003e4 	.word	0x200003e4
 8003e04:	200003da 	.word	0x200003da
 8003e08:	200001ca 	.word	0x200001ca
 8003e0c:	200006f4 	.word	0x200006f4
 8003e10:	200006f8 	.word	0x200006f8

08003e14 <sunTrackControl>:
	BH1750_Reset();
}

void sunTrackControl()
{
	if(sunTrackState == 1){
 8003e14:	4a24      	ldr	r2, [pc, #144]	; (8003ea8 <sunTrackControl+0x94>)
{
 8003e16:	b530      	push	{r4, r5, lr}
	if(sunTrackState == 1){
 8003e18:	7813      	ldrb	r3, [r2, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d042      	beq.n	8003ea4 <sunTrackControl+0x90>
		if(dvert > -SUN_ERROR_VERT && dvert < SUN_ERROR_VERT) {
 8003e1e:	4b23      	ldr	r3, [pc, #140]	; (8003eac <sunTrackControl+0x98>)
 8003e20:	f9b3 0000 	ldrsh.w	r0, [r3]
 8003e24:	b283      	uxth	r3, r0
 8003e26:	f103 014f 	add.w	r1, r3, #79	; 0x4f
 8003e2a:	b289      	uxth	r1, r1
 8003e2c:	299e      	cmp	r1, #158	; 0x9e
 8003e2e:	4920      	ldr	r1, [pc, #128]	; (8003eb0 <sunTrackControl+0x9c>)
 8003e30:	d806      	bhi.n	8003e40 <sunTrackControl+0x2c>
			motor3Cmd = stp;
 8003e32:	2402      	movs	r4, #2
 8003e34:	4d1f      	ldr	r5, [pc, #124]	; (8003eb4 <sunTrackControl+0xa0>)
 8003e36:	702c      	strb	r4, [r5, #0]
			motor4Cmd = stp;
 8003e38:	4d1f      	ldr	r5, [pc, #124]	; (8003eb8 <sunTrackControl+0xa4>)
 8003e3a:	702c      	strb	r4, [r5, #0]
			dvertCorrect = 1;
 8003e3c:	2401      	movs	r4, #1
 8003e3e:	700c      	strb	r4, [r1, #0]
		}
		if(dvert < -SUN_ERROR_VERT || dvert > SUN_ERROR_VERT){
 8003e40:	3350      	adds	r3, #80	; 0x50
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2ba0      	cmp	r3, #160	; 0xa0
 8003e46:	d907      	bls.n	8003e58 <sunTrackControl+0x44>
			dvertCorrect = 0;
 8003e48:	2300      	movs	r3, #0
			if(dvert > 0){
 8003e4a:	4298      	cmp	r0, r3
			dvertCorrect = 0;
 8003e4c:	700b      	strb	r3, [r1, #0]
 8003e4e:	4c19      	ldr	r4, [pc, #100]	; (8003eb4 <sunTrackControl+0xa0>)
 8003e50:	4819      	ldr	r0, [pc, #100]	; (8003eb8 <sunTrackControl+0xa4>)
			if(dvert > 0){
 8003e52:	dd23      	ble.n	8003e9c <sunTrackControl+0x88>
				motor3Cmd = cw;
 8003e54:	7023      	strb	r3, [r4, #0]
				motor4Cmd = cw;
 8003e56:	7003      	strb	r3, [r0, #0]
			if(dvert < 0){
				motor3Cmd = ccw;
				motor4Cmd = ccw;
			}
		}
		if(dhorz > -SUN_ERROR_HORZ && dhorz < SUN_ERROR_HORZ) {
 8003e58:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <sunTrackControl+0xa8>)
 8003e5a:	f9b3 4000 	ldrsh.w	r4, [r3]
 8003e5e:	b2a3      	uxth	r3, r4
 8003e60:	f103 0027 	add.w	r0, r3, #39	; 0x27
 8003e64:	b280      	uxth	r0, r0
 8003e66:	284e      	cmp	r0, #78	; 0x4e
 8003e68:	d805      	bhi.n	8003e76 <sunTrackControl+0x62>
			motor2Cmd = stp;
 8003e6a:	2502      	movs	r5, #2
 8003e6c:	4814      	ldr	r0, [pc, #80]	; (8003ec0 <sunTrackControl+0xac>)
 8003e6e:	7005      	strb	r5, [r0, #0]
			dhorzCorrect = 1;
 8003e70:	2501      	movs	r5, #1
 8003e72:	4814      	ldr	r0, [pc, #80]	; (8003ec4 <sunTrackControl+0xb0>)
 8003e74:	7005      	strb	r5, [r0, #0]
		}
		if(dhorz < -SUN_ERROR_HORZ || dhorz > SUN_ERROR_HORZ){
 8003e76:	3328      	adds	r3, #40	; 0x28
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b50      	cmp	r3, #80	; 0x50
 8003e7c:	d906      	bls.n	8003e8c <sunTrackControl+0x78>
			dhorzCorrect = 0;
 8003e7e:	2000      	movs	r0, #0
 8003e80:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <sunTrackControl+0xb0>)
			if (dhorz > 0) {
 8003e82:	4284      	cmp	r4, r0
			dhorzCorrect = 0;
 8003e84:	7018      	strb	r0, [r3, #0]
 8003e86:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <sunTrackControl+0xac>)
			if (dhorz > 0) {
 8003e88:	dd0a      	ble.n	8003ea0 <sunTrackControl+0x8c>
				motor2Cmd = cw;
 8003e8a:	7018      	strb	r0, [r3, #0]
			}
			if (dhorz < 0) {
				motor2Cmd = ccw;
			}
		}
		if (dvertCorrect == 1 && dhorzCorrect == 1){
 8003e8c:	780b      	ldrb	r3, [r1, #0]
 8003e8e:	b14b      	cbz	r3, 8003ea4 <sunTrackControl+0x90>
 8003e90:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <sunTrackControl+0xb0>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	b133      	cbz	r3, 8003ea4 <sunTrackControl+0x90>
			sunTrackState = 0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	7013      	strb	r3, [r2, #0]
		}
	}
}
 8003e9a:	bd30      	pop	{r4, r5, pc}
				motor3Cmd = ccw;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e7d9      	b.n	8003e54 <sunTrackControl+0x40>
				motor2Cmd = ccw;
 8003ea0:	2001      	movs	r0, #1
 8003ea2:	e7f2      	b.n	8003e8a <sunTrackControl+0x76>
 8003ea4:	bd30      	pop	{r4, r5, pc}
 8003ea6:	bf00      	nop
 8003ea8:	200004d4 	.word	0x200004d4
 8003eac:	200001ca 	.word	0x200001ca
 8003eb0:	200003d4 	.word	0x200003d4
 8003eb4:	20000006 	.word	0x20000006
 8003eb8:	20000007 	.word	0x20000007
 8003ebc:	200006f4 	.word	0x200006f4
 8003ec0:	20000005 	.word	0x20000005
 8003ec4:	200006e9 	.word	0x200006e9

08003ec8 <calculateVBat0>:


void calculateVBat0()
{
 8003ec8:	b538      	push	{r3, r4, r5, lr}
	double r_divider, r1, r2;
	r1 = 1880.0;
	r2 = 2070.0;
	r_divider = r2 / (r1 + r2);

	vBat0 = VREF / 4095.0 * filter_11;
 8003eca:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <calculateVBat0+0x78>)
 8003ecc:	8818      	ldrh	r0, [r3, #0]
 8003ece:	f7fc fab1 	bl	8000434 <__aeabi_i2d>
 8003ed2:	a315      	add	r3, pc, #84	; (adr r3, 8003f28 <calculateVBat0+0x60>)
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	f7fc fb12 	bl	8000500 <__aeabi_dmul>
	vBat0 = vBat0 / r_divider;
 8003edc:	a314      	add	r3, pc, #80	; (adr r3, 8003f30 <calculateVBat0+0x68>)
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	f7fc fc37 	bl	8000754 <__aeabi_ddiv>
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	460d      	mov	r5, r1
 8003eea:	4b16      	ldr	r3, [pc, #88]	; (8003f44 <calculateVBat0+0x7c>)
 8003eec:	e9c3 4500 	strd	r4, r5, [r3]

	if (vBat0 > 3.7f){
 8003ef0:	a311      	add	r3, pc, #68	; (adr r3, 8003f38 <calculateVBat0+0x70>)
 8003ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef6:	f7fc fd93 	bl	8000a20 <__aeabi_dcmpgt>
 8003efa:	b1a0      	cbz	r0, 8003f26 <calculateVBat0+0x5e>
		vDif0 = vBat0 - 3.7f;
 8003efc:	a30e      	add	r3, pc, #56	; (adr r3, 8003f38 <calculateVBat0+0x70>)
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	4620      	mov	r0, r4
 8003f04:	4629      	mov	r1, r5
 8003f06:	f7fc f947 	bl	8000198 <__aeabi_dsub>
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <calculateVBat0+0x80>)
		vBat0Percent = 100 * vDif0 / 0.5;
 8003f0c:	2200      	movs	r2, #0
		vDif0 = vBat0 - 3.7f;
 8003f0e:	e9c3 0100 	strd	r0, r1, [r3]
		vBat0Percent = 100 * vDif0 / 0.5;
 8003f12:	4b0e      	ldr	r3, [pc, #56]	; (8003f4c <calculateVBat0+0x84>)
 8003f14:	f7fc faf4 	bl	8000500 <__aeabi_dmul>
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	f7fc f93e 	bl	800019c <__adddf3>
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <calculateVBat0+0x88>)
 8003f22:	e9c3 0100 	strd	r0, r1, [r3]
 8003f26:	bd38      	pop	{r3, r4, r5, pc}
 8003f28:	b90b90b9 	.word	0xb90b90b9
 8003f2c:	3f4a5390 	.word	0x3f4a5390
 8003f30:	d539ae57 	.word	0xd539ae57
 8003f34:	3fe0c505 	.word	0x3fe0c505
 8003f38:	a0000000 	.word	0xa0000000
 8003f3c:	400d9999 	.word	0x400d9999
 8003f40:	200003de 	.word	0x200003de
 8003f44:	200006e0 	.word	0x200006e0
 8003f48:	200003e8 	.word	0x200003e8
 8003f4c:	40590000 	.word	0x40590000
 8003f50:	20000400 	.word	0x20000400
 8003f54:	00000000 	.word	0x00000000

08003f58 <calculateVBat1>:
	}
}

void calculateVBat1()
{
 8003f58:	b538      	push	{r3, r4, r5, lr}
	double r_divider, r1, r2;
	r1 = 1890.0;
	r2 = 2090.0;
	r_divider = r2 / (r1 + r2);

	vBat1 = VREF / 4095.0 * filter_12;
 8003f5a:	4b1d      	ldr	r3, [pc, #116]	; (8003fd0 <calculateVBat1+0x78>)
 8003f5c:	8818      	ldrh	r0, [r3, #0]
 8003f5e:	f7fc fa69 	bl	8000434 <__aeabi_i2d>
 8003f62:	a315      	add	r3, pc, #84	; (adr r3, 8003fb8 <calculateVBat1+0x60>)
 8003f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f68:	f7fc faca 	bl	8000500 <__aeabi_dmul>
	vBat1 = vBat1 / r_divider;
 8003f6c:	a314      	add	r3, pc, #80	; (adr r3, 8003fc0 <calculateVBat1+0x68>)
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	f7fc fbef 	bl	8000754 <__aeabi_ddiv>
 8003f76:	4604      	mov	r4, r0
 8003f78:	460d      	mov	r5, r1
 8003f7a:	4b16      	ldr	r3, [pc, #88]	; (8003fd4 <calculateVBat1+0x7c>)
 8003f7c:	e9c3 4500 	strd	r4, r5, [r3]

	if (vBat1 > 3.7f){
 8003f80:	a311      	add	r3, pc, #68	; (adr r3, 8003fc8 <calculateVBat1+0x70>)
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	f7fc fd4b 	bl	8000a20 <__aeabi_dcmpgt>
 8003f8a:	b1a0      	cbz	r0, 8003fb6 <calculateVBat1+0x5e>
		vDif1 = vBat1 - 3.7f;
 8003f8c:	a30e      	add	r3, pc, #56	; (adr r3, 8003fc8 <calculateVBat1+0x70>)
 8003f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f92:	4620      	mov	r0, r4
 8003f94:	4629      	mov	r1, r5
 8003f96:	f7fc f8ff 	bl	8000198 <__aeabi_dsub>
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <calculateVBat1+0x80>)
		vBat1Percent = 100 * vDif1 / 0.5;
 8003f9c:	2200      	movs	r2, #0
		vDif1 = vBat1 - 3.7f;
 8003f9e:	e9c3 0100 	strd	r0, r1, [r3]
		vBat1Percent = 100 * vDif1 / 0.5;
 8003fa2:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <calculateVBat1+0x84>)
 8003fa4:	f7fc faac 	bl	8000500 <__aeabi_dmul>
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4602      	mov	r2, r0
 8003fac:	f7fc f8f6 	bl	800019c <__adddf3>
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <calculateVBat1+0x88>)
 8003fb2:	e9c3 0100 	strd	r0, r1, [r3]
 8003fb6:	bd38      	pop	{r3, r4, r5, pc}
 8003fb8:	b90b90b9 	.word	0xb90b90b9
 8003fbc:	3f4a5390 	.word	0x3f4a5390
 8003fc0:	42e4fc24 	.word	0x42e4fc24
 8003fc4:	3fe0cdd4 	.word	0x3fe0cdd4
 8003fc8:	a0000000 	.word	0xa0000000
 8003fcc:	400d9999 	.word	0x400d9999
 8003fd0:	20000710 	.word	0x20000710
 8003fd4:	200004d8 	.word	0x200004d8
 8003fd8:	20000718 	.word	0x20000718
 8003fdc:	40590000 	.word	0x40590000
 8003fe0:	20000700 	.word	0x20000700

08003fe4 <I2C_Scan>:
	}
}

void I2C_Scan()
{
 8003fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fe6:	b097      	sub	sp, #92	; 0x5c
    char info[] = "SCANNING I2C BUS\r\n";
 8003fe8:	aa01      	add	r2, sp, #4
 8003fea:	4615      	mov	r5, r2
 8003fec:	4b20      	ldr	r3, [pc, #128]	; (8004070 <I2C_Scan+0x8c>)
 8003fee:	f103 0610 	add.w	r6, r3, #16
 8003ff2:	4614      	mov	r4, r2
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	6859      	ldr	r1, [r3, #4]
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	c403      	stmia	r4!, {r0, r1}
 8003ffc:	42b3      	cmp	r3, r6
 8003ffe:	4622      	mov	r2, r4
 8004000:	d1f7      	bne.n	8003ff2 <I2C_Scan+0xe>
 8004002:	8819      	ldrh	r1, [r3, #0]
 8004004:	789b      	ldrb	r3, [r3, #2]
 8004006:	8021      	strh	r1, [r4, #0]
 8004008:	70a3      	strb	r3, [r4, #2]
    HAL_UART_Transmit(&huart2, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 800400a:	4628      	mov	r0, r5
 800400c:	f7fc f8b8 	bl	8000180 <strlen>
 8004010:	4629      	mov	r1, r5
 8004012:	b282      	uxth	r2, r0
 8004014:	f04f 33ff 	mov.w	r3, #4294967295
 8004018:	4816      	ldr	r0, [pc, #88]	; (8004074 <I2C_Scan+0x90>)
 800401a:	f7ff f99d 	bl	8003358 <HAL_UART_Transmit>
 800401e:	2400      	movs	r4, #0

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8004020:	4d15      	ldr	r5, [pc, #84]	; (8004078 <I2C_Scan+0x94>)
        if(res == HAL_OK) {
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X ", i);
 8004022:	4e16      	ldr	r6, [pc, #88]	; (800407c <I2C_Scan+0x98>)
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8004024:	4f13      	ldr	r7, [pc, #76]	; (8004074 <I2C_Scan+0x90>)
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8004026:	0061      	lsls	r1, r4, #1
 8004028:	b289      	uxth	r1, r1
 800402a:	230a      	movs	r3, #10
 800402c:	2201      	movs	r2, #1
 800402e:	4628      	mov	r0, r5
 8004030:	f7fe f844 	bl	80020bc <HAL_I2C_IsDeviceReady>
        if(res == HAL_OK) {
 8004034:	b978      	cbnz	r0, 8004056 <I2C_Scan+0x72>
            snprintf(msg, sizeof(msg), "0x%02X ", i);
 8004036:	4623      	mov	r3, r4
 8004038:	4632      	mov	r2, r6
 800403a:	2140      	movs	r1, #64	; 0x40
 800403c:	a806      	add	r0, sp, #24
 800403e:	f001 f933 	bl	80052a8 <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8004042:	a806      	add	r0, sp, #24
 8004044:	f7fc f89c 	bl	8000180 <strlen>
 8004048:	f04f 33ff 	mov.w	r3, #4294967295
 800404c:	b282      	uxth	r2, r0
 800404e:	a906      	add	r1, sp, #24
 8004050:	4638      	mov	r0, r7
 8004052:	f7ff f981 	bl	8003358 <HAL_UART_Transmit>
 8004056:	3401      	adds	r4, #1
    for(uint16_t i = 0; i < 128; i++) {
 8004058:	2c80      	cmp	r4, #128	; 0x80
 800405a:	d1e4      	bne.n	8004026 <I2C_Scan+0x42>
        }
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 800405c:	f04f 33ff 	mov.w	r3, #4294967295
 8004060:	2202      	movs	r2, #2
 8004062:	4907      	ldr	r1, [pc, #28]	; (8004080 <I2C_Scan+0x9c>)
 8004064:	4803      	ldr	r0, [pc, #12]	; (8004074 <I2C_Scan+0x90>)
 8004066:	f7ff f977 	bl	8003358 <HAL_UART_Transmit>
}
 800406a:	b017      	add	sp, #92	; 0x5c
 800406c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800406e:	bf00      	nop
 8004070:	080059da 	.word	0x080059da
 8004074:	200007f8 	.word	0x200007f8
 8004078:	2000016c 	.word	0x2000016c
 800407c:	080059d2 	.word	0x080059d2
 8004080:	08005a28 	.word	0x08005a28

08004084 <motor0PositionControl>:

void motor0PositionControl()
{
	if (farms == open && farm0State == middle) {
 8004084:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <motor0PositionControl+0x3c>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	b953      	cbnz	r3, 80040a0 <motor0PositionControl+0x1c>
 800408a:	4a0e      	ldr	r2, [pc, #56]	; (80040c4 <motor0PositionControl+0x40>)
 800408c:	7812      	ldrb	r2, [r2, #0]
 800408e:	2a02      	cmp	r2, #2
 8004090:	d111      	bne.n	80040b6 <motor0PositionControl+0x32>
	}
	if (farms == close && farm0State == middle) {
		motor0Cmd = gobottom;
	}
	if (farms == close && farm0State == top) {
		motor0Cmd = gobottom;
 8004092:	4a0d      	ldr	r2, [pc, #52]	; (80040c8 <motor0PositionControl+0x44>)
 8004094:	7013      	strb	r3, [r2, #0]
 8004096:	4770      	bx	lr
		motor0Cmd = stop;
 8004098:	2202      	movs	r2, #2
 800409a:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <motor0PositionControl+0x44>)
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	4770      	bx	lr
	if (farms == close && farm0State == middle) {
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d107      	bne.n	80040b4 <motor0PositionControl+0x30>
 80040a4:	4a07      	ldr	r2, [pc, #28]	; (80040c4 <motor0PositionControl+0x40>)
 80040a6:	7812      	ldrb	r2, [r2, #0]
 80040a8:	2a02      	cmp	r2, #2
 80040aa:	d0f2      	beq.n	8004092 <motor0PositionControl+0xe>
	if (farms == close && farm0State == top) {
 80040ac:	2a00      	cmp	r2, #0
 80040ae:	d0f0      	beq.n	8004092 <motor0PositionControl+0xe>
	}
	if (farms == close && farm0State == bottom) {
 80040b0:	2a01      	cmp	r2, #1
 80040b2:	d0f1      	beq.n	8004098 <motor0PositionControl+0x14>
 80040b4:	4770      	bx	lr
	if (farms == open && farm0State == bottom) {
 80040b6:	2a01      	cmp	r2, #1
 80040b8:	d0eb      	beq.n	8004092 <motor0PositionControl+0xe>
	if (farms == open && farm0State == top) {
 80040ba:	2a00      	cmp	r2, #0
 80040bc:	d0ec      	beq.n	8004098 <motor0PositionControl+0x14>
 80040be:	4770      	bx	lr
 80040c0:	20000002 	.word	0x20000002
 80040c4:	20000000 	.word	0x20000000
 80040c8:	20000003 	.word	0x20000003

080040cc <motor1PositionControl>:
	}
}

void motor1PositionControl()
{
	if (farms == open && farm1State == middle) {
 80040cc:	4b0e      	ldr	r3, [pc, #56]	; (8004108 <motor1PositionControl+0x3c>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	b953      	cbnz	r3, 80040e8 <motor1PositionControl+0x1c>
 80040d2:	4a0e      	ldr	r2, [pc, #56]	; (800410c <motor1PositionControl+0x40>)
 80040d4:	7812      	ldrb	r2, [r2, #0]
 80040d6:	2a02      	cmp	r2, #2
 80040d8:	d111      	bne.n	80040fe <motor1PositionControl+0x32>
	}
	if (farms == close && farm1State == middle) {
		motor1Cmd = gobottom;
	}
	if (farms == close && farm1State == top) {
		motor1Cmd = gobottom;
 80040da:	4a0d      	ldr	r2, [pc, #52]	; (8004110 <motor1PositionControl+0x44>)
 80040dc:	7013      	strb	r3, [r2, #0]
 80040de:	4770      	bx	lr
		motor1Cmd = stop;
 80040e0:	2202      	movs	r2, #2
 80040e2:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <motor1PositionControl+0x44>)
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	4770      	bx	lr
	if (farms == close && farm1State == middle) {
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d107      	bne.n	80040fc <motor1PositionControl+0x30>
 80040ec:	4a07      	ldr	r2, [pc, #28]	; (800410c <motor1PositionControl+0x40>)
 80040ee:	7812      	ldrb	r2, [r2, #0]
 80040f0:	2a02      	cmp	r2, #2
 80040f2:	d0f2      	beq.n	80040da <motor1PositionControl+0xe>
	if (farms == close && farm1State == top) {
 80040f4:	2a00      	cmp	r2, #0
 80040f6:	d0f0      	beq.n	80040da <motor1PositionControl+0xe>
	}
	if (farms == close && farm1State == bottom) {
 80040f8:	2a01      	cmp	r2, #1
 80040fa:	d0f1      	beq.n	80040e0 <motor1PositionControl+0x14>
 80040fc:	4770      	bx	lr
	if (farms == open && farm1State == bottom) {
 80040fe:	2a01      	cmp	r2, #1
 8004100:	d0eb      	beq.n	80040da <motor1PositionControl+0xe>
	if (farms == open && farm1State == top) {
 8004102:	2a00      	cmp	r2, #0
 8004104:	d0ec      	beq.n	80040e0 <motor1PositionControl+0x14>
 8004106:	4770      	bx	lr
 8004108:	20000002 	.word	0x20000002
 800410c:	20000001 	.word	0x20000001
 8004110:	20000004 	.word	0x20000004

08004114 <motor0Handler>:
		motor1Cmd = stop;
	}
}

void motor0Handler()
{
 8004114:	b538      	push	{r3, r4, r5, lr}
	if (motor0Cmd == stop) {
 8004116:	4c13      	ldr	r4, [pc, #76]	; (8004164 <motor0Handler+0x50>)
 8004118:	7823      	ldrb	r3, [r4, #0]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d104      	bne.n	8004128 <motor0Handler+0x14>
		HAL_GPIO_WritePin(GPIOB, MOTOR_0_EN_Pin, GPIO_PIN_RESET);
 800411e:	2200      	movs	r2, #0
 8004120:	2104      	movs	r1, #4
 8004122:	4811      	ldr	r0, [pc, #68]	; (8004168 <motor0Handler+0x54>)
 8004124:	f7fd fbec 	bl	8001900 <HAL_GPIO_WritePin>
	}

	if (motor0Cmd == gotop) {
 8004128:	7825      	ldrb	r5, [r4, #0]
 800412a:	b955      	cbnz	r5, 8004142 <motor0Handler+0x2e>
		HAL_GPIO_WritePin(GPIOB, MOTOR_0_EN_Pin,GPIO_PIN_SET);
 800412c:	2201      	movs	r2, #1
 800412e:	2104      	movs	r1, #4
 8004130:	480d      	ldr	r0, [pc, #52]	; (8004168 <motor0Handler+0x54>)
 8004132:	f7fd fbe5 	bl	8001900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, MOTOR_0_D_Pin, GPIO_PIN_RESET);
 8004136:	462a      	mov	r2, r5
 8004138:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800413c:	480a      	ldr	r0, [pc, #40]	; (8004168 <motor0Handler+0x54>)
 800413e:	f7fd fbdf 	bl	8001900 <HAL_GPIO_WritePin>
	}

	if (motor0Cmd == gobottom) {
 8004142:	7824      	ldrb	r4, [r4, #0]
 8004144:	2c01      	cmp	r4, #1
 8004146:	d10c      	bne.n	8004162 <motor0Handler+0x4e>
		HAL_GPIO_WritePin(GPIOB, MOTOR_0_EN_Pin,GPIO_PIN_SET);
 8004148:	4622      	mov	r2, r4
 800414a:	2104      	movs	r1, #4
 800414c:	4806      	ldr	r0, [pc, #24]	; (8004168 <motor0Handler+0x54>)
 800414e:	f7fd fbd7 	bl	8001900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, MOTOR_0_D_Pin, GPIO_PIN_SET);
 8004152:	4622      	mov	r2, r4
	}
}
 8004154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOB, MOTOR_0_D_Pin, GPIO_PIN_SET);
 8004158:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800415c:	4802      	ldr	r0, [pc, #8]	; (8004168 <motor0Handler+0x54>)
 800415e:	f7fd bbcf 	b.w	8001900 <HAL_GPIO_WritePin>
 8004162:	bd38      	pop	{r3, r4, r5, pc}
 8004164:	20000003 	.word	0x20000003
 8004168:	40020400 	.word	0x40020400

0800416c <motor1Handler>:

void motor1Handler()
{
 800416c:	b538      	push	{r3, r4, r5, lr}
	if (motor1Cmd == stop) {
 800416e:	4c12      	ldr	r4, [pc, #72]	; (80041b8 <motor1Handler+0x4c>)
 8004170:	7823      	ldrb	r3, [r4, #0]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d104      	bne.n	8004180 <motor1Handler+0x14>
		HAL_GPIO_WritePin(GPIOB, MOTOR_1_EN_Pin, GPIO_PIN_RESET);
 8004176:	2200      	movs	r2, #0
 8004178:	2101      	movs	r1, #1
 800417a:	4810      	ldr	r0, [pc, #64]	; (80041bc <motor1Handler+0x50>)
 800417c:	f7fd fbc0 	bl	8001900 <HAL_GPIO_WritePin>
	}

	if (motor1Cmd == gotop) {
 8004180:	7825      	ldrb	r5, [r4, #0]
 8004182:	b94d      	cbnz	r5, 8004198 <motor1Handler+0x2c>
		HAL_GPIO_WritePin(GPIOB, MOTOR_1_EN_Pin,GPIO_PIN_SET);
 8004184:	2201      	movs	r2, #1
 8004186:	480d      	ldr	r0, [pc, #52]	; (80041bc <motor1Handler+0x50>)
 8004188:	4611      	mov	r1, r2
 800418a:	f7fd fbb9 	bl	8001900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, MOTOR_1_D_Pin, GPIO_PIN_RESET);
 800418e:	462a      	mov	r2, r5
 8004190:	2102      	movs	r1, #2
 8004192:	480a      	ldr	r0, [pc, #40]	; (80041bc <motor1Handler+0x50>)
 8004194:	f7fd fbb4 	bl	8001900 <HAL_GPIO_WritePin>
	}

	if (motor1Cmd == gobottom) {
 8004198:	7824      	ldrb	r4, [r4, #0]
 800419a:	2c01      	cmp	r4, #1
 800419c:	d10b      	bne.n	80041b6 <motor1Handler+0x4a>
		HAL_GPIO_WritePin(GPIOB, MOTOR_1_EN_Pin,GPIO_PIN_SET);
 800419e:	4622      	mov	r2, r4
 80041a0:	4621      	mov	r1, r4
 80041a2:	4806      	ldr	r0, [pc, #24]	; (80041bc <motor1Handler+0x50>)
 80041a4:	f7fd fbac 	bl	8001900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, MOTOR_1_D_Pin, GPIO_PIN_SET);
 80041a8:	4622      	mov	r2, r4
	}
}
 80041aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOB, MOTOR_1_D_Pin, GPIO_PIN_SET);
 80041ae:	2102      	movs	r1, #2
 80041b0:	4802      	ldr	r0, [pc, #8]	; (80041bc <motor1Handler+0x50>)
 80041b2:	f7fd bba5 	b.w	8001900 <HAL_GPIO_WritePin>
 80041b6:	bd38      	pop	{r3, r4, r5, pc}
 80041b8:	20000004 	.word	0x20000004
 80041bc:	40020400 	.word	0x40020400

080041c0 <motor2Handler>:

void motor2Handler()
{
 80041c0:	b538      	push	{r3, r4, r5, lr}
	if (motor2Cmd == stp) {
 80041c2:	4c14      	ldr	r4, [pc, #80]	; (8004214 <motor2Handler+0x54>)
 80041c4:	7823      	ldrb	r3, [r4, #0]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d105      	bne.n	80041d6 <motor2Handler+0x16>
		HAL_GPIO_WritePin(GPIOC, MOTOR_2_EN_Pin, GPIO_PIN_RESET);
 80041ca:	2200      	movs	r2, #0
 80041cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041d0:	4811      	ldr	r0, [pc, #68]	; (8004218 <motor2Handler+0x58>)
 80041d2:	f7fd fb95 	bl	8001900 <HAL_GPIO_WritePin>
	}

	if (motor2Cmd == cw) {
 80041d6:	7825      	ldrb	r5, [r4, #0]
 80041d8:	b955      	cbnz	r5, 80041f0 <motor2Handler+0x30>
		HAL_GPIO_WritePin(GPIOC, MOTOR_2_EN_Pin,GPIO_PIN_SET);
 80041da:	2201      	movs	r2, #1
 80041dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041e0:	480d      	ldr	r0, [pc, #52]	; (8004218 <motor2Handler+0x58>)
 80041e2:	f7fd fb8d 	bl	8001900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, MOTOR_2_D_Pin, GPIO_PIN_RESET);
 80041e6:	462a      	mov	r2, r5
 80041e8:	2180      	movs	r1, #128	; 0x80
 80041ea:	480b      	ldr	r0, [pc, #44]	; (8004218 <motor2Handler+0x58>)
 80041ec:	f7fd fb88 	bl	8001900 <HAL_GPIO_WritePin>
	}

	if (motor2Cmd == ccw) {
 80041f0:	7824      	ldrb	r4, [r4, #0]
 80041f2:	2c01      	cmp	r4, #1
 80041f4:	d10c      	bne.n	8004210 <motor2Handler+0x50>
		HAL_GPIO_WritePin(GPIOC, MOTOR_2_EN_Pin,GPIO_PIN_SET);
 80041f6:	4622      	mov	r2, r4
 80041f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041fc:	4806      	ldr	r0, [pc, #24]	; (8004218 <motor2Handler+0x58>)
 80041fe:	f7fd fb7f 	bl	8001900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, MOTOR_2_D_Pin, GPIO_PIN_SET);
 8004202:	4622      	mov	r2, r4
	}
}
 8004204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOC, MOTOR_2_D_Pin, GPIO_PIN_SET);
 8004208:	2180      	movs	r1, #128	; 0x80
 800420a:	4803      	ldr	r0, [pc, #12]	; (8004218 <motor2Handler+0x58>)
 800420c:	f7fd bb78 	b.w	8001900 <HAL_GPIO_WritePin>
 8004210:	bd38      	pop	{r3, r4, r5, pc}
 8004212:	bf00      	nop
 8004214:	20000005 	.word	0x20000005
 8004218:	40020800 	.word	0x40020800

0800421c <motor3Handler>:

void motor3Handler()
{
 800421c:	b538      	push	{r3, r4, r5, lr}
	if (motor3Cmd == stp) {
 800421e:	4c13      	ldr	r4, [pc, #76]	; (800426c <motor3Handler+0x50>)
 8004220:	7823      	ldrb	r3, [r4, #0]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d104      	bne.n	8004230 <motor3Handler+0x14>
		HAL_GPIO_WritePin(GPIOC, MOTOR_3_EN_Pin, GPIO_PIN_RESET);
 8004226:	2200      	movs	r2, #0
 8004228:	2140      	movs	r1, #64	; 0x40
 800422a:	4811      	ldr	r0, [pc, #68]	; (8004270 <motor3Handler+0x54>)
 800422c:	f7fd fb68 	bl	8001900 <HAL_GPIO_WritePin>
	}

	if (motor3Cmd == cw) {
 8004230:	7825      	ldrb	r5, [r4, #0]
 8004232:	b955      	cbnz	r5, 800424a <motor3Handler+0x2e>
		HAL_GPIO_WritePin(GPIOC, MOTOR_3_EN_Pin,GPIO_PIN_SET);
 8004234:	2201      	movs	r2, #1
 8004236:	2140      	movs	r1, #64	; 0x40
 8004238:	480d      	ldr	r0, [pc, #52]	; (8004270 <motor3Handler+0x54>)
 800423a:	f7fd fb61 	bl	8001900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, MOTOR_3_D_Pin, GPIO_PIN_RESET);
 800423e:	462a      	mov	r2, r5
 8004240:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004244:	480b      	ldr	r0, [pc, #44]	; (8004274 <motor3Handler+0x58>)
 8004246:	f7fd fb5b 	bl	8001900 <HAL_GPIO_WritePin>
	}

	if (motor3Cmd == ccw) {
 800424a:	7824      	ldrb	r4, [r4, #0]
 800424c:	2c01      	cmp	r4, #1
 800424e:	d10c      	bne.n	800426a <motor3Handler+0x4e>
		HAL_GPIO_WritePin(GPIOC, MOTOR_3_EN_Pin,GPIO_PIN_SET);
 8004250:	4622      	mov	r2, r4
 8004252:	2140      	movs	r1, #64	; 0x40
 8004254:	4806      	ldr	r0, [pc, #24]	; (8004270 <motor3Handler+0x54>)
 8004256:	f7fd fb53 	bl	8001900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, MOTOR_3_D_Pin, GPIO_PIN_SET);
 800425a:	4622      	mov	r2, r4
	}
}
 800425c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOB, MOTOR_3_D_Pin, GPIO_PIN_SET);
 8004260:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004264:	4803      	ldr	r0, [pc, #12]	; (8004274 <motor3Handler+0x58>)
 8004266:	f7fd bb4b 	b.w	8001900 <HAL_GPIO_WritePin>
 800426a:	bd38      	pop	{r3, r4, r5, pc}
 800426c:	20000006 	.word	0x20000006
 8004270:	40020800 	.word	0x40020800
 8004274:	40020400 	.word	0x40020400

08004278 <motor4Handler>:

void motor4Handler()
{
 8004278:	b538      	push	{r3, r4, r5, lr}
	if (motor4Cmd == stp) {
 800427a:	4c15      	ldr	r4, [pc, #84]	; (80042d0 <motor4Handler+0x58>)
 800427c:	7823      	ldrb	r3, [r4, #0]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d105      	bne.n	800428e <motor4Handler+0x16>
		HAL_GPIO_WritePin(GPIOB, MOTOR_4_EN_Pin, GPIO_PIN_RESET);
 8004282:	2200      	movs	r2, #0
 8004284:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004288:	4812      	ldr	r0, [pc, #72]	; (80042d4 <motor4Handler+0x5c>)
 800428a:	f7fd fb39 	bl	8001900 <HAL_GPIO_WritePin>
	}

	if (motor4Cmd == cw) {
 800428e:	7825      	ldrb	r5, [r4, #0]
 8004290:	b95d      	cbnz	r5, 80042aa <motor4Handler+0x32>
		HAL_GPIO_WritePin(GPIOB, MOTOR_4_EN_Pin,GPIO_PIN_SET);
 8004292:	2201      	movs	r2, #1
 8004294:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004298:	480e      	ldr	r0, [pc, #56]	; (80042d4 <motor4Handler+0x5c>)
 800429a:	f7fd fb31 	bl	8001900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, MOTOR_4_D_Pin, GPIO_PIN_RESET);
 800429e:	462a      	mov	r2, r5
 80042a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042a4:	480b      	ldr	r0, [pc, #44]	; (80042d4 <motor4Handler+0x5c>)
 80042a6:	f7fd fb2b 	bl	8001900 <HAL_GPIO_WritePin>
	}

	if (motor4Cmd == ccw) {
 80042aa:	7824      	ldrb	r4, [r4, #0]
 80042ac:	2c01      	cmp	r4, #1
 80042ae:	d10d      	bne.n	80042cc <motor4Handler+0x54>
		HAL_GPIO_WritePin(GPIOB, MOTOR_4_EN_Pin,GPIO_PIN_SET);
 80042b0:	4622      	mov	r2, r4
 80042b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80042b6:	4807      	ldr	r0, [pc, #28]	; (80042d4 <motor4Handler+0x5c>)
 80042b8:	f7fd fb22 	bl	8001900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, MOTOR_4_D_Pin, GPIO_PIN_SET);
 80042bc:	4622      	mov	r2, r4
	}
}
 80042be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOB, MOTOR_4_D_Pin, GPIO_PIN_SET);
 80042c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042c6:	4803      	ldr	r0, [pc, #12]	; (80042d4 <motor4Handler+0x5c>)
 80042c8:	f7fd bb1a 	b.w	8001900 <HAL_GPIO_WritePin>
 80042cc:	bd38      	pop	{r3, r4, r5, pc}
 80042ce:	bf00      	nop
 80042d0:	20000007 	.word	0x20000007
 80042d4:	40020400 	.word	0x40020400

080042d8 <endstop0Control>:

void endstop0Control()
{
	if (endstop00State == 0 && endstop01State == 0) {
 80042d8:	4b08      	ldr	r3, [pc, #32]	; (80042fc <endstop0Control+0x24>)
 80042da:	781a      	ldrb	r2, [r3, #0]
 80042dc:	4b08      	ldr	r3, [pc, #32]	; (8004300 <endstop0Control+0x28>)
 80042de:	b92a      	cbnz	r2, 80042ec <endstop0Control+0x14>
 80042e0:	781a      	ldrb	r2, [r3, #0]
 80042e2:	4b08      	ldr	r3, [pc, #32]	; (8004304 <endstop0Control+0x2c>)
 80042e4:	b942      	cbnz	r2, 80042f8 <endstop0Control+0x20>
		farm0State = middle;
 80042e6:	2202      	movs	r2, #2
	}
	if (endstop00State == 1 && endstop01State == 0) {
		farm0State = top;
	}
	if (endstop00State == 0 && endstop01State == 1) {
		farm0State = bottom;
 80042e8:	701a      	strb	r2, [r3, #0]
 80042ea:	4770      	bx	lr
	if (endstop00State == 1 && endstop01State == 0) {
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1fb      	bne.n	80042ea <endstop0Control+0x12>
		farm0State = top;
 80042f2:	4a04      	ldr	r2, [pc, #16]	; (8004304 <endstop0Control+0x2c>)
 80042f4:	7013      	strb	r3, [r2, #0]
	}
}
 80042f6:	4770      	bx	lr
		farm0State = bottom;
 80042f8:	2201      	movs	r2, #1
 80042fa:	e7f5      	b.n	80042e8 <endstop0Control+0x10>
 80042fc:	200003d6 	.word	0x200003d6
 8004300:	20000708 	.word	0x20000708
 8004304:	20000000 	.word	0x20000000

08004308 <endstop1Control>:

void endstop1Control()
{
	if (endstop10State == 0 && endstop11State == 0) {
 8004308:	4b08      	ldr	r3, [pc, #32]	; (800432c <endstop1Control+0x24>)
 800430a:	781a      	ldrb	r2, [r3, #0]
 800430c:	4b08      	ldr	r3, [pc, #32]	; (8004330 <endstop1Control+0x28>)
 800430e:	b92a      	cbnz	r2, 800431c <endstop1Control+0x14>
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <endstop1Control+0x2c>)
 8004314:	b942      	cbnz	r2, 8004328 <endstop1Control+0x20>
		farm1State = middle;
 8004316:	2202      	movs	r2, #2
	}
	if (endstop10State == 1 && endstop11State == 0) {
		farm1State = top;
	}
	if (endstop10State == 0 && endstop11State == 1) {
		farm1State = bottom;
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	4770      	bx	lr
	if (endstop10State == 1 && endstop11State == 0) {
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1fb      	bne.n	800431a <endstop1Control+0x12>
		farm1State = top;
 8004322:	4a04      	ldr	r2, [pc, #16]	; (8004334 <endstop1Control+0x2c>)
 8004324:	7013      	strb	r3, [r2, #0]
	}
}
 8004326:	4770      	bx	lr
		farm1State = bottom;
 8004328:	2201      	movs	r2, #1
 800432a:	e7f5      	b.n	8004318 <endstop1Control+0x10>
 800432c:	20000712 	.word	0x20000712
 8004330:	200001c8 	.word	0x200001c8
 8004334:	20000001 	.word	0x20000001

08004338 <endstop00Handler>:

void endstop00Handler()
{
 8004338:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin (GPIOA, ESTOP_0_0_Pin) == GPIO_PIN_RESET) {
 800433a:	2110      	movs	r1, #16
 800433c:	4806      	ldr	r0, [pc, #24]	; (8004358 <endstop00Handler+0x20>)
 800433e:	f7fd fad9 	bl	80018f4 <HAL_GPIO_ReadPin>
 8004342:	b910      	cbnz	r0, 800434a <endstop00Handler+0x12>
		endstop00State = 0;
	} else if (HAL_GPIO_ReadPin (GPIOA, ESTOP_0_0_Pin) == GPIO_PIN_SET) {
		endstop00State = 1;
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <endstop00Handler+0x24>)
 8004346:	7018      	strb	r0, [r3, #0]
	}
}
 8004348:	e005      	b.n	8004356 <endstop00Handler+0x1e>
	} else if (HAL_GPIO_ReadPin (GPIOA, ESTOP_0_0_Pin) == GPIO_PIN_SET) {
 800434a:	2110      	movs	r1, #16
 800434c:	4802      	ldr	r0, [pc, #8]	; (8004358 <endstop00Handler+0x20>)
 800434e:	f7fd fad1 	bl	80018f4 <HAL_GPIO_ReadPin>
 8004352:	2801      	cmp	r0, #1
 8004354:	d0f6      	beq.n	8004344 <endstop00Handler+0xc>
 8004356:	bd08      	pop	{r3, pc}
 8004358:	40020000 	.word	0x40020000
 800435c:	200003d6 	.word	0x200003d6

08004360 <endstop01Handler>:

void endstop01Handler()
{
 8004360:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin (GPIOA, ESTOP_0_1_Pin) == GPIO_PIN_RESET) {
 8004362:	2120      	movs	r1, #32
 8004364:	4806      	ldr	r0, [pc, #24]	; (8004380 <endstop01Handler+0x20>)
 8004366:	f7fd fac5 	bl	80018f4 <HAL_GPIO_ReadPin>
 800436a:	b910      	cbnz	r0, 8004372 <endstop01Handler+0x12>
		endstop01State = 0;
	} else if (HAL_GPIO_ReadPin (GPIOA, ESTOP_0_1_Pin) == GPIO_PIN_SET) {
		endstop01State = 1;
 800436c:	4b05      	ldr	r3, [pc, #20]	; (8004384 <endstop01Handler+0x24>)
 800436e:	7018      	strb	r0, [r3, #0]
	}
}
 8004370:	e005      	b.n	800437e <endstop01Handler+0x1e>
	} else if (HAL_GPIO_ReadPin (GPIOA, ESTOP_0_1_Pin) == GPIO_PIN_SET) {
 8004372:	2120      	movs	r1, #32
 8004374:	4802      	ldr	r0, [pc, #8]	; (8004380 <endstop01Handler+0x20>)
 8004376:	f7fd fabd 	bl	80018f4 <HAL_GPIO_ReadPin>
 800437a:	2801      	cmp	r0, #1
 800437c:	d0f6      	beq.n	800436c <endstop01Handler+0xc>
 800437e:	bd08      	pop	{r3, pc}
 8004380:	40020000 	.word	0x40020000
 8004384:	20000708 	.word	0x20000708

08004388 <endstop10Handler>:

void endstop10Handler()
{
 8004388:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin (GPIOA, ESTOP_1_0_Pin) == GPIO_PIN_RESET) {
 800438a:	2140      	movs	r1, #64	; 0x40
 800438c:	4806      	ldr	r0, [pc, #24]	; (80043a8 <endstop10Handler+0x20>)
 800438e:	f7fd fab1 	bl	80018f4 <HAL_GPIO_ReadPin>
 8004392:	b910      	cbnz	r0, 800439a <endstop10Handler+0x12>
		endstop10State = 0;
	} else if (HAL_GPIO_ReadPin (GPIOA, ESTOP_1_0_Pin) == GPIO_PIN_SET) {
		endstop10State = 1;
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <endstop10Handler+0x24>)
 8004396:	7018      	strb	r0, [r3, #0]
	}
}
 8004398:	e005      	b.n	80043a6 <endstop10Handler+0x1e>
	} else if (HAL_GPIO_ReadPin (GPIOA, ESTOP_1_0_Pin) == GPIO_PIN_SET) {
 800439a:	2140      	movs	r1, #64	; 0x40
 800439c:	4802      	ldr	r0, [pc, #8]	; (80043a8 <endstop10Handler+0x20>)
 800439e:	f7fd faa9 	bl	80018f4 <HAL_GPIO_ReadPin>
 80043a2:	2801      	cmp	r0, #1
 80043a4:	d0f6      	beq.n	8004394 <endstop10Handler+0xc>
 80043a6:	bd08      	pop	{r3, pc}
 80043a8:	40020000 	.word	0x40020000
 80043ac:	20000712 	.word	0x20000712

080043b0 <endstop11Handler>:

void endstop11Handler()
{
 80043b0:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin (GPIOA, ESTOP_1_1_Pin) == GPIO_PIN_RESET) {
 80043b2:	2180      	movs	r1, #128	; 0x80
 80043b4:	4806      	ldr	r0, [pc, #24]	; (80043d0 <endstop11Handler+0x20>)
 80043b6:	f7fd fa9d 	bl	80018f4 <HAL_GPIO_ReadPin>
 80043ba:	b910      	cbnz	r0, 80043c2 <endstop11Handler+0x12>
		endstop11State = 0;
	} else if (HAL_GPIO_ReadPin (GPIOA, ESTOP_1_1_Pin) == GPIO_PIN_SET) {
		endstop11State = 1;
 80043bc:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <endstop11Handler+0x24>)
 80043be:	7018      	strb	r0, [r3, #0]
	}
}
 80043c0:	e005      	b.n	80043ce <endstop11Handler+0x1e>
	} else if (HAL_GPIO_ReadPin (GPIOA, ESTOP_1_1_Pin) == GPIO_PIN_SET) {
 80043c2:	2180      	movs	r1, #128	; 0x80
 80043c4:	4802      	ldr	r0, [pc, #8]	; (80043d0 <endstop11Handler+0x20>)
 80043c6:	f7fd fa95 	bl	80018f4 <HAL_GPIO_ReadPin>
 80043ca:	2801      	cmp	r0, #1
 80043cc:	d0f6      	beq.n	80043bc <endstop11Handler+0xc>
 80043ce:	bd08      	pop	{r3, pc}
 80043d0:	40020000 	.word	0x40020000
 80043d4:	200001c8 	.word	0x200001c8

080043d8 <buttonsHandler>:

    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
}

void buttonsHandler()
{
 80043d8:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin (GPIOB, BUTTON_0_Pin) == GPIO_PIN_RESET) {
 80043da:	2140      	movs	r1, #64	; 0x40
 80043dc:	4827      	ldr	r0, [pc, #156]	; (800447c <buttonsHandler+0xa4>)
 80043de:	f7fd fa89 	bl	80018f4 <HAL_GPIO_ReadPin>
 80043e2:	b908      	cbnz	r0, 80043e8 <buttonsHandler+0x10>
		farms = open;
 80043e4:	4b26      	ldr	r3, [pc, #152]	; (8004480 <buttonsHandler+0xa8>)
 80043e6:	7018      	strb	r0, [r3, #0]
	}
	if (HAL_GPIO_ReadPin (GPIOB, BUTTON_1_Pin) == GPIO_PIN_RESET) {
 80043e8:	2180      	movs	r1, #128	; 0x80
 80043ea:	4824      	ldr	r0, [pc, #144]	; (800447c <buttonsHandler+0xa4>)
 80043ec:	f7fd fa82 	bl	80018f4 <HAL_GPIO_ReadPin>
 80043f0:	b910      	cbnz	r0, 80043f8 <buttonsHandler+0x20>
		farms = close;
 80043f2:	2201      	movs	r2, #1
 80043f4:	4b22      	ldr	r3, [pc, #136]	; (8004480 <buttonsHandler+0xa8>)
 80043f6:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin (GPIOB, BUTTON_2_Pin) == GPIO_PIN_RESET) {
 80043f8:	2120      	movs	r1, #32
 80043fa:	4820      	ldr	r0, [pc, #128]	; (800447c <buttonsHandler+0xa4>)
 80043fc:	f7fd fa7a 	bl	80018f4 <HAL_GPIO_ReadPin>
 8004400:	b910      	cbnz	r0, 8004408 <buttonsHandler+0x30>
		key3VBusState = 1;
 8004402:	2201      	movs	r2, #1
 8004404:	4b1f      	ldr	r3, [pc, #124]	; (8004484 <buttonsHandler+0xac>)
 8004406:	701a      	strb	r2, [r3, #0]

	}
	if (HAL_GPIO_ReadPin (GPIOB, BUTTON_3_Pin) == GPIO_PIN_RESET) {
 8004408:	2110      	movs	r1, #16
 800440a:	481c      	ldr	r0, [pc, #112]	; (800447c <buttonsHandler+0xa4>)
 800440c:	f7fd fa72 	bl	80018f4 <HAL_GPIO_ReadPin>
 8004410:	b908      	cbnz	r0, 8004416 <buttonsHandler+0x3e>
		key3VBusState = 0;
 8004412:	4b1c      	ldr	r3, [pc, #112]	; (8004484 <buttonsHandler+0xac>)
 8004414:	7018      	strb	r0, [r3, #0]
	}

	if (HAL_GPIO_ReadPin (GPIOC, BUTTON_4_Pin) == GPIO_PIN_RESET) {
 8004416:	2104      	movs	r1, #4
 8004418:	481b      	ldr	r0, [pc, #108]	; (8004488 <buttonsHandler+0xb0>)
 800441a:	f7fd fa6b 	bl	80018f4 <HAL_GPIO_ReadPin>
 800441e:	b920      	cbnz	r0, 800442a <buttonsHandler+0x52>
		chrKey1State = 1;
 8004420:	2201      	movs	r2, #1
 8004422:	4b1a      	ldr	r3, [pc, #104]	; (800448c <buttonsHandler+0xb4>)
 8004424:	701a      	strb	r2, [r3, #0]
		chrKey2State = 0;
 8004426:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <buttonsHandler+0xb8>)
 8004428:	7018      	strb	r0, [r3, #0]
	}

	if (HAL_GPIO_ReadPin (GPIOC, BUTTON_5_Pin) == GPIO_PIN_RESET) {
 800442a:	2108      	movs	r1, #8
 800442c:	4816      	ldr	r0, [pc, #88]	; (8004488 <buttonsHandler+0xb0>)
 800442e:	f7fd fa61 	bl	80018f4 <HAL_GPIO_ReadPin>
 8004432:	b920      	cbnz	r0, 800443e <buttonsHandler+0x66>
		chrKey1State = 0;
		chrKey2State = 1;
 8004434:	2201      	movs	r2, #1
		chrKey1State = 0;
 8004436:	4b15      	ldr	r3, [pc, #84]	; (800448c <buttonsHandler+0xb4>)
 8004438:	7018      	strb	r0, [r3, #0]
		chrKey2State = 1;
 800443a:	4b15      	ldr	r3, [pc, #84]	; (8004490 <buttonsHandler+0xb8>)
 800443c:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin (GPIOC, BUTTON_6_Pin) == GPIO_PIN_RESET) {
 800443e:	2101      	movs	r1, #1
 8004440:	4811      	ldr	r0, [pc, #68]	; (8004488 <buttonsHandler+0xb0>)
 8004442:	f7fd fa57 	bl	80018f4 <HAL_GPIO_ReadPin>
 8004446:	b920      	cbnz	r0, 8004452 <buttonsHandler+0x7a>
		batKey1State = 0;
		batKey2State = 1;
 8004448:	2201      	movs	r2, #1
		batKey1State = 0;
 800444a:	4b12      	ldr	r3, [pc, #72]	; (8004494 <buttonsHandler+0xbc>)
 800444c:	7018      	strb	r0, [r3, #0]
		batKey2State = 1;
 800444e:	4b12      	ldr	r3, [pc, #72]	; (8004498 <buttonsHandler+0xc0>)
 8004450:	701a      	strb	r2, [r3, #0]

	}
	if (HAL_GPIO_ReadPin (GPIOC, BUTTON_7_Pin) == GPIO_PIN_RESET) {
 8004452:	2102      	movs	r1, #2
 8004454:	480c      	ldr	r0, [pc, #48]	; (8004488 <buttonsHandler+0xb0>)
 8004456:	f7fd fa4d 	bl	80018f4 <HAL_GPIO_ReadPin>
 800445a:	b920      	cbnz	r0, 8004466 <buttonsHandler+0x8e>
		batKey1State = 1;
 800445c:	2201      	movs	r2, #1
 800445e:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <buttonsHandler+0xbc>)
 8004460:	701a      	strb	r2, [r3, #0]
		batKey2State = 0;
 8004462:	4b0d      	ldr	r3, [pc, #52]	; (8004498 <buttonsHandler+0xc0>)
 8004464:	7018      	strb	r0, [r3, #0]
	}


	if (HAL_GPIO_ReadPin (GPIOC, BUTTON_8_Pin) == GPIO_PIN_RESET) {
 8004466:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800446a:	4807      	ldr	r0, [pc, #28]	; (8004488 <buttonsHandler+0xb0>)
 800446c:	f7fd fa42 	bl	80018f4 <HAL_GPIO_ReadPin>
 8004470:	b910      	cbnz	r0, 8004478 <buttonsHandler+0xa0>
		sunTrackState = 1;
 8004472:	2201      	movs	r2, #1
 8004474:	4b09      	ldr	r3, [pc, #36]	; (800449c <buttonsHandler+0xc4>)
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	bd08      	pop	{r3, pc}
 800447a:	bf00      	nop
 800447c:	40020400 	.word	0x40020400
 8004480:	20000002 	.word	0x20000002
 8004484:	200003f3 	.word	0x200003f3
 8004488:	40020800 	.word	0x40020800
 800448c:	2000046c 	.word	0x2000046c
 8004490:	200003f2 	.word	0x200003f2
 8004494:	200006ec 	.word	0x200006ec
 8004498:	200003d8 	.word	0x200003d8
 800449c:	200004d4 	.word	0x200004d4

080044a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80044a0:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044a2:	2400      	movs	r4, #0
{
 80044a4:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044a6:	2234      	movs	r2, #52	; 0x34
 80044a8:	2100      	movs	r1, #0
 80044aa:	a809      	add	r0, sp, #36	; 0x24
 80044ac:	f000 fe3a 	bl	8005124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044b0:	2100      	movs	r1, #0
 80044b2:	2214      	movs	r2, #20
 80044b4:	a804      	add	r0, sp, #16
 80044b6:	f000 fe35 	bl	8005124 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044ba:	4a18      	ldr	r2, [pc, #96]	; (800451c <SystemClock_Config+0x7c>)
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044bc:	9401      	str	r4, [sp, #4]
 80044be:	9402      	str	r4, [sp, #8]
 80044c0:	9403      	str	r4, [sp, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044c2:	6813      	ldr	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80044c4:	2501      	movs	r5, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044c6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80044ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044ce:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80044d0:	230a      	movs	r3, #10
 80044d2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80044d4:	2310      	movs	r3, #16
 80044d6:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044d8:	2302      	movs	r3, #2
 80044da:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80044dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80044e0:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80044e2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044e6:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80044e8:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80044ea:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80044ec:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80044ee:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044f0:	f7fd fec8 	bl	8002284 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044f4:	230f      	movs	r3, #15
 80044f6:	9304      	str	r3, [sp, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044f8:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80044fa:	4629      	mov	r1, r5
 80044fc:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044fe:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004500:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004502:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004504:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004506:	f7fe fa57 	bl	80029b8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800450a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800450e:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004510:	9501      	str	r5, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004512:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004514:	f7fe fb5e 	bl	8002bd4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8004518:	b017      	add	sp, #92	; 0x5c
 800451a:	bd30      	pop	{r4, r5, pc}
 800451c:	40007000 	.word	0x40007000

08004520 <main>:
{
 8004520:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  F11.Val = 0;
 8004522:	2400      	movs	r4, #0
  batKey1State = 1;
 8004524:	2501      	movs	r5, #1
  F11.Val = 0;
 8004526:	4b4c      	ldr	r3, [pc, #304]	; (8004658 <main+0x138>)
  RTC_Set(19, 6, 26, 18, 7, 0, 3);
 8004528:	2603      	movs	r6, #3
  F11.Val = 0;
 800452a:	601c      	str	r4, [r3, #0]
  F12.Val = 0;
 800452c:	4b4b      	ldr	r3, [pc, #300]	; (800465c <main+0x13c>)
 800452e:	601c      	str	r4, [r3, #0]
  HAL_Init();
 8004530:	f7fc fd18 	bl	8000f64 <HAL_Init>
  SystemClock_Config();
 8004534:	f7ff ffb4 	bl	80044a0 <SystemClock_Config>
  MX_GPIO_Init();
 8004538:	f7ff f9f6 	bl	8003928 <MX_GPIO_Init>
  MX_DMA_Init();
 800453c:	f7ff f99c 	bl	8003878 <MX_DMA_Init>
  MX_ADC_Init();
 8004540:	f7ff f85e 	bl	8003600 <MX_ADC_Init>
  MX_I2C1_Init();
 8004544:	f7ff fab0 	bl	8003aa8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8004548:	f000 fce0 	bl	8004f0c <MX_USART2_UART_Init>
  MX_RTC_Init();
 800454c:	f000 f8f4 	bl	8004738 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8004550:	f000 fcf8 	bl	8004f44 <MX_USART3_UART_Init>
  batKey1State = 1;
 8004554:	4b42      	ldr	r3, [pc, #264]	; (8004660 <main+0x140>)
 8004556:	701d      	strb	r5, [r3, #0]
  batKey2State = 1;
 8004558:	4b42      	ldr	r3, [pc, #264]	; (8004664 <main+0x144>)
 800455a:	701d      	strb	r5, [r3, #0]
  key3VBusState = 0;
 800455c:	4b42      	ldr	r3, [pc, #264]	; (8004668 <main+0x148>)
 800455e:	701c      	strb	r4, [r3, #0]
  chrKey1State = 0;
 8004560:	4b42      	ldr	r3, [pc, #264]	; (800466c <main+0x14c>)
 8004562:	701c      	strb	r4, [r3, #0]
  chrKey2State = 0;
 8004564:	4b42      	ldr	r3, [pc, #264]	; (8004670 <main+0x150>)
 8004566:	701c      	strb	r4, [r3, #0]
  sunTrackState = 0;
 8004568:	4b42      	ldr	r3, [pc, #264]	; (8004674 <main+0x154>)
 800456a:	701c      	strb	r4, [r3, #0]
  batKey1Handler();
 800456c:	f7ff fb62 	bl	8003c34 <batKey1Handler>
  batKey2Handler();
 8004570:	f7ff fb6e 	bl	8003c50 <batKey2Handler>
  key3VBusHandler();
 8004574:	f7ff fb96 	bl	8003ca4 <key3VBusHandler>
  chrKey1Handler();
 8004578:	f7ff fb78 	bl	8003c6c <chrKey1Handler>
  chrKey2Handler();
 800457c:	f7ff fb84 	bl	8003c88 <chrKey2Handler>
  RTC_Set(19, 6, 26, 18, 7, 0, 3);
 8004580:	2307      	movs	r3, #7
 8004582:	221a      	movs	r2, #26
 8004584:	2106      	movs	r1, #6
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	9602      	str	r6, [sp, #8]
 800458a:	2312      	movs	r3, #18
 800458c:	9401      	str	r4, [sp, #4]
 800458e:	2013      	movs	r0, #19
 8004590:	f7ff fb1c 	bl	8003bcc <RTC_Set>
  I2C_Scan();
 8004594:	f7ff fd26 	bl	8003fe4 <I2C_Scan>
  troykaI2CHub_init(&hi2c1);
 8004598:	4837      	ldr	r0, [pc, #220]	; (8004678 <main+0x158>)
 800459a:	f000 fc97 	bl	8004ecc <troykaI2CHub_init>
  troykaI2CHub_setBusChannel(0);
 800459e:	4620      	mov	r0, r4
 80045a0:	f000 fc9a 	bl	8004ed8 <troykaI2CHub_setBusChannel>
  BH1750_Init(&hi2c1);
 80045a4:	4834      	ldr	r0, [pc, #208]	; (8004678 <main+0x158>)
 80045a6:	f7ff f8ef 	bl	8003788 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 80045aa:	2011      	movs	r0, #17
 80045ac:	f7ff f8fe 	bl	80037ac <BH1750_SetMode>
  troykaI2CHub_setBusChannel(1);
 80045b0:	4628      	mov	r0, r5
 80045b2:	f000 fc91 	bl	8004ed8 <troykaI2CHub_setBusChannel>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 80045b6:	2011      	movs	r0, #17
 80045b8:	f7ff f8f8 	bl	80037ac <BH1750_SetMode>
  troykaI2CHub_setBusChannel(3);
 80045bc:	4630      	mov	r0, r6
 80045be:	f000 fc8b 	bl	8004ed8 <troykaI2CHub_setBusChannel>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 80045c2:	2011      	movs	r0, #17
 80045c4:	f7ff f8f2 	bl	80037ac <BH1750_SetMode>
  troykaI2CHub_setBusChannel(4);
 80045c8:	2004      	movs	r0, #4
 80045ca:	f000 fc85 	bl	8004ed8 <troykaI2CHub_setBusChannel>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 80045ce:	2011      	movs	r0, #17
 80045d0:	f7ff f8ec 	bl	80037ac <BH1750_SetMode>
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)&ADC_value, 2);
 80045d4:	2202      	movs	r2, #2
 80045d6:	4929      	ldr	r1, [pc, #164]	; (800467c <main+0x15c>)
 80045d8:	4829      	ldr	r0, [pc, #164]	; (8004680 <main+0x160>)
 80045da:	f7fc fed5 	bl	8001388 <HAL_ADC_Start_DMA>
  sim7020Init(&huart3, &huart2);
 80045de:	4929      	ldr	r1, [pc, #164]	; (8004684 <main+0x164>)
 80045e0:	4829      	ldr	r0, [pc, #164]	; (8004688 <main+0x168>)
 80045e2:	f000 f903 	bl	80047ec <sim7020Init>
  sim7020Dtr();
 80045e6:	f000 f96b 	bl	80048c0 <sim7020Dtr>
  sim7020PowerCycle();
 80045ea:	f000 f909 	bl	8004800 <sim7020PowerCycle>
  sim7020HardwareInfo();
 80045ee:	f000 fb41 	bl	8004c74 <sim7020HardwareInfo>
	  getDateTime();
 80045f2:	f7ff faaf 	bl	8003b54 <getDateTime>
	  batKey1Handler();
 80045f6:	f7ff fb1d 	bl	8003c34 <batKey1Handler>
	  batKey2Handler();
 80045fa:	f7ff fb29 	bl	8003c50 <batKey2Handler>
	  chrKey1Handler();
 80045fe:	f7ff fb35 	bl	8003c6c <chrKey1Handler>
	  chrKey2Handler();
 8004602:	f7ff fb41 	bl	8003c88 <chrKey2Handler>
	  key3VBusHandler();
 8004606:	f7ff fb4d 	bl	8003ca4 <key3VBusHandler>
	  adcRead();
 800460a:	f7ff fb59 	bl	8003cc0 <adcRead>
	  calculateVBat0();
 800460e:	f7ff fc5b 	bl	8003ec8 <calculateVBat0>
	  calculateVBat1();
 8004612:	f7ff fca1 	bl	8003f58 <calculateVBat1>
	  readLs();
 8004616:	f7ff fb87 	bl	8003d28 <readLs>
	  buttonsHandler();
 800461a:	f7ff fedd 	bl	80043d8 <buttonsHandler>
	  endstop00Handler();
 800461e:	f7ff fe8b 	bl	8004338 <endstop00Handler>
	  endstop01Handler();
 8004622:	f7ff fe9d 	bl	8004360 <endstop01Handler>
	  endstop10Handler();
 8004626:	f7ff feaf 	bl	8004388 <endstop10Handler>
	  endstop11Handler();
 800462a:	f7ff fec1 	bl	80043b0 <endstop11Handler>
	  endstop0Control();
 800462e:	f7ff fe53 	bl	80042d8 <endstop0Control>
	  endstop1Control();
 8004632:	f7ff fe69 	bl	8004308 <endstop1Control>
	  motor0PositionControl();
 8004636:	f7ff fd25 	bl	8004084 <motor0PositionControl>
	  motor1PositionControl();
 800463a:	f7ff fd47 	bl	80040cc <motor1PositionControl>
	  motor0Handler();
 800463e:	f7ff fd69 	bl	8004114 <motor0Handler>
	  motor1Handler();
 8004642:	f7ff fd93 	bl	800416c <motor1Handler>
	  sunTrackControl();
 8004646:	f7ff fbe5 	bl	8003e14 <sunTrackControl>
	  motor2Handler();
 800464a:	f7ff fdb9 	bl	80041c0 <motor2Handler>
	  motor3Handler();
 800464e:	f7ff fde5 	bl	800421c <motor3Handler>
	  motor4Handler();
 8004652:	f7ff fe11 	bl	8004278 <motor4Handler>
 8004656:	e7cc      	b.n	80045f2 <main+0xd2>
 8004658:	2000070c 	.word	0x2000070c
 800465c:	200001d0 	.word	0x200001d0
 8004660:	200006ec 	.word	0x200006ec
 8004664:	200003d8 	.word	0x200003d8
 8004668:	200003f3 	.word	0x200003f3
 800466c:	2000046c 	.word	0x2000046c
 8004670:	200003f2 	.word	0x200003f2
 8004674:	200004d4 	.word	0x200004d4
 8004678:	2000016c 	.word	0x2000016c
 800467c:	200003f6 	.word	0x200003f6
 8004680:	2000010c 	.word	0x2000010c
 8004684:	200007f8 	.word	0x200007f8
 8004688:	200007b8 	.word	0x200007b8

0800468c <HAL_UART_RxCpltCallback>:
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	    uint8_t i;
	    if (huart->Instance == USART3) {
 800468c:	6802      	ldr	r2, [r0, #0]
 800468e:	4b20      	ldr	r3, [pc, #128]	; (8004710 <HAL_UART_RxCpltCallback+0x84>)
{
 8004690:	b510      	push	{r4, lr}
	    if (huart->Instance == USART3) {
 8004692:	429a      	cmp	r2, r3
 8004694:	d13a      	bne.n	800470c <HAL_UART_RxCpltCallback+0x80>

	        if (rx_flag == 0) {
 8004696:	4a1f      	ldr	r2, [pc, #124]	; (8004714 <HAL_UART_RxCpltCallback+0x88>)
 8004698:	491f      	ldr	r1, [pc, #124]	; (8004718 <HAL_UART_RxCpltCallback+0x8c>)
 800469a:	7813      	ldrb	r3, [r2, #0]
 800469c:	bb8b      	cbnz	r3, 8004702 <HAL_UART_RxCpltCallback+0x76>
	            for (i = 0; i < 100; i++)
	                rx_buffer[i] = 0;
 800469e:	4618      	mov	r0, r3
 80046a0:	54c8      	strb	r0, [r1, r3]
 80046a2:	3301      	adds	r3, #1
	            for (i = 0; i < 100; i++)
 80046a4:	2b64      	cmp	r3, #100	; 0x64
 80046a6:	d1fb      	bne.n	80046a0 <HAL_UART_RxCpltCallback+0x14>

	        if (rx_flag > rx_buffer_size){
	            rx_flag = 0;
	        }

	        rx_buffer[rx_flag++] = rx_data[0];
 80046a8:	7810      	ldrb	r0, [r2, #0]
 80046aa:	4c1c      	ldr	r4, [pc, #112]	; (800471c <HAL_UART_RxCpltCallback+0x90>)
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	7824      	ldrb	r4, [r4, #0]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	540c      	strb	r4, [r1, r0]

	        if (rx_buffer[rx_flag - 4] == 79 && rx_buffer[rx_flag - 3] == 75){
 80046b4:	4419      	add	r1, r3
	        rx_buffer[rx_flag++] = rx_data[0];
 80046b6:	7013      	strb	r3, [r2, #0]
	        if (rx_buffer[rx_flag - 4] == 79 && rx_buffer[rx_flag - 3] == 75){
 80046b8:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80046bc:	4c18      	ldr	r4, [pc, #96]	; (8004720 <HAL_UART_RxCpltCallback+0x94>)
 80046be:	2b4f      	cmp	r3, #79	; 0x4f
 80046c0:	d109      	bne.n	80046d6 <HAL_UART_RxCpltCallback+0x4a>
 80046c2:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80046c6:	2b4b      	cmp	r3, #75	; 0x4b
 80046c8:	d105      	bne.n	80046d6 <HAL_UART_RxCpltCallback+0x4a>
	        	ok_flag = 1;
 80046ca:	2301      	movs	r3, #1
 80046cc:	4915      	ldr	r1, [pc, #84]	; (8004724 <HAL_UART_RxCpltCallback+0x98>)
	            rx_flag = 0;
	            transfer = 1;
 80046ce:	7023      	strb	r3, [r4, #0]
	        	ok_flag = 1;
 80046d0:	700b      	strb	r3, [r1, #0]
	            rx_flag = 0;
 80046d2:	2100      	movs	r1, #0
 80046d4:	7011      	strb	r1, [r2, #0]
	        }

	        if (transfer) {
 80046d6:	7823      	ldrb	r3, [r4, #0]
 80046d8:	b163      	cbz	r3, 80046f4 <HAL_UART_RxCpltCallback+0x68>
	            sprintf(buffer, "%s", rx_buffer);
 80046da:	490f      	ldr	r1, [pc, #60]	; (8004718 <HAL_UART_RxCpltCallback+0x8c>)
 80046dc:	4812      	ldr	r0, [pc, #72]	; (8004728 <HAL_UART_RxCpltCallback+0x9c>)
 80046de:	f000 fe17 	bl	8005310 <strcpy>
	            HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sizeof(buffer), 1000);
 80046e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046e6:	2264      	movs	r2, #100	; 0x64
 80046e8:	490f      	ldr	r1, [pc, #60]	; (8004728 <HAL_UART_RxCpltCallback+0x9c>)
 80046ea:	4810      	ldr	r0, [pc, #64]	; (800472c <HAL_UART_RxCpltCallback+0xa0>)
 80046ec:	f7fe fe34 	bl	8003358 <HAL_UART_Transmit>

	            transfer = 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	7023      	strb	r3, [r4, #0]
	        }
	        HAL_UART_Receive_IT(&huart3, rx_data, 1);
 80046f4:	2201      	movs	r2, #1
	    }
}
 80046f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	        HAL_UART_Receive_IT(&huart3, rx_data, 1);
 80046fa:	4908      	ldr	r1, [pc, #32]	; (800471c <HAL_UART_RxCpltCallback+0x90>)
 80046fc:	480c      	ldr	r0, [pc, #48]	; (8004730 <HAL_UART_RxCpltCallback+0xa4>)
 80046fe:	f7fe be86 	b.w	800340e <HAL_UART_Receive_IT>
	        if (rx_flag > rx_buffer_size){
 8004702:	2b64      	cmp	r3, #100	; 0x64
	            rx_flag = 0;
 8004704:	bf84      	itt	hi
 8004706:	2300      	movhi	r3, #0
 8004708:	7013      	strbhi	r3, [r2, #0]
 800470a:	e7cd      	b.n	80046a8 <HAL_UART_RxCpltCallback+0x1c>
 800470c:	bd10      	pop	{r4, pc}
 800470e:	bf00      	nop
 8004710:	40004800 	.word	0x40004800
 8004714:	200000b4 	.word	0x200000b4
 8004718:	20000408 	.word	0x20000408
 800471c:	200006ea 	.word	0x200006ea
 8004720:	200001c0 	.word	0x200001c0
 8004724:	200006f6 	.word	0x200006f6
 8004728:	20000470 	.word	0x20000470
 800472c:	200007f8 	.word	0x200007f8
 8004730:	200007b8 	.word	0x200007b8

08004734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004734:	4770      	bx	lr
	...

08004738 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004738:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  RTC_TimeTypeDef sTime = {0};
 800473a:	2214      	movs	r2, #20
 800473c:	2100      	movs	r1, #0
 800473e:	a801      	add	r0, sp, #4
 8004740:	f000 fcf0 	bl	8005124 <memset>
  RTC_DateTypeDef sDate = {0};
 8004744:	2300      	movs	r3, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004746:	481d      	ldr	r0, [pc, #116]	; (80047bc <MX_RTC_Init+0x84>)
 8004748:	4a1d      	ldr	r2, [pc, #116]	; (80047c0 <MX_RTC_Init+0x88>)
  RTC_DateTypeDef sDate = {0};
 800474a:	9300      	str	r3, [sp, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800474c:	e880 000c 	stmia.w	r0, {r2, r3}
  hrtc.Init.AsynchPrediv = 127;
 8004750:	227f      	movs	r2, #127	; 0x7f
 8004752:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8004754:	22ff      	movs	r2, #255	; 0xff
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004756:	6103      	str	r3, [r0, #16]
  hrtc.Init.SynchPrediv = 255;
 8004758:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800475a:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800475c:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800475e:	f7fe fb01 	bl	8002d64 <HAL_RTC_Init>
 8004762:	b108      	cbz	r0, 8004768 <MX_RTC_Init+0x30>
  {
    Error_Handler();
 8004764:	f7ff ffe6 	bl	8004734 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x16;
 8004768:	2316      	movs	r3, #22
 800476a:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x56;
 800476e:	2356      	movs	r3, #86	; 0x56
 8004770:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8004774:	2300      	movs	r3, #0
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004776:	2201      	movs	r2, #1
 8004778:	a901      	add	r1, sp, #4
 800477a:	4810      	ldr	r0, [pc, #64]	; (80047bc <MX_RTC_Init+0x84>)
  sTime.Seconds = 0x0;
 800477c:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004780:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004782:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004784:	f7fe fb3b 	bl	8002dfe <HAL_RTC_SetTime>
 8004788:	b108      	cbz	r0, 800478e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800478a:	f7ff ffd3 	bl	8004734 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800478e:	2303      	movs	r3, #3
 8004790:	f88d 3000 	strb.w	r3, [sp]
  sDate.Month = RTC_MONTH_JUNE;
 8004794:	2306      	movs	r3, #6
 8004796:	f88d 3001 	strb.w	r3, [sp, #1]
  sDate.Date = 0x26;
 800479a:	2326      	movs	r3, #38	; 0x26
 800479c:	f88d 3002 	strb.w	r3, [sp, #2]
  sDate.Year = 0x19;
 80047a0:	2319      	movs	r3, #25

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80047a2:	2201      	movs	r2, #1
 80047a4:	4669      	mov	r1, sp
 80047a6:	4805      	ldr	r0, [pc, #20]	; (80047bc <MX_RTC_Init+0x84>)
  sDate.Year = 0x19;
 80047a8:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80047ac:	f7fe fb8f 	bl	8002ece <HAL_RTC_SetDate>
 80047b0:	b108      	cbz	r0, 80047b6 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 80047b2:	f7ff ffbf 	bl	8004734 <Error_Handler>
  }

}
 80047b6:	b007      	add	sp, #28
 80047b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80047bc:	20000720 	.word	0x20000720
 80047c0:	40002800 	.word	0x40002800

080047c4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 80047c4:	6802      	ldr	r2, [r0, #0]
 80047c6:	4b07      	ldr	r3, [pc, #28]	; (80047e4 <HAL_RTC_MspInit+0x20>)
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d10a      	bne.n	80047e2 <HAL_RTC_MspInit+0x1e>
 80047cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80047d0:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80047d4:	fab2 f282 	clz	r2, r2
 80047d8:	4b03      	ldr	r3, [pc, #12]	; (80047e8 <HAL_RTC_MspInit+0x24>)
 80047da:	4413      	add	r3, r2
 80047dc:	2201      	movs	r2, #1
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	4770      	bx	lr
 80047e4:	40002800 	.word	0x40002800
 80047e8:	1091c1a0 	.word	0x1091c1a0

080047ec <sim7020Init>:

int32_t TimeOut = TIMEOUT;

void sim7020Init(UART_HandleTypeDef* ctrl, UART_HandleTypeDef* msg)
{
    sim7020_ctrl = ctrl;
 80047ec:	4b02      	ldr	r3, [pc, #8]	; (80047f8 <sim7020Init+0xc>)
 80047ee:	6018      	str	r0, [r3, #0]

#if (SIM7020_DEBUG == 1)
    sim7020_msg = msg;
 80047f0:	4b02      	ldr	r3, [pc, #8]	; (80047fc <sim7020Init+0x10>)
 80047f2:	6019      	str	r1, [r3, #0]
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000740 	.word	0x20000740
 80047fc:	2000078c 	.word	0x2000078c

08004800 <sim7020PowerCycle>:
#endif
}

void sim7020PowerCycle()
{
 8004800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004802:	b08d      	sub	sp, #52	; 0x34
#if (SIM7020_DEBUG == 1)
    const char info[] = "Power Circle Start\r\n";
 8004804:	aa06      	add	r2, sp, #24
 8004806:	4615      	mov	r5, r2
 8004808:	4b29      	ldr	r3, [pc, #164]	; (80048b0 <sim7020PowerCycle+0xb0>)
 800480a:	f103 0610 	add.w	r6, r3, #16
 800480e:	4614      	mov	r4, r2
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	6859      	ldr	r1, [r3, #4]
 8004814:	3308      	adds	r3, #8
 8004816:	c403      	stmia	r4!, {r0, r1}
 8004818:	42b3      	cmp	r3, r6
 800481a:	4622      	mov	r2, r4
 800481c:	d1f7      	bne.n	800480e <sim7020PowerCycle+0xe>
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	791b      	ldrb	r3, [r3, #4]
 8004822:	6020      	str	r0, [r4, #0]
 8004824:	7123      	strb	r3, [r4, #4]
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8004826:	4628      	mov	r0, r5
 8004828:	f7fb fcaa 	bl	8000180 <strlen>
 800482c:	4c21      	ldr	r4, [pc, #132]	; (80048b4 <sim7020PowerCycle+0xb4>)
 800482e:	f04f 33ff 	mov.w	r3, #4294967295
 8004832:	b282      	uxth	r2, r0
 8004834:	4629      	mov	r1, r5
 8004836:	6820      	ldr	r0, [r4, #0]
 8004838:	f7fe fd8e 	bl	8003358 <HAL_UART_Transmit>
#endif

    HAL_GPIO_WritePin(GPIOB, SIM_PWR_Pin, GPIO_PIN_SET);
 800483c:	2201      	movs	r2, #1
 800483e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004842:	481d      	ldr	r0, [pc, #116]	; (80048b8 <sim7020PowerCycle+0xb8>)
 8004844:	f7fd f85c 	bl	8001900 <HAL_GPIO_WritePin>
    HAL_Delay(2000);
 8004848:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800484c:	f7fc fba4 	bl	8000f98 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, SIM_PWR_Pin, GPIO_PIN_RESET);
 8004850:	2200      	movs	r2, #0
 8004852:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004856:	4818      	ldr	r0, [pc, #96]	; (80048b8 <sim7020PowerCycle+0xb8>)
 8004858:	f7fd f852 	bl	8001900 <HAL_GPIO_WritePin>
    HAL_Delay(2000);
 800485c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004860:	f7fc fb9a 	bl	8000f98 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, SIM_PWR_Pin, GPIO_PIN_SET);
 8004864:	2201      	movs	r2, #1
 8004866:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800486a:	4813      	ldr	r0, [pc, #76]	; (80048b8 <sim7020PowerCycle+0xb8>)
 800486c:	f7fd f848 	bl	8001900 <HAL_GPIO_WritePin>
    HAL_Delay(2000);
 8004870:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004874:	f7fc fb90 	bl	8000f98 <HAL_Delay>

#if (SIM7020_DEBUG == 1)
    const char info1[] = "Power Circle Done\r\n";
 8004878:	aa01      	add	r2, sp, #4
 800487a:	4616      	mov	r6, r2
 800487c:	4b0f      	ldr	r3, [pc, #60]	; (80048bc <sim7020PowerCycle+0xbc>)
 800487e:	f103 0710 	add.w	r7, r3, #16
 8004882:	4615      	mov	r5, r2
 8004884:	6818      	ldr	r0, [r3, #0]
 8004886:	6859      	ldr	r1, [r3, #4]
 8004888:	3308      	adds	r3, #8
 800488a:	c503      	stmia	r5!, {r0, r1}
 800488c:	42bb      	cmp	r3, r7
 800488e:	462a      	mov	r2, r5
 8004890:	d1f7      	bne.n	8004882 <sim7020PowerCycle+0x82>
 8004892:	6818      	ldr	r0, [r3, #0]
 8004894:	6028      	str	r0, [r5, #0]
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info1, strlen(info1), HAL_MAX_DELAY);
 8004896:	4630      	mov	r0, r6
 8004898:	f7fb fc72 	bl	8000180 <strlen>
 800489c:	f04f 33ff 	mov.w	r3, #4294967295
 80048a0:	b282      	uxth	r2, r0
 80048a2:	4631      	mov	r1, r6
 80048a4:	6820      	ldr	r0, [r4, #0]
 80048a6:	f7fe fd57 	bl	8003358 <HAL_UART_Transmit>
#endif
}
 80048aa:	b00d      	add	sp, #52	; 0x34
 80048ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ae:	bf00      	nop
 80048b0:	08005a6a 	.word	0x08005a6a
 80048b4:	2000078c 	.word	0x2000078c
 80048b8:	40020400 	.word	0x40020400
 80048bc:	08005a7f 	.word	0x08005a7f

080048c0 <sim7020Dtr>:

void sim7020Dtr()
{
 80048c0:	b510      	push	{r4, lr}
#if (SIM7020_DEBUG == 1)
    const char info[] = "DTR Start\r\n";
 80048c2:	4a17      	ldr	r2, [pc, #92]	; (8004920 <sim7020Dtr+0x60>)
{
 80048c4:	b086      	sub	sp, #24
    const char info[] = "DTR Start\r\n";
 80048c6:	6810      	ldr	r0, [r2, #0]
 80048c8:	6851      	ldr	r1, [r2, #4]
 80048ca:	ab03      	add	r3, sp, #12
 80048cc:	c303      	stmia	r3!, {r0, r1}
 80048ce:	6890      	ldr	r0, [r2, #8]
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80048d0:	4c14      	ldr	r4, [pc, #80]	; (8004924 <sim7020Dtr+0x64>)
    const char info[] = "DTR Start\r\n";
 80048d2:	6018      	str	r0, [r3, #0]
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80048d4:	a803      	add	r0, sp, #12
 80048d6:	f7fb fc53 	bl	8000180 <strlen>
 80048da:	f04f 33ff 	mov.w	r3, #4294967295
 80048de:	b282      	uxth	r2, r0
 80048e0:	a903      	add	r1, sp, #12
 80048e2:	6820      	ldr	r0, [r4, #0]
 80048e4:	f7fe fd38 	bl	8003358 <HAL_UART_Transmit>
#endif
    HAL_GPIO_WritePin(GPIOC, SIM_SLP_Pin, GPIO_PIN_RESET);
 80048e8:	2200      	movs	r2, #0
 80048ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048ee:	480e      	ldr	r0, [pc, #56]	; (8004928 <sim7020Dtr+0x68>)
 80048f0:	f7fd f806 	bl	8001900 <HAL_GPIO_WritePin>
#if (SIM7020_DEBUG == 1)
    const char info1[] = "DTR Done\r\n";
 80048f4:	466b      	mov	r3, sp
 80048f6:	4a0d      	ldr	r2, [pc, #52]	; (800492c <sim7020Dtr+0x6c>)
 80048f8:	6810      	ldr	r0, [r2, #0]
 80048fa:	6851      	ldr	r1, [r2, #4]
 80048fc:	c303      	stmia	r3!, {r0, r1}
 80048fe:	8911      	ldrh	r1, [r2, #8]
 8004900:	7a92      	ldrb	r2, [r2, #10]
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info1, strlen(info1), HAL_MAX_DELAY);
 8004902:	4668      	mov	r0, sp
    const char info1[] = "DTR Done\r\n";
 8004904:	8019      	strh	r1, [r3, #0]
 8004906:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info1, strlen(info1), HAL_MAX_DELAY);
 8004908:	f7fb fc3a 	bl	8000180 <strlen>
 800490c:	f04f 33ff 	mov.w	r3, #4294967295
 8004910:	b282      	uxth	r2, r0
 8004912:	4669      	mov	r1, sp
 8004914:	6820      	ldr	r0, [r4, #0]
 8004916:	f7fe fd1f 	bl	8003358 <HAL_UART_Transmit>
#endif
}
 800491a:	b006      	add	sp, #24
 800491c:	bd10      	pop	{r4, pc}
 800491e:	bf00      	nop
 8004920:	08005a2b 	.word	0x08005a2b
 8004924:	2000078c 	.word	0x2000078c
 8004928:	40020800 	.word	0x40020800
 800492c:	08005a37 	.word	0x08005a37

08004930 <writecommand>:
    }
    return (s);
}

int32_t writecommand(const char* cmd)
{
 8004930:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    uint8_t n = 0;
    ok_flag = 0;
 8004934:	2300      	movs	r3, #0
{
 8004936:	4607      	mov	r7, r0
    for (uint8_t i = 0; i < 100; i++) {
        rx_buffer[i] = 0;
 8004938:	4619      	mov	r1, r3
    ok_flag = 0;
 800493a:	4e30      	ldr	r6, [pc, #192]	; (80049fc <writecommand+0xcc>)
        rx_buffer[i] = 0;
 800493c:	4a30      	ldr	r2, [pc, #192]	; (8004a00 <writecommand+0xd0>)
    ok_flag = 0;
 800493e:	7033      	strb	r3, [r6, #0]
        rx_buffer[i] = 0;
 8004940:	5499      	strb	r1, [r3, r2]
 8004942:	3301      	adds	r3, #1
    for (uint8_t i = 0; i < 100; i++) {
 8004944:	2b64      	cmp	r3, #100	; 0x64
 8004946:	d1fb      	bne.n	8004940 <writecommand+0x10>
    }

#if (SIM7020_DEBUG == 1)
    const char info[] = "WRITE AT CMD\r\n";
 8004948:	466a      	mov	r2, sp
 800494a:	46e8      	mov	r8, sp
 800494c:	4b2d      	ldr	r3, [pc, #180]	; (8004a04 <writecommand+0xd4>)
 800494e:	f103 0508 	add.w	r5, r3, #8
 8004952:	4614      	mov	r4, r2
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	6859      	ldr	r1, [r3, #4]
 8004958:	3308      	adds	r3, #8
 800495a:	c403      	stmia	r4!, {r0, r1}
 800495c:	42ab      	cmp	r3, r5
 800495e:	4622      	mov	r2, r4
 8004960:	d1f7      	bne.n	8004952 <writecommand+0x22>
 8004962:	8899      	ldrh	r1, [r3, #4]
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	799b      	ldrb	r3, [r3, #6]
 8004968:	6020      	str	r0, [r4, #0]
 800496a:	80a1      	strh	r1, [r4, #4]
 800496c:	71a3      	strb	r3, [r4, #6]
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 800496e:	4640      	mov	r0, r8
 8004970:	f7fb fc06 	bl	8000180 <strlen>
 8004974:	4d24      	ldr	r5, [pc, #144]	; (8004a08 <writecommand+0xd8>)
 8004976:	b282      	uxth	r2, r0
 8004978:	4641      	mov	r1, r8
 800497a:	f04f 33ff 	mov.w	r3, #4294967295
 800497e:	6828      	ldr	r0, [r5, #0]
 8004980:	f7fe fcea 	bl	8003358 <HAL_UART_Transmit>
#endif

    HAL_UART_Transmit(sim7020_ctrl, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 8004984:	4638      	mov	r0, r7
 8004986:	f7fb fbfb 	bl	8000180 <strlen>
 800498a:	4c20      	ldr	r4, [pc, #128]	; (8004a0c <writecommand+0xdc>)
 800498c:	b282      	uxth	r2, r0
 800498e:	4639      	mov	r1, r7
 8004990:	f04f 33ff 	mov.w	r3, #4294967295
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	f7fe fcdf 	bl	8003358 <HAL_UART_Transmit>
    HAL_UART_Transmit(sim7020_ctrl, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 800499a:	f04f 33ff 	mov.w	r3, #4294967295
 800499e:	2202      	movs	r2, #2
 80049a0:	491b      	ldr	r1, [pc, #108]	; (8004a10 <writecommand+0xe0>)
 80049a2:	6820      	ldr	r0, [r4, #0]
 80049a4:	f7fe fcd8 	bl	8003358 <HAL_UART_Transmit>

    HAL_UART_Receive_IT(sim7020_ctrl, rx_data, 1);
 80049a8:	2201      	movs	r2, #1
 80049aa:	491a      	ldr	r1, [pc, #104]	; (8004a14 <writecommand+0xe4>)
 80049ac:	6820      	ldr	r0, [r4, #0]
 80049ae:	f7fe fd2e 	bl	800340e <HAL_UART_Receive_IT>

    while (n <= TimeOut) {
 80049b2:	2700      	movs	r7, #0
 80049b4:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8004a20 <writecommand+0xf0>
 80049b8:	f8d8 2000 	ldr.w	r2, [r8]
 80049bc:	b2fb      	uxtb	r3, r7
 80049be:	4293      	cmp	r3, r2
 80049c0:	dd08      	ble.n	80049d4 <writecommand+0xa4>
    }

    if (n >= TimeOut) {

#if (SIM7020_DEBUG == 1)
        HAL_UART_Transmit(sim7020_msg, (uint8_t*)"TIMEOUT\r\n", 10, HAL_MAX_DELAY);
 80049c2:	f04f 33ff 	mov.w	r3, #4294967295
 80049c6:	220a      	movs	r2, #10
 80049c8:	4913      	ldr	r1, [pc, #76]	; (8004a18 <writecommand+0xe8>)
 80049ca:	6828      	ldr	r0, [r5, #0]
 80049cc:	f7fe fcc4 	bl	8003358 <HAL_UART_Transmit>
#endif
        return 0;
 80049d0:	2000      	movs	r0, #0
 80049d2:	e00b      	b.n	80049ec <writecommand+0xbc>
        if (ok_flag == 1) {
 80049d4:	7834      	ldrb	r4, [r6, #0]
 80049d6:	3701      	adds	r7, #1
 80049d8:	2c01      	cmp	r4, #1
 80049da:	d10a      	bne.n	80049f2 <writecommand+0xc2>
            HAL_UART_Transmit(sim7020_msg, (uint8_t*)"OK FOUND\r\n", 10, HAL_MAX_DELAY);
 80049dc:	f04f 33ff 	mov.w	r3, #4294967295
 80049e0:	220a      	movs	r2, #10
 80049e2:	490e      	ldr	r1, [pc, #56]	; (8004a1c <writecommand+0xec>)
 80049e4:	6828      	ldr	r0, [r5, #0]
 80049e6:	f7fe fcb7 	bl	8003358 <HAL_UART_Transmit>
            return 1;
 80049ea:	4620      	mov	r0, r4
    }

    return 0;
}
 80049ec:	b004      	add	sp, #16
 80049ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            HAL_Delay(100);
 80049f2:	2064      	movs	r0, #100	; 0x64
 80049f4:	f7fc fad0 	bl	8000f98 <HAL_Delay>
 80049f8:	e7de      	b.n	80049b8 <writecommand+0x88>
 80049fa:	bf00      	nop
 80049fc:	200006f6 	.word	0x200006f6
 8004a00:	20000408 	.word	0x20000408
 8004a04:	08005bd0 	.word	0x08005bd0
 8004a08:	2000078c 	.word	0x2000078c
 8004a0c:	20000740 	.word	0x20000740
 8004a10:	08005a28 	.word	0x08005a28
 8004a14:	200006ea 	.word	0x200006ea
 8004a18:	08005bc6 	.word	0x08005bc6
 8004a1c:	08005bbb 	.word	0x08005bbb
 8004a20:	20000028 	.word	0x20000028

08004a24 <runscript>:
{
 8004a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a26:	b085      	sub	sp, #20
 8004a28:	4604      	mov	r4, r0
    const char info[] = "RUN SCRIPT \r\n";
 8004a2a:	466a      	mov	r2, sp
 8004a2c:	466e      	mov	r6, sp
 8004a2e:	4b15      	ldr	r3, [pc, #84]	; (8004a84 <runscript+0x60>)
 8004a30:	f103 0708 	add.w	r7, r3, #8
 8004a34:	4615      	mov	r5, r2
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	6859      	ldr	r1, [r3, #4]
 8004a3a:	3308      	adds	r3, #8
 8004a3c:	c503      	stmia	r5!, {r0, r1}
 8004a3e:	42bb      	cmp	r3, r7
 8004a40:	462a      	mov	r2, r5
 8004a42:	d1f7      	bne.n	8004a34 <runscript+0x10>
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	889b      	ldrh	r3, [r3, #4]
 8004a48:	6028      	str	r0, [r5, #0]
 8004a4a:	80ab      	strh	r3, [r5, #4]
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	f7fb fb97 	bl	8000180 <strlen>
 8004a52:	b282      	uxth	r2, r0
 8004a54:	480c      	ldr	r0, [pc, #48]	; (8004a88 <runscript+0x64>)
 8004a56:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5a:	4631      	mov	r1, r6
 8004a5c:	6800      	ldr	r0, [r0, #0]
 8004a5e:	f7fe fc7b 	bl	8003358 <HAL_UART_Transmit>
 8004a62:	3c04      	subs	r4, #4
    while (strlen(scrpt[t]) > 1) {
 8004a64:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8004a68:	4628      	mov	r0, r5
 8004a6a:	f7fb fb89 	bl	8000180 <strlen>
 8004a6e:	2801      	cmp	r0, #1
 8004a70:	d801      	bhi.n	8004a76 <runscript+0x52>
 8004a72:	2001      	movs	r0, #1
    return (s);
 8004a74:	e004      	b.n	8004a80 <runscript+0x5c>
        s = writecommand(scrpt[t]);
 8004a76:	4628      	mov	r0, r5
 8004a78:	f7ff ff5a 	bl	8004930 <writecommand>
        if (s == 1)
 8004a7c:	2801      	cmp	r0, #1
 8004a7e:	d0f1      	beq.n	8004a64 <runscript+0x40>
}
 8004a80:	b005      	add	sp, #20
 8004a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a84:	08005a1d 	.word	0x08005a1d
 8004a88:	2000078c 	.word	0x2000078c

08004a8c <readimei>:
{
 8004a8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char info[] = "READ IMEI\r\n";
 8004a8e:	4a17      	ldr	r2, [pc, #92]	; (8004aec <readimei+0x60>)
 8004a90:	ab01      	add	r3, sp, #4
 8004a92:	6810      	ldr	r0, [r2, #0]
 8004a94:	6851      	ldr	r1, [r2, #4]
 8004a96:	c303      	stmia	r3!, {r0, r1}
 8004a98:	6890      	ldr	r0, [r2, #8]
 8004a9a:	6018      	str	r0, [r3, #0]
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8004a9c:	a801      	add	r0, sp, #4
 8004a9e:	f7fb fb6f 	bl	8000180 <strlen>
 8004aa2:	b282      	uxth	r2, r0
 8004aa4:	4812      	ldr	r0, [pc, #72]	; (8004af0 <readimei+0x64>)
 8004aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aaa:	a901      	add	r1, sp, #4
 8004aac:	6800      	ldr	r0, [r0, #0]
 8004aae:	f7fe fc53 	bl	8003358 <HAL_UART_Transmit>
    s = runscript(NBgetimei);
 8004ab2:	4810      	ldr	r0, [pc, #64]	; (8004af4 <readimei+0x68>)
 8004ab4:	f7ff ffb6 	bl	8004a24 <runscript>
    if (s != 1)
 8004ab8:	2801      	cmp	r0, #1
 8004aba:	d003      	beq.n	8004ac4 <readimei+0x38>
        return (s);
 8004abc:	b2c0      	uxtb	r0, r0
}
 8004abe:	b005      	add	sp, #20
 8004ac0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	490c      	ldr	r1, [pc, #48]	; (8004af8 <readimei+0x6c>)
        while (buffer[t++] != '\n')
 8004ac8:	3301      	adds	r3, #1
 8004aca:	1858      	adds	r0, r3, r1
 8004acc:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8004ad0:	2a0a      	cmp	r2, #10
 8004ad2:	d1f9      	bne.n	8004ac8 <readimei+0x3c>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	4a09      	ldr	r2, [pc, #36]	; (8004afc <readimei+0x70>)
        while (buffer[t] != '\n')
 8004ad8:	5cc1      	ldrb	r1, [r0, r3]
 8004ada:	290a      	cmp	r1, #10
 8004adc:	d103      	bne.n	8004ae6 <readimei+0x5a>
        MyImei[n] = 0;
 8004ade:	2100      	movs	r1, #0
        return (s);
 8004ae0:	2001      	movs	r0, #1
        MyImei[n] = 0;
 8004ae2:	54d1      	strb	r1, [r2, r3]
        return (s);
 8004ae4:	e7eb      	b.n	8004abe <readimei+0x32>
            MyImei[n++] = buffer[t++];
 8004ae6:	54d1      	strb	r1, [r2, r3]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	e7f5      	b.n	8004ad8 <readimei+0x4c>
 8004aec:	080059f9 	.word	0x080059f9
 8004af0:	2000078c 	.word	0x2000078c
 8004af4:	20000010 	.word	0x20000010
 8004af8:	20000470 	.word	0x20000470
 8004afc:	20000790 	.word	0x20000790

08004b00 <readmfr>:
{
 8004b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char info[] = "READ MFR\r\n";
 8004b02:	4a18      	ldr	r2, [pc, #96]	; (8004b64 <readmfr+0x64>)
 8004b04:	ab01      	add	r3, sp, #4
 8004b06:	6810      	ldr	r0, [r2, #0]
 8004b08:	6851      	ldr	r1, [r2, #4]
 8004b0a:	c303      	stmia	r3!, {r0, r1}
 8004b0c:	8911      	ldrh	r1, [r2, #8]
 8004b0e:	7a92      	ldrb	r2, [r2, #10]
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8004b10:	a801      	add	r0, sp, #4
    const char info[] = "READ MFR\r\n";
 8004b12:	8019      	strh	r1, [r3, #0]
 8004b14:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8004b16:	f7fb fb33 	bl	8000180 <strlen>
 8004b1a:	b282      	uxth	r2, r0
 8004b1c:	4812      	ldr	r0, [pc, #72]	; (8004b68 <readmfr+0x68>)
 8004b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b22:	a901      	add	r1, sp, #4
 8004b24:	6800      	ldr	r0, [r0, #0]
 8004b26:	f7fe fc17 	bl	8003358 <HAL_UART_Transmit>
    s = runscript(NBgetmfr);
 8004b2a:	4810      	ldr	r0, [pc, #64]	; (8004b6c <readmfr+0x6c>)
 8004b2c:	f7ff ff7a 	bl	8004a24 <runscript>
    if (s != 1)
 8004b30:	2801      	cmp	r0, #1
 8004b32:	d003      	beq.n	8004b3c <readmfr+0x3c>
        return (s);
 8004b34:	b2c0      	uxtb	r0, r0
}
 8004b36:	b005      	add	sp, #20
 8004b38:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	490c      	ldr	r1, [pc, #48]	; (8004b70 <readmfr+0x70>)
        while (buffer[t++] != '\n')
 8004b40:	3301      	adds	r3, #1
 8004b42:	1858      	adds	r0, r3, r1
 8004b44:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8004b48:	2a0a      	cmp	r2, #10
 8004b4a:	d1f9      	bne.n	8004b40 <readmfr+0x40>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	4a09      	ldr	r2, [pc, #36]	; (8004b74 <readmfr+0x74>)
        while (buffer[t] != '\n')
 8004b50:	5cc1      	ldrb	r1, [r0, r3]
 8004b52:	290a      	cmp	r1, #10
 8004b54:	d103      	bne.n	8004b5e <readmfr+0x5e>
        MyMfr[n] = 0;
 8004b56:	2100      	movs	r1, #0
        return (s);
 8004b58:	2001      	movs	r0, #1
        MyMfr[n] = 0;
 8004b5a:	54d1      	strb	r1, [r2, r3]
        return (s);
 8004b5c:	e7eb      	b.n	8004b36 <readmfr+0x36>
            MyMfr[n++] = buffer[t++];
 8004b5e:	54d1      	strb	r1, [r2, r3]
 8004b60:	3301      	adds	r3, #1
 8004b62:	e7f5      	b.n	8004b50 <readmfr+0x50>
 8004b64:	08005a05 	.word	0x08005a05
 8004b68:	2000078c 	.word	0x2000078c
 8004b6c:	20000018 	.word	0x20000018
 8004b70:	20000470 	.word	0x20000470
 8004b74:	2000076c 	.word	0x2000076c

08004b78 <readcicc>:
{
 8004b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char info[] = "READ CICC\r\n";
 8004b7a:	4a17      	ldr	r2, [pc, #92]	; (8004bd8 <readcicc+0x60>)
 8004b7c:	ab01      	add	r3, sp, #4
 8004b7e:	6810      	ldr	r0, [r2, #0]
 8004b80:	6851      	ldr	r1, [r2, #4]
 8004b82:	c303      	stmia	r3!, {r0, r1}
 8004b84:	6890      	ldr	r0, [r2, #8]
 8004b86:	6018      	str	r0, [r3, #0]
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8004b88:	a801      	add	r0, sp, #4
 8004b8a:	f7fb faf9 	bl	8000180 <strlen>
 8004b8e:	b282      	uxth	r2, r0
 8004b90:	4812      	ldr	r0, [pc, #72]	; (8004bdc <readcicc+0x64>)
 8004b92:	f04f 33ff 	mov.w	r3, #4294967295
 8004b96:	a901      	add	r1, sp, #4
 8004b98:	6800      	ldr	r0, [r0, #0]
 8004b9a:	f7fe fbdd 	bl	8003358 <HAL_UART_Transmit>
    s = runscript(NBgetcicc);
 8004b9e:	4810      	ldr	r0, [pc, #64]	; (8004be0 <readcicc+0x68>)
 8004ba0:	f7ff ff40 	bl	8004a24 <runscript>
    if (s != 1)
 8004ba4:	2801      	cmp	r0, #1
 8004ba6:	d003      	beq.n	8004bb0 <readcicc+0x38>
        return (s);
 8004ba8:	b2c0      	uxtb	r0, r0
}
 8004baa:	b005      	add	sp, #20
 8004bac:	f85d fb04 	ldr.w	pc, [sp], #4
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	490c      	ldr	r1, [pc, #48]	; (8004be4 <readcicc+0x6c>)
        while (buffer[t++] != '\n')
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	1858      	adds	r0, r3, r1
 8004bb8:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8004bbc:	2a0a      	cmp	r2, #10
 8004bbe:	d1f9      	bne.n	8004bb4 <readcicc+0x3c>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	4a09      	ldr	r2, [pc, #36]	; (8004be8 <readcicc+0x70>)
        while (buffer[t] != '\n')
 8004bc4:	5cc1      	ldrb	r1, [r0, r3]
 8004bc6:	290a      	cmp	r1, #10
 8004bc8:	d103      	bne.n	8004bd2 <readcicc+0x5a>
        MyCicc[n] = 0;
 8004bca:	2100      	movs	r1, #0
        return (s);
 8004bcc:	2001      	movs	r0, #1
        MyCicc[n] = 0;
 8004bce:	54d1      	strb	r1, [r2, r3]
        return (s);
 8004bd0:	e7eb      	b.n	8004baa <readcicc+0x32>
            MyCicc[n++] = buffer[t++];
 8004bd2:	54d1      	strb	r1, [r2, r3]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	e7f5      	b.n	8004bc4 <readcicc+0x4c>
 8004bd8:	080059ed 	.word	0x080059ed
 8004bdc:	2000078c 	.word	0x2000078c
 8004be0:	20000008 	.word	0x20000008
 8004be4:	20000470 	.word	0x20000470
 8004be8:	20000744 	.word	0x20000744

08004bec <readmodel>:
{
 8004bec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    const char info[] = "READ MODEL\r\n";
 8004bee:	466a      	mov	r2, sp
 8004bf0:	466d      	mov	r5, sp
 8004bf2:	4b1b      	ldr	r3, [pc, #108]	; (8004c60 <readmodel+0x74>)
 8004bf4:	f103 0608 	add.w	r6, r3, #8
 8004bf8:	4614      	mov	r4, r2
 8004bfa:	6818      	ldr	r0, [r3, #0]
 8004bfc:	6859      	ldr	r1, [r3, #4]
 8004bfe:	3308      	adds	r3, #8
 8004c00:	c403      	stmia	r4!, {r0, r1}
 8004c02:	42b3      	cmp	r3, r6
 8004c04:	4622      	mov	r2, r4
 8004c06:	d1f7      	bne.n	8004bf8 <readmodel+0xc>
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	791b      	ldrb	r3, [r3, #4]
 8004c0c:	6020      	str	r0, [r4, #0]
 8004c0e:	7123      	strb	r3, [r4, #4]
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8004c10:	4628      	mov	r0, r5
 8004c12:	f7fb fab5 	bl	8000180 <strlen>
 8004c16:	b282      	uxth	r2, r0
 8004c18:	4812      	ldr	r0, [pc, #72]	; (8004c64 <readmodel+0x78>)
 8004c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1e:	4629      	mov	r1, r5
 8004c20:	6800      	ldr	r0, [r0, #0]
 8004c22:	f7fe fb99 	bl	8003358 <HAL_UART_Transmit>
    s = runscript(NBgetmodel);
 8004c26:	4810      	ldr	r0, [pc, #64]	; (8004c68 <readmodel+0x7c>)
 8004c28:	f7ff fefc 	bl	8004a24 <runscript>
    if (s != 1)
 8004c2c:	2801      	cmp	r0, #1
 8004c2e:	d002      	beq.n	8004c36 <readmodel+0x4a>
        return (s);
 8004c30:	b2c0      	uxtb	r0, r0
}
 8004c32:	b004      	add	sp, #16
 8004c34:	bd70      	pop	{r4, r5, r6, pc}
 8004c36:	2300      	movs	r3, #0
 8004c38:	490c      	ldr	r1, [pc, #48]	; (8004c6c <readmodel+0x80>)
        while (buffer[t++] != '\n')
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	1858      	adds	r0, r3, r1
 8004c3e:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8004c42:	2a0a      	cmp	r2, #10
 8004c44:	d1f9      	bne.n	8004c3a <readmodel+0x4e>
 8004c46:	2300      	movs	r3, #0
 8004c48:	4a09      	ldr	r2, [pc, #36]	; (8004c70 <readmodel+0x84>)
        while (buffer[t] != '\n')
 8004c4a:	5cc1      	ldrb	r1, [r0, r3]
 8004c4c:	290a      	cmp	r1, #10
 8004c4e:	d103      	bne.n	8004c58 <readmodel+0x6c>
        MyModel[n] = 0;
 8004c50:	2100      	movs	r1, #0
        return (s);
 8004c52:	2001      	movs	r0, #1
        MyModel[n] = 0;
 8004c54:	54d1      	strb	r1, [r2, r3]
        return (s);
 8004c56:	e7ec      	b.n	8004c32 <readmodel+0x46>
            MyModel[n++] = buffer[t++];
 8004c58:	54d1      	strb	r1, [r2, r3]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	e7f5      	b.n	8004c4a <readmodel+0x5e>
 8004c5e:	bf00      	nop
 8004c60:	08005a10 	.word	0x08005a10
 8004c64:	2000078c 	.word	0x2000078c
 8004c68:	20000020 	.word	0x20000020
 8004c6c:	20000470 	.word	0x20000470
 8004c70:	2000075c 	.word	0x2000075c

08004c74 <sim7020HardwareInfo>:

void sim7020HardwareInfo()
{
 8004c74:	b570      	push	{r4, r5, r6, lr}
 8004c76:	b08c      	sub	sp, #48	; 0x30
    readimei();
 8004c78:	f7ff ff08 	bl	8004a8c <readimei>
    readmfr();
 8004c7c:	f7ff ff40 	bl	8004b00 <readmfr>
    readcicc();
 8004c80:	f7ff ff7a 	bl	8004b78 <readcicc>
    readmodel();
 8004c84:	f7ff ffb2 	bl	8004bec <readmodel>
#if (SIM7020_DEBUG == 1)
    const char info[] = "MY MODEL: ";
 8004c88:	4a48      	ldr	r2, [pc, #288]	; (8004dac <sim7020HardwareInfo+0x138>)
 8004c8a:	ab09      	add	r3, sp, #36	; 0x24
 8004c8c:	6810      	ldr	r0, [r2, #0]
 8004c8e:	6851      	ldr	r1, [r2, #4]
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8004c90:	4c47      	ldr	r4, [pc, #284]	; (8004db0 <sim7020HardwareInfo+0x13c>)
    const char info[] = "MY MODEL: ";
 8004c92:	c303      	stmia	r3!, {r0, r1}
 8004c94:	8911      	ldrh	r1, [r2, #8]
 8004c96:	7a92      	ldrb	r2, [r2, #10]
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8004c98:	a809      	add	r0, sp, #36	; 0x24
    const char info[] = "MY MODEL: ";
 8004c9a:	8019      	strh	r1, [r3, #0]
 8004c9c:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8004c9e:	f7fb fa6f 	bl	8000180 <strlen>
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)MyModel, strlen(MyModel), HAL_MAX_DELAY);
 8004ca2:	4d44      	ldr	r5, [pc, #272]	; (8004db4 <sim7020HardwareInfo+0x140>)
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8004ca4:	b282      	uxth	r2, r0
 8004ca6:	a909      	add	r1, sp, #36	; 0x24
 8004ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cac:	6820      	ldr	r0, [r4, #0]
 8004cae:	f7fe fb53 	bl	8003358 <HAL_UART_Transmit>
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)MyModel, strlen(MyModel), HAL_MAX_DELAY);
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	f7fb fa64 	bl	8000180 <strlen>
 8004cb8:	4629      	mov	r1, r5
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8004cba:	4d3f      	ldr	r5, [pc, #252]	; (8004db8 <sim7020HardwareInfo+0x144>)
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)MyModel, strlen(MyModel), HAL_MAX_DELAY);
 8004cbc:	b282      	uxth	r2, r0
 8004cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc2:	6820      	ldr	r0, [r4, #0]
 8004cc4:	f7fe fb48 	bl	8003358 <HAL_UART_Transmit>
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8004cc8:	4629      	mov	r1, r5
 8004cca:	f04f 33ff 	mov.w	r3, #4294967295
 8004cce:	2202      	movs	r2, #2
 8004cd0:	6820      	ldr	r0, [r4, #0]
 8004cd2:	f7fe fb41 	bl	8003358 <HAL_UART_Transmit>
    const char info1[] = "MY MFR: ";
 8004cd6:	466b      	mov	r3, sp
 8004cd8:	4a38      	ldr	r2, [pc, #224]	; (8004dbc <sim7020HardwareInfo+0x148>)
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info1, strlen(info1), HAL_MAX_DELAY);
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)MyMfr, strlen(MyMfr), HAL_MAX_DELAY);
 8004cda:	4e39      	ldr	r6, [pc, #228]	; (8004dc0 <sim7020HardwareInfo+0x14c>)
    const char info1[] = "MY MFR: ";
 8004cdc:	6851      	ldr	r1, [r2, #4]
 8004cde:	6810      	ldr	r0, [r2, #0]
 8004ce0:	7a12      	ldrb	r2, [r2, #8]
 8004ce2:	c303      	stmia	r3!, {r0, r1}
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info1, strlen(info1), HAL_MAX_DELAY);
 8004ce4:	4668      	mov	r0, sp
    const char info1[] = "MY MFR: ";
 8004ce6:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info1, strlen(info1), HAL_MAX_DELAY);
 8004ce8:	f7fb fa4a 	bl	8000180 <strlen>
 8004cec:	4669      	mov	r1, sp
 8004cee:	b282      	uxth	r2, r0
 8004cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf4:	6820      	ldr	r0, [r4, #0]
 8004cf6:	f7fe fb2f 	bl	8003358 <HAL_UART_Transmit>
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)MyMfr, strlen(MyMfr), HAL_MAX_DELAY);
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f7fb fa40 	bl	8000180 <strlen>
 8004d00:	4631      	mov	r1, r6
 8004d02:	b282      	uxth	r2, r0
 8004d04:	f04f 33ff 	mov.w	r3, #4294967295
 8004d08:	6820      	ldr	r0, [r4, #0]
 8004d0a:	f7fe fb25 	bl	8003358 <HAL_UART_Transmit>
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8004d0e:	4629      	mov	r1, r5
 8004d10:	f04f 33ff 	mov.w	r3, #4294967295
 8004d14:	2202      	movs	r2, #2
 8004d16:	6820      	ldr	r0, [r4, #0]
 8004d18:	f7fe fb1e 	bl	8003358 <HAL_UART_Transmit>
    const char info2[] = "MY CICC: ";
 8004d1c:	4a29      	ldr	r2, [pc, #164]	; (8004dc4 <sim7020HardwareInfo+0x150>)
 8004d1e:	ab03      	add	r3, sp, #12
 8004d20:	6851      	ldr	r1, [r2, #4]
 8004d22:	6810      	ldr	r0, [r2, #0]
 8004d24:	8912      	ldrh	r2, [r2, #8]
 8004d26:	c303      	stmia	r3!, {r0, r1}
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info2, strlen(info2), HAL_MAX_DELAY);
 8004d28:	a803      	add	r0, sp, #12
    const char info2[] = "MY CICC: ";
 8004d2a:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info2, strlen(info2), HAL_MAX_DELAY);
 8004d2c:	f7fb fa28 	bl	8000180 <strlen>
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)MyCicc, strlen(MyCicc), HAL_MAX_DELAY);
 8004d30:	4e25      	ldr	r6, [pc, #148]	; (8004dc8 <sim7020HardwareInfo+0x154>)
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info2, strlen(info2), HAL_MAX_DELAY);
 8004d32:	b282      	uxth	r2, r0
 8004d34:	a903      	add	r1, sp, #12
 8004d36:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3a:	6820      	ldr	r0, [r4, #0]
 8004d3c:	f7fe fb0c 	bl	8003358 <HAL_UART_Transmit>
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)MyCicc, strlen(MyCicc), HAL_MAX_DELAY);
 8004d40:	4630      	mov	r0, r6
 8004d42:	f7fb fa1d 	bl	8000180 <strlen>
 8004d46:	4631      	mov	r1, r6
 8004d48:	b282      	uxth	r2, r0
 8004d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d4e:	6820      	ldr	r0, [r4, #0]
 8004d50:	f7fe fb02 	bl	8003358 <HAL_UART_Transmit>
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8004d54:	4629      	mov	r1, r5
 8004d56:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	6820      	ldr	r0, [r4, #0]
 8004d5e:	f7fe fafb 	bl	8003358 <HAL_UART_Transmit>
    const char info3[] = "MY IMEI: ";
 8004d62:	4a1a      	ldr	r2, [pc, #104]	; (8004dcc <sim7020HardwareInfo+0x158>)
 8004d64:	ab06      	add	r3, sp, #24
 8004d66:	6851      	ldr	r1, [r2, #4]
 8004d68:	6810      	ldr	r0, [r2, #0]
 8004d6a:	8912      	ldrh	r2, [r2, #8]
 8004d6c:	c303      	stmia	r3!, {r0, r1}
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info3, strlen(info3), HAL_MAX_DELAY);
 8004d6e:	a806      	add	r0, sp, #24
    const char info3[] = "MY IMEI: ";
 8004d70:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info3, strlen(info3), HAL_MAX_DELAY);
 8004d72:	f7fb fa05 	bl	8000180 <strlen>
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)MyImei, strlen(MyImei), HAL_MAX_DELAY);
 8004d76:	4e16      	ldr	r6, [pc, #88]	; (8004dd0 <sim7020HardwareInfo+0x15c>)
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)info3, strlen(info3), HAL_MAX_DELAY);
 8004d78:	b282      	uxth	r2, r0
 8004d7a:	a906      	add	r1, sp, #24
 8004d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d80:	6820      	ldr	r0, [r4, #0]
 8004d82:	f7fe fae9 	bl	8003358 <HAL_UART_Transmit>
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)MyImei, strlen(MyImei), HAL_MAX_DELAY);
 8004d86:	4630      	mov	r0, r6
 8004d88:	f7fb f9fa 	bl	8000180 <strlen>
 8004d8c:	4631      	mov	r1, r6
 8004d8e:	b282      	uxth	r2, r0
 8004d90:	f04f 33ff 	mov.w	r3, #4294967295
 8004d94:	6820      	ldr	r0, [r4, #0]
 8004d96:	f7fe fadf 	bl	8003358 <HAL_UART_Transmit>
    HAL_UART_Transmit(sim7020_msg, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8004d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d9e:	2202      	movs	r2, #2
 8004da0:	4629      	mov	r1, r5
 8004da2:	6820      	ldr	r0, [r4, #0]
 8004da4:	f7fe fad8 	bl	8003358 <HAL_UART_Transmit>
#endif
}
 8004da8:	b00c      	add	sp, #48	; 0x30
 8004daa:	bd70      	pop	{r4, r5, r6, pc}
 8004dac:	08005a42 	.word	0x08005a42
 8004db0:	2000078c 	.word	0x2000078c
 8004db4:	2000075c 	.word	0x2000075c
 8004db8:	08005a28 	.word	0x08005a28
 8004dbc:	08005a4d 	.word	0x08005a4d
 8004dc0:	2000076c 	.word	0x2000076c
 8004dc4:	08005a56 	.word	0x08005a56
 8004dc8:	20000744 	.word	0x20000744
 8004dcc:	08005a60 	.word	0x08005a60
 8004dd0:	20000790 	.word	0x20000790

08004dd4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <HAL_MspInit+0x40>)
{
 8004dd6:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8004dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dda:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004dde:	625a      	str	r2, [r3, #36]	; 0x24
 8004de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004de2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004de6:	9201      	str	r2, [sp, #4]
 8004de8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dea:	6a1a      	ldr	r2, [r3, #32]
 8004dec:	f042 0201 	orr.w	r2, r2, #1
 8004df0:	621a      	str	r2, [r3, #32]
 8004df2:	6a1a      	ldr	r2, [r3, #32]
 8004df4:	f002 0201 	and.w	r2, r2, #1
 8004df8:	9202      	str	r2, [sp, #8]
 8004dfa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dfe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e02:	625a      	str	r2, [r3, #36]	; 0x24
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0a:	9303      	str	r3, [sp, #12]
 8004e0c:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e0e:	b004      	add	sp, #16
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40023800 	.word	0x40023800

08004e18 <NMI_Handler>:
 8004e18:	4770      	bx	lr

08004e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e1a:	e7fe      	b.n	8004e1a <HardFault_Handler>

08004e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e1c:	e7fe      	b.n	8004e1c <MemManage_Handler>

08004e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e1e:	e7fe      	b.n	8004e1e <BusFault_Handler>

08004e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e20:	e7fe      	b.n	8004e20 <UsageFault_Handler>

08004e22 <SVC_Handler>:
 8004e22:	4770      	bx	lr

08004e24 <DebugMon_Handler>:
 8004e24:	4770      	bx	lr

08004e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e26:	4770      	bx	lr

08004e28 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e28:	f7fc b8a8 	b.w	8000f7c <HAL_IncTick>

08004e2c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004e2c:	4801      	ldr	r0, [pc, #4]	; (8004e34 <DMA1_Channel1_IRQHandler+0x8>)
 8004e2e:	f7fc bc5d 	b.w	80016ec <HAL_DMA_IRQHandler>
 8004e32:	bf00      	nop
 8004e34:	200000c8 	.word	0x200000c8

08004e38 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004e38:	4801      	ldr	r0, [pc, #4]	; (8004e40 <USART2_IRQHandler+0x8>)
 8004e3a:	f7fe bb1c 	b.w	8003476 <HAL_UART_IRQHandler>
 8004e3e:	bf00      	nop
 8004e40:	200007f8 	.word	0x200007f8

08004e44 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004e44:	4801      	ldr	r0, [pc, #4]	; (8004e4c <USART3_IRQHandler+0x8>)
 8004e46:	f7fe bb16 	b.w	8003476 <HAL_UART_IRQHandler>
 8004e4a:	bf00      	nop
 8004e4c:	200007b8 	.word	0x200007b8

08004e50 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004e50:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004e52:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <_sbrk+0x2c>)
{
 8004e54:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004e56:	6819      	ldr	r1, [r3, #0]
 8004e58:	b909      	cbnz	r1, 8004e5e <_sbrk+0xe>
		heap_end = &end;
 8004e5a:	4909      	ldr	r1, [pc, #36]	; (8004e80 <_sbrk+0x30>)
 8004e5c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8004e5e:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8004e60:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004e62:	4402      	add	r2, r0
 8004e64:	428a      	cmp	r2, r1
 8004e66:	d906      	bls.n	8004e76 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004e68:	f000 f932 	bl	80050d0 <__errno>
 8004e6c:	230c      	movs	r3, #12
 8004e6e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004e70:	f04f 30ff 	mov.w	r0, #4294967295
 8004e74:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8004e76:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004e78:	bd08      	pop	{r3, pc}
 8004e7a:	bf00      	nop
 8004e7c:	200000b8 	.word	0x200000b8
 8004e80:	2000083c 	.word	0x2000083c

08004e84 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8004e84:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <SystemInit+0x3c>)
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e8c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8004e8e:	6899      	ldr	r1, [r3, #8]
 8004e90:	4a0c      	ldr	r2, [pc, #48]	; (8004ec4 <SystemInit+0x40>)
 8004e92:	400a      	ands	r2, r1
 8004e94:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8004e9c:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8004ea0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ea8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8004eb0:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004eb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004eba:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <SystemInit+0x44>)
 8004ebc:	609a      	str	r2, [r3, #8]
 8004ebe:	4770      	bx	lr
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	88ffc00c 	.word	0x88ffc00c
 8004ec8:	e000ed00 	.word	0xe000ed00

08004ecc <troykaI2CHub_init>:
uint8_t _i2cHubAddr;
I2C_HandleTypeDef 	*troykaI2CHub_i2c;

void troykaI2CHub_init(I2C_HandleTypeDef *hi2c)
{
	troykaI2CHub_i2c = hi2c;
 8004ecc:	4b01      	ldr	r3, [pc, #4]	; (8004ed4 <troykaI2CHub_init+0x8>)
 8004ece:	6018      	str	r0, [r3, #0]
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	200007b0 	.word	0x200007b0

08004ed8 <troykaI2CHub_setBusChannel>:
}


_Bool troykaI2CHub_setBusChannel(uint8_t channel)
{
    if (channel >= COUNT_CHANNEL) {
 8004ed8:	2807      	cmp	r0, #7
{
 8004eda:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (channel >= COUNT_CHANNEL) {
 8004edc:	d812      	bhi.n	8004f04 <troykaI2CHub_setBusChannel+0x2c>
        return 0;
    }

    uint8_t tmp = channel | ENABLE_MASK;
	if(HAL_OK == HAL_I2C_Master_Transmit(troykaI2CHub_i2c, DEFAULT_I2C_HUB_ADDRESS, &tmp, 1, 100))
 8004ede:	2364      	movs	r3, #100	; 0x64
    uint8_t tmp = channel | ENABLE_MASK;
 8004ee0:	f040 0008 	orr.w	r0, r0, #8
 8004ee4:	aa04      	add	r2, sp, #16
 8004ee6:	f802 0d01 	strb.w	r0, [r2, #-1]!
	if(HAL_OK == HAL_I2C_Master_Transmit(troykaI2CHub_i2c, DEFAULT_I2C_HUB_ADDRESS, &tmp, 1, 100))
 8004eea:	4807      	ldr	r0, [pc, #28]	; (8004f08 <troykaI2CHub_setBusChannel+0x30>)
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	21e0      	movs	r1, #224	; 0xe0
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	6800      	ldr	r0, [r0, #0]
 8004ef4:	f7fc fe94 	bl	8001c20 <HAL_I2C_Master_Transmit>
 8004ef8:	fab0 f080 	clz	r0, r0
 8004efc:	0940      	lsrs	r0, r0, #5
		return 1;

	return 0;
}
 8004efe:	b005      	add	sp, #20
 8004f00:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
 8004f04:	2000      	movs	r0, #0
 8004f06:	e7fa      	b.n	8004efe <troykaI2CHub_setBusChannel+0x26>
 8004f08:	200007b0 	.word	0x200007b0

08004f0c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004f0c:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8004f0e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart2.Instance = USART2;
 8004f12:	480a      	ldr	r0, [pc, #40]	; (8004f3c <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8004f14:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <MX_USART2_UART_Init+0x34>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f16:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8004f18:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f1c:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f1e:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f20:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f22:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f24:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f26:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f28:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f2a:	f7fe f9e9 	bl	8003300 <HAL_UART_Init>
 8004f2e:	b118      	cbz	r0, 8004f38 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8004f30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004f34:	f7ff bbfe 	b.w	8004734 <Error_Handler>
 8004f38:	bd08      	pop	{r3, pc}
 8004f3a:	bf00      	nop
 8004f3c:	200007f8 	.word	0x200007f8
 8004f40:	40004400 	.word	0x40004400

08004f44 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004f44:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 8004f46:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart3.Instance = USART3;
 8004f4a:	480a      	ldr	r0, [pc, #40]	; (8004f74 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <MX_USART3_UART_Init+0x34>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004f4e:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8004f50:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004f54:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004f56:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004f58:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004f5a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004f5c:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f5e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f60:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004f62:	f7fe f9cd 	bl	8003300 <HAL_UART_Init>
 8004f66:	b118      	cbz	r0, 8004f70 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8004f68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004f6c:	f7ff bbe2 	b.w	8004734 <Error_Handler>
 8004f70:	bd08      	pop	{r3, pc}
 8004f72:	bf00      	nop
 8004f74:	200007b8 	.word	0x200007b8
 8004f78:	40004800 	.word	0x40004800

08004f7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f7c:	2214      	movs	r2, #20
{
 8004f7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f80:	4604      	mov	r4, r0
 8004f82:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f84:	eb0d 0002 	add.w	r0, sp, r2
 8004f88:	2100      	movs	r1, #0
 8004f8a:	f000 f8cb 	bl	8005124 <memset>
  if(uartHandle->Instance==USART2)
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	4a36      	ldr	r2, [pc, #216]	; (800506c <HAL_UART_MspInit+0xf0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d12a      	bne.n	8004fec <HAL_UART_MspInit+0x70>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f96:	4b36      	ldr	r3, [pc, #216]	; (8005070 <HAL_UART_MspInit+0xf4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f98:	a905      	add	r1, sp, #20
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f9c:	4835      	ldr	r0, [pc, #212]	; (8005074 <HAL_UART_MspInit+0xf8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f9e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004fa2:	625a      	str	r2, [r3, #36]	; 0x24
 8004fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fa6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004faa:	9200      	str	r2, [sp, #0]
 8004fac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	f042 0201 	orr.w	r2, r2, #1
 8004fb4:	61da      	str	r2, [r3, #28]
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	9301      	str	r3, [sp, #4]
 8004fbe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004fc0:	230c      	movs	r3, #12
 8004fc2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004fd0:	2307      	movs	r3, #7
 8004fd2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fd4:	f7fc fbd2 	bl	800177c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2026      	movs	r0, #38	; 0x26
 8004fdc:	4611      	mov	r1, r2
 8004fde:	f7fc fa93 	bl	8001508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004fe2:	2026      	movs	r0, #38	; 0x26
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004fe4:	f7fc fac4 	bl	8001570 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004fe8:	b00b      	add	sp, #44	; 0x2c
 8004fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(uartHandle->Instance==USART3)
 8004fec:	4a22      	ldr	r2, [pc, #136]	; (8005078 <HAL_UART_MspInit+0xfc>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d1fa      	bne.n	8004fe8 <HAL_UART_MspInit+0x6c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004ff2:	4b1f      	ldr	r3, [pc, #124]	; (8005070 <HAL_UART_MspInit+0xf4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff4:	2702      	movs	r7, #2
    __HAL_RCC_USART3_CLK_ENABLE();
 8004ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ff8:	2601      	movs	r6, #1
    __HAL_RCC_USART3_CLK_ENABLE();
 8004ffa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004ffe:	625a      	str	r2, [r3, #36]	; 0x24
 8005000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005002:	2503      	movs	r5, #3
    __HAL_RCC_USART3_CLK_ENABLE();
 8005004:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8005008:	9202      	str	r2, [sp, #8]
 800500a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800500c:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800500e:	2407      	movs	r4, #7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005010:	f042 0202 	orr.w	r2, r2, #2
 8005014:	61da      	str	r2, [r3, #28]
 8005016:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005018:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800501a:	f002 0202 	and.w	r2, r2, #2
 800501e:	9203      	str	r2, [sp, #12]
 8005020:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005022:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005024:	4815      	ldr	r0, [pc, #84]	; (800507c <HAL_UART_MspInit+0x100>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005026:	f042 0204 	orr.w	r2, r2, #4
 800502a:	61da      	str	r2, [r3, #28]
 800502c:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502e:	9706      	str	r7, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	9304      	str	r3, [sp, #16]
 8005036:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005038:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800503c:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800503e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005040:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005042:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005044:	f7fc fb9a 	bl	800177c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005048:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800504c:	a905      	add	r1, sp, #20
 800504e:	480c      	ldr	r0, [pc, #48]	; (8005080 <HAL_UART_MspInit+0x104>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005050:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005052:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005054:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005056:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005058:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800505a:	f7fc fb8f 	bl	800177c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800505e:	2200      	movs	r2, #0
 8005060:	2027      	movs	r0, #39	; 0x27
 8005062:	4611      	mov	r1, r2
 8005064:	f7fc fa50 	bl	8001508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005068:	2027      	movs	r0, #39	; 0x27
 800506a:	e7bb      	b.n	8004fe4 <HAL_UART_MspInit+0x68>
 800506c:	40004400 	.word	0x40004400
 8005070:	40023800 	.word	0x40023800
 8005074:	40020000 	.word	0x40020000
 8005078:	40004800 	.word	0x40004800
 800507c:	40020400 	.word	0x40020400
 8005080:	40020800 	.word	0x40020800

08005084 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005084:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005086:	e003      	b.n	8005090 <LoopCopyDataInit>

08005088 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005088:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800508a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800508c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800508e:	3104      	adds	r1, #4

08005090 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005090:	480a      	ldr	r0, [pc, #40]	; (80050bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005092:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005094:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005096:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005098:	d3f6      	bcc.n	8005088 <CopyDataInit>
  ldr r2, =_sbss
 800509a:	4a0a      	ldr	r2, [pc, #40]	; (80050c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800509c:	e002      	b.n	80050a4 <LoopFillZerobss>

0800509e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800509e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80050a0:	f842 3b04 	str.w	r3, [r2], #4

080050a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80050a4:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80050a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80050a8:	d3f9      	bcc.n	800509e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80050aa:	f7ff feeb 	bl	8004e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050ae:	f000 f815 	bl	80050dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80050b2:	f7ff fa35 	bl	8004520 <main>
  bx lr
 80050b6:	4770      	bx	lr
  ldr r3, =_sidata
 80050b8:	08005c3c 	.word	0x08005c3c
  ldr r0, =_sdata
 80050bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80050c0:	20000094 	.word	0x20000094
  ldr r2, =_sbss
 80050c4:	20000098 	.word	0x20000098
  ldr r3, = _ebss
 80050c8:	2000083c 	.word	0x2000083c

080050cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80050cc:	e7fe      	b.n	80050cc <ADC1_IRQHandler>
	...

080050d0 <__errno>:
 80050d0:	4b01      	ldr	r3, [pc, #4]	; (80050d8 <__errno+0x8>)
 80050d2:	6818      	ldr	r0, [r3, #0]
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	20000030 	.word	0x20000030

080050dc <__libc_init_array>:
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	2500      	movs	r5, #0
 80050e0:	4e0c      	ldr	r6, [pc, #48]	; (8005114 <__libc_init_array+0x38>)
 80050e2:	4c0d      	ldr	r4, [pc, #52]	; (8005118 <__libc_init_array+0x3c>)
 80050e4:	1ba4      	subs	r4, r4, r6
 80050e6:	10a4      	asrs	r4, r4, #2
 80050e8:	42a5      	cmp	r5, r4
 80050ea:	d109      	bne.n	8005100 <__libc_init_array+0x24>
 80050ec:	f000 fc64 	bl	80059b8 <_init>
 80050f0:	2500      	movs	r5, #0
 80050f2:	4e0a      	ldr	r6, [pc, #40]	; (800511c <__libc_init_array+0x40>)
 80050f4:	4c0a      	ldr	r4, [pc, #40]	; (8005120 <__libc_init_array+0x44>)
 80050f6:	1ba4      	subs	r4, r4, r6
 80050f8:	10a4      	asrs	r4, r4, #2
 80050fa:	42a5      	cmp	r5, r4
 80050fc:	d105      	bne.n	800510a <__libc_init_array+0x2e>
 80050fe:	bd70      	pop	{r4, r5, r6, pc}
 8005100:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005104:	4798      	blx	r3
 8005106:	3501      	adds	r5, #1
 8005108:	e7ee      	b.n	80050e8 <__libc_init_array+0xc>
 800510a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800510e:	4798      	blx	r3
 8005110:	3501      	adds	r5, #1
 8005112:	e7f2      	b.n	80050fa <__libc_init_array+0x1e>
 8005114:	08005c34 	.word	0x08005c34
 8005118:	08005c34 	.word	0x08005c34
 800511c:	08005c34 	.word	0x08005c34
 8005120:	08005c38 	.word	0x08005c38

08005124 <memset>:
 8005124:	4603      	mov	r3, r0
 8005126:	4402      	add	r2, r0
 8005128:	4293      	cmp	r3, r2
 800512a:	d100      	bne.n	800512e <memset+0xa>
 800512c:	4770      	bx	lr
 800512e:	f803 1b01 	strb.w	r1, [r3], #1
 8005132:	e7f9      	b.n	8005128 <memset+0x4>

08005134 <_free_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	4605      	mov	r5, r0
 8005138:	2900      	cmp	r1, #0
 800513a:	d043      	beq.n	80051c4 <_free_r+0x90>
 800513c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005140:	1f0c      	subs	r4, r1, #4
 8005142:	2b00      	cmp	r3, #0
 8005144:	bfb8      	it	lt
 8005146:	18e4      	addlt	r4, r4, r3
 8005148:	f000 f8ea 	bl	8005320 <__malloc_lock>
 800514c:	4a1e      	ldr	r2, [pc, #120]	; (80051c8 <_free_r+0x94>)
 800514e:	6813      	ldr	r3, [r2, #0]
 8005150:	4610      	mov	r0, r2
 8005152:	b933      	cbnz	r3, 8005162 <_free_r+0x2e>
 8005154:	6063      	str	r3, [r4, #4]
 8005156:	6014      	str	r4, [r2, #0]
 8005158:	4628      	mov	r0, r5
 800515a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800515e:	f000 b8e0 	b.w	8005322 <__malloc_unlock>
 8005162:	42a3      	cmp	r3, r4
 8005164:	d90b      	bls.n	800517e <_free_r+0x4a>
 8005166:	6821      	ldr	r1, [r4, #0]
 8005168:	1862      	adds	r2, r4, r1
 800516a:	4293      	cmp	r3, r2
 800516c:	bf01      	itttt	eq
 800516e:	681a      	ldreq	r2, [r3, #0]
 8005170:	685b      	ldreq	r3, [r3, #4]
 8005172:	1852      	addeq	r2, r2, r1
 8005174:	6022      	streq	r2, [r4, #0]
 8005176:	6063      	str	r3, [r4, #4]
 8005178:	6004      	str	r4, [r0, #0]
 800517a:	e7ed      	b.n	8005158 <_free_r+0x24>
 800517c:	4613      	mov	r3, r2
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	b10a      	cbz	r2, 8005186 <_free_r+0x52>
 8005182:	42a2      	cmp	r2, r4
 8005184:	d9fa      	bls.n	800517c <_free_r+0x48>
 8005186:	6819      	ldr	r1, [r3, #0]
 8005188:	1858      	adds	r0, r3, r1
 800518a:	42a0      	cmp	r0, r4
 800518c:	d10b      	bne.n	80051a6 <_free_r+0x72>
 800518e:	6820      	ldr	r0, [r4, #0]
 8005190:	4401      	add	r1, r0
 8005192:	1858      	adds	r0, r3, r1
 8005194:	4282      	cmp	r2, r0
 8005196:	6019      	str	r1, [r3, #0]
 8005198:	d1de      	bne.n	8005158 <_free_r+0x24>
 800519a:	6810      	ldr	r0, [r2, #0]
 800519c:	6852      	ldr	r2, [r2, #4]
 800519e:	4401      	add	r1, r0
 80051a0:	6019      	str	r1, [r3, #0]
 80051a2:	605a      	str	r2, [r3, #4]
 80051a4:	e7d8      	b.n	8005158 <_free_r+0x24>
 80051a6:	d902      	bls.n	80051ae <_free_r+0x7a>
 80051a8:	230c      	movs	r3, #12
 80051aa:	602b      	str	r3, [r5, #0]
 80051ac:	e7d4      	b.n	8005158 <_free_r+0x24>
 80051ae:	6820      	ldr	r0, [r4, #0]
 80051b0:	1821      	adds	r1, r4, r0
 80051b2:	428a      	cmp	r2, r1
 80051b4:	bf01      	itttt	eq
 80051b6:	6811      	ldreq	r1, [r2, #0]
 80051b8:	6852      	ldreq	r2, [r2, #4]
 80051ba:	1809      	addeq	r1, r1, r0
 80051bc:	6021      	streq	r1, [r4, #0]
 80051be:	6062      	str	r2, [r4, #4]
 80051c0:	605c      	str	r4, [r3, #4]
 80051c2:	e7c9      	b.n	8005158 <_free_r+0x24>
 80051c4:	bd38      	pop	{r3, r4, r5, pc}
 80051c6:	bf00      	nop
 80051c8:	200000bc 	.word	0x200000bc

080051cc <_malloc_r>:
 80051cc:	b570      	push	{r4, r5, r6, lr}
 80051ce:	1ccd      	adds	r5, r1, #3
 80051d0:	f025 0503 	bic.w	r5, r5, #3
 80051d4:	3508      	adds	r5, #8
 80051d6:	2d0c      	cmp	r5, #12
 80051d8:	bf38      	it	cc
 80051da:	250c      	movcc	r5, #12
 80051dc:	2d00      	cmp	r5, #0
 80051de:	4606      	mov	r6, r0
 80051e0:	db01      	blt.n	80051e6 <_malloc_r+0x1a>
 80051e2:	42a9      	cmp	r1, r5
 80051e4:	d903      	bls.n	80051ee <_malloc_r+0x22>
 80051e6:	230c      	movs	r3, #12
 80051e8:	6033      	str	r3, [r6, #0]
 80051ea:	2000      	movs	r0, #0
 80051ec:	bd70      	pop	{r4, r5, r6, pc}
 80051ee:	f000 f897 	bl	8005320 <__malloc_lock>
 80051f2:	4a23      	ldr	r2, [pc, #140]	; (8005280 <_malloc_r+0xb4>)
 80051f4:	6814      	ldr	r4, [r2, #0]
 80051f6:	4621      	mov	r1, r4
 80051f8:	b991      	cbnz	r1, 8005220 <_malloc_r+0x54>
 80051fa:	4c22      	ldr	r4, [pc, #136]	; (8005284 <_malloc_r+0xb8>)
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	b91b      	cbnz	r3, 8005208 <_malloc_r+0x3c>
 8005200:	4630      	mov	r0, r6
 8005202:	f000 f841 	bl	8005288 <_sbrk_r>
 8005206:	6020      	str	r0, [r4, #0]
 8005208:	4629      	mov	r1, r5
 800520a:	4630      	mov	r0, r6
 800520c:	f000 f83c 	bl	8005288 <_sbrk_r>
 8005210:	1c43      	adds	r3, r0, #1
 8005212:	d126      	bne.n	8005262 <_malloc_r+0x96>
 8005214:	230c      	movs	r3, #12
 8005216:	4630      	mov	r0, r6
 8005218:	6033      	str	r3, [r6, #0]
 800521a:	f000 f882 	bl	8005322 <__malloc_unlock>
 800521e:	e7e4      	b.n	80051ea <_malloc_r+0x1e>
 8005220:	680b      	ldr	r3, [r1, #0]
 8005222:	1b5b      	subs	r3, r3, r5
 8005224:	d41a      	bmi.n	800525c <_malloc_r+0x90>
 8005226:	2b0b      	cmp	r3, #11
 8005228:	d90f      	bls.n	800524a <_malloc_r+0x7e>
 800522a:	600b      	str	r3, [r1, #0]
 800522c:	18cc      	adds	r4, r1, r3
 800522e:	50cd      	str	r5, [r1, r3]
 8005230:	4630      	mov	r0, r6
 8005232:	f000 f876 	bl	8005322 <__malloc_unlock>
 8005236:	f104 000b 	add.w	r0, r4, #11
 800523a:	1d23      	adds	r3, r4, #4
 800523c:	f020 0007 	bic.w	r0, r0, #7
 8005240:	1ac3      	subs	r3, r0, r3
 8005242:	d01b      	beq.n	800527c <_malloc_r+0xb0>
 8005244:	425a      	negs	r2, r3
 8005246:	50e2      	str	r2, [r4, r3]
 8005248:	bd70      	pop	{r4, r5, r6, pc}
 800524a:	428c      	cmp	r4, r1
 800524c:	bf0b      	itete	eq
 800524e:	6863      	ldreq	r3, [r4, #4]
 8005250:	684b      	ldrne	r3, [r1, #4]
 8005252:	6013      	streq	r3, [r2, #0]
 8005254:	6063      	strne	r3, [r4, #4]
 8005256:	bf18      	it	ne
 8005258:	460c      	movne	r4, r1
 800525a:	e7e9      	b.n	8005230 <_malloc_r+0x64>
 800525c:	460c      	mov	r4, r1
 800525e:	6849      	ldr	r1, [r1, #4]
 8005260:	e7ca      	b.n	80051f8 <_malloc_r+0x2c>
 8005262:	1cc4      	adds	r4, r0, #3
 8005264:	f024 0403 	bic.w	r4, r4, #3
 8005268:	42a0      	cmp	r0, r4
 800526a:	d005      	beq.n	8005278 <_malloc_r+0xac>
 800526c:	1a21      	subs	r1, r4, r0
 800526e:	4630      	mov	r0, r6
 8005270:	f000 f80a 	bl	8005288 <_sbrk_r>
 8005274:	3001      	adds	r0, #1
 8005276:	d0cd      	beq.n	8005214 <_malloc_r+0x48>
 8005278:	6025      	str	r5, [r4, #0]
 800527a:	e7d9      	b.n	8005230 <_malloc_r+0x64>
 800527c:	bd70      	pop	{r4, r5, r6, pc}
 800527e:	bf00      	nop
 8005280:	200000bc 	.word	0x200000bc
 8005284:	200000c0 	.word	0x200000c0

08005288 <_sbrk_r>:
 8005288:	b538      	push	{r3, r4, r5, lr}
 800528a:	2300      	movs	r3, #0
 800528c:	4c05      	ldr	r4, [pc, #20]	; (80052a4 <_sbrk_r+0x1c>)
 800528e:	4605      	mov	r5, r0
 8005290:	4608      	mov	r0, r1
 8005292:	6023      	str	r3, [r4, #0]
 8005294:	f7ff fddc 	bl	8004e50 <_sbrk>
 8005298:	1c43      	adds	r3, r0, #1
 800529a:	d102      	bne.n	80052a2 <_sbrk_r+0x1a>
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	b103      	cbz	r3, 80052a2 <_sbrk_r+0x1a>
 80052a0:	602b      	str	r3, [r5, #0]
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	20000838 	.word	0x20000838

080052a8 <sniprintf>:
 80052a8:	b40c      	push	{r2, r3}
 80052aa:	b530      	push	{r4, r5, lr}
 80052ac:	4b17      	ldr	r3, [pc, #92]	; (800530c <sniprintf+0x64>)
 80052ae:	1e0c      	subs	r4, r1, #0
 80052b0:	b09d      	sub	sp, #116	; 0x74
 80052b2:	681d      	ldr	r5, [r3, #0]
 80052b4:	da08      	bge.n	80052c8 <sniprintf+0x20>
 80052b6:	238b      	movs	r3, #139	; 0x8b
 80052b8:	f04f 30ff 	mov.w	r0, #4294967295
 80052bc:	602b      	str	r3, [r5, #0]
 80052be:	b01d      	add	sp, #116	; 0x74
 80052c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052c4:	b002      	add	sp, #8
 80052c6:	4770      	bx	lr
 80052c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80052cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80052d0:	bf0c      	ite	eq
 80052d2:	4623      	moveq	r3, r4
 80052d4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80052d8:	9304      	str	r3, [sp, #16]
 80052da:	9307      	str	r3, [sp, #28]
 80052dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052e0:	9002      	str	r0, [sp, #8]
 80052e2:	9006      	str	r0, [sp, #24]
 80052e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80052e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052ea:	ab21      	add	r3, sp, #132	; 0x84
 80052ec:	a902      	add	r1, sp, #8
 80052ee:	4628      	mov	r0, r5
 80052f0:	9301      	str	r3, [sp, #4]
 80052f2:	f000 f873 	bl	80053dc <_svfiprintf_r>
 80052f6:	1c43      	adds	r3, r0, #1
 80052f8:	bfbc      	itt	lt
 80052fa:	238b      	movlt	r3, #139	; 0x8b
 80052fc:	602b      	strlt	r3, [r5, #0]
 80052fe:	2c00      	cmp	r4, #0
 8005300:	d0dd      	beq.n	80052be <sniprintf+0x16>
 8005302:	2200      	movs	r2, #0
 8005304:	9b02      	ldr	r3, [sp, #8]
 8005306:	701a      	strb	r2, [r3, #0]
 8005308:	e7d9      	b.n	80052be <sniprintf+0x16>
 800530a:	bf00      	nop
 800530c:	20000030 	.word	0x20000030

08005310 <strcpy>:
 8005310:	4603      	mov	r3, r0
 8005312:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005316:	f803 2b01 	strb.w	r2, [r3], #1
 800531a:	2a00      	cmp	r2, #0
 800531c:	d1f9      	bne.n	8005312 <strcpy+0x2>
 800531e:	4770      	bx	lr

08005320 <__malloc_lock>:
 8005320:	4770      	bx	lr

08005322 <__malloc_unlock>:
 8005322:	4770      	bx	lr

08005324 <__ssputs_r>:
 8005324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005328:	688e      	ldr	r6, [r1, #8]
 800532a:	4682      	mov	sl, r0
 800532c:	429e      	cmp	r6, r3
 800532e:	460c      	mov	r4, r1
 8005330:	4691      	mov	r9, r2
 8005332:	4698      	mov	r8, r3
 8005334:	d835      	bhi.n	80053a2 <__ssputs_r+0x7e>
 8005336:	898a      	ldrh	r2, [r1, #12]
 8005338:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800533c:	d031      	beq.n	80053a2 <__ssputs_r+0x7e>
 800533e:	2302      	movs	r3, #2
 8005340:	6825      	ldr	r5, [r4, #0]
 8005342:	6909      	ldr	r1, [r1, #16]
 8005344:	1a6f      	subs	r7, r5, r1
 8005346:	6965      	ldr	r5, [r4, #20]
 8005348:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800534c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005350:	f108 0301 	add.w	r3, r8, #1
 8005354:	443b      	add	r3, r7
 8005356:	429d      	cmp	r5, r3
 8005358:	bf38      	it	cc
 800535a:	461d      	movcc	r5, r3
 800535c:	0553      	lsls	r3, r2, #21
 800535e:	d531      	bpl.n	80053c4 <__ssputs_r+0xa0>
 8005360:	4629      	mov	r1, r5
 8005362:	f7ff ff33 	bl	80051cc <_malloc_r>
 8005366:	4606      	mov	r6, r0
 8005368:	b950      	cbnz	r0, 8005380 <__ssputs_r+0x5c>
 800536a:	230c      	movs	r3, #12
 800536c:	f8ca 3000 	str.w	r3, [sl]
 8005370:	89a3      	ldrh	r3, [r4, #12]
 8005372:	f04f 30ff 	mov.w	r0, #4294967295
 8005376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800537a:	81a3      	strh	r3, [r4, #12]
 800537c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005380:	463a      	mov	r2, r7
 8005382:	6921      	ldr	r1, [r4, #16]
 8005384:	f000 fac4 	bl	8005910 <memcpy>
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800538e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005392:	81a3      	strh	r3, [r4, #12]
 8005394:	6126      	str	r6, [r4, #16]
 8005396:	443e      	add	r6, r7
 8005398:	6026      	str	r6, [r4, #0]
 800539a:	4646      	mov	r6, r8
 800539c:	6165      	str	r5, [r4, #20]
 800539e:	1bed      	subs	r5, r5, r7
 80053a0:	60a5      	str	r5, [r4, #8]
 80053a2:	4546      	cmp	r6, r8
 80053a4:	bf28      	it	cs
 80053a6:	4646      	movcs	r6, r8
 80053a8:	4649      	mov	r1, r9
 80053aa:	4632      	mov	r2, r6
 80053ac:	6820      	ldr	r0, [r4, #0]
 80053ae:	f000 faba 	bl	8005926 <memmove>
 80053b2:	68a3      	ldr	r3, [r4, #8]
 80053b4:	2000      	movs	r0, #0
 80053b6:	1b9b      	subs	r3, r3, r6
 80053b8:	60a3      	str	r3, [r4, #8]
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	441e      	add	r6, r3
 80053be:	6026      	str	r6, [r4, #0]
 80053c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c4:	462a      	mov	r2, r5
 80053c6:	f000 fac8 	bl	800595a <_realloc_r>
 80053ca:	4606      	mov	r6, r0
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d1e1      	bne.n	8005394 <__ssputs_r+0x70>
 80053d0:	6921      	ldr	r1, [r4, #16]
 80053d2:	4650      	mov	r0, sl
 80053d4:	f7ff feae 	bl	8005134 <_free_r>
 80053d8:	e7c7      	b.n	800536a <__ssputs_r+0x46>
	...

080053dc <_svfiprintf_r>:
 80053dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e0:	b09d      	sub	sp, #116	; 0x74
 80053e2:	9303      	str	r3, [sp, #12]
 80053e4:	898b      	ldrh	r3, [r1, #12]
 80053e6:	4680      	mov	r8, r0
 80053e8:	061c      	lsls	r4, r3, #24
 80053ea:	460d      	mov	r5, r1
 80053ec:	4616      	mov	r6, r2
 80053ee:	d50f      	bpl.n	8005410 <_svfiprintf_r+0x34>
 80053f0:	690b      	ldr	r3, [r1, #16]
 80053f2:	b96b      	cbnz	r3, 8005410 <_svfiprintf_r+0x34>
 80053f4:	2140      	movs	r1, #64	; 0x40
 80053f6:	f7ff fee9 	bl	80051cc <_malloc_r>
 80053fa:	6028      	str	r0, [r5, #0]
 80053fc:	6128      	str	r0, [r5, #16]
 80053fe:	b928      	cbnz	r0, 800540c <_svfiprintf_r+0x30>
 8005400:	230c      	movs	r3, #12
 8005402:	f8c8 3000 	str.w	r3, [r8]
 8005406:	f04f 30ff 	mov.w	r0, #4294967295
 800540a:	e0c4      	b.n	8005596 <_svfiprintf_r+0x1ba>
 800540c:	2340      	movs	r3, #64	; 0x40
 800540e:	616b      	str	r3, [r5, #20]
 8005410:	2300      	movs	r3, #0
 8005412:	9309      	str	r3, [sp, #36]	; 0x24
 8005414:	2320      	movs	r3, #32
 8005416:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800541a:	2330      	movs	r3, #48	; 0x30
 800541c:	f04f 0b01 	mov.w	fp, #1
 8005420:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005424:	4637      	mov	r7, r6
 8005426:	463c      	mov	r4, r7
 8005428:	f814 3b01 	ldrb.w	r3, [r4], #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d13c      	bne.n	80054aa <_svfiprintf_r+0xce>
 8005430:	ebb7 0a06 	subs.w	sl, r7, r6
 8005434:	d00b      	beq.n	800544e <_svfiprintf_r+0x72>
 8005436:	4653      	mov	r3, sl
 8005438:	4632      	mov	r2, r6
 800543a:	4629      	mov	r1, r5
 800543c:	4640      	mov	r0, r8
 800543e:	f7ff ff71 	bl	8005324 <__ssputs_r>
 8005442:	3001      	adds	r0, #1
 8005444:	f000 80a2 	beq.w	800558c <_svfiprintf_r+0x1b0>
 8005448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800544a:	4453      	add	r3, sl
 800544c:	9309      	str	r3, [sp, #36]	; 0x24
 800544e:	783b      	ldrb	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 809b 	beq.w	800558c <_svfiprintf_r+0x1b0>
 8005456:	2300      	movs	r3, #0
 8005458:	f04f 32ff 	mov.w	r2, #4294967295
 800545c:	9304      	str	r3, [sp, #16]
 800545e:	9307      	str	r3, [sp, #28]
 8005460:	9205      	str	r2, [sp, #20]
 8005462:	9306      	str	r3, [sp, #24]
 8005464:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005468:	931a      	str	r3, [sp, #104]	; 0x68
 800546a:	2205      	movs	r2, #5
 800546c:	7821      	ldrb	r1, [r4, #0]
 800546e:	4850      	ldr	r0, [pc, #320]	; (80055b0 <_svfiprintf_r+0x1d4>)
 8005470:	f000 fa40 	bl	80058f4 <memchr>
 8005474:	1c67      	adds	r7, r4, #1
 8005476:	9b04      	ldr	r3, [sp, #16]
 8005478:	b9d8      	cbnz	r0, 80054b2 <_svfiprintf_r+0xd6>
 800547a:	06d9      	lsls	r1, r3, #27
 800547c:	bf44      	itt	mi
 800547e:	2220      	movmi	r2, #32
 8005480:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005484:	071a      	lsls	r2, r3, #28
 8005486:	bf44      	itt	mi
 8005488:	222b      	movmi	r2, #43	; 0x2b
 800548a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800548e:	7822      	ldrb	r2, [r4, #0]
 8005490:	2a2a      	cmp	r2, #42	; 0x2a
 8005492:	d016      	beq.n	80054c2 <_svfiprintf_r+0xe6>
 8005494:	2100      	movs	r1, #0
 8005496:	200a      	movs	r0, #10
 8005498:	9a07      	ldr	r2, [sp, #28]
 800549a:	4627      	mov	r7, r4
 800549c:	783b      	ldrb	r3, [r7, #0]
 800549e:	3401      	adds	r4, #1
 80054a0:	3b30      	subs	r3, #48	; 0x30
 80054a2:	2b09      	cmp	r3, #9
 80054a4:	d950      	bls.n	8005548 <_svfiprintf_r+0x16c>
 80054a6:	b1c9      	cbz	r1, 80054dc <_svfiprintf_r+0x100>
 80054a8:	e011      	b.n	80054ce <_svfiprintf_r+0xf2>
 80054aa:	2b25      	cmp	r3, #37	; 0x25
 80054ac:	d0c0      	beq.n	8005430 <_svfiprintf_r+0x54>
 80054ae:	4627      	mov	r7, r4
 80054b0:	e7b9      	b.n	8005426 <_svfiprintf_r+0x4a>
 80054b2:	4a3f      	ldr	r2, [pc, #252]	; (80055b0 <_svfiprintf_r+0x1d4>)
 80054b4:	463c      	mov	r4, r7
 80054b6:	1a80      	subs	r0, r0, r2
 80054b8:	fa0b f000 	lsl.w	r0, fp, r0
 80054bc:	4318      	orrs	r0, r3
 80054be:	9004      	str	r0, [sp, #16]
 80054c0:	e7d3      	b.n	800546a <_svfiprintf_r+0x8e>
 80054c2:	9a03      	ldr	r2, [sp, #12]
 80054c4:	1d11      	adds	r1, r2, #4
 80054c6:	6812      	ldr	r2, [r2, #0]
 80054c8:	9103      	str	r1, [sp, #12]
 80054ca:	2a00      	cmp	r2, #0
 80054cc:	db01      	blt.n	80054d2 <_svfiprintf_r+0xf6>
 80054ce:	9207      	str	r2, [sp, #28]
 80054d0:	e004      	b.n	80054dc <_svfiprintf_r+0x100>
 80054d2:	4252      	negs	r2, r2
 80054d4:	f043 0302 	orr.w	r3, r3, #2
 80054d8:	9207      	str	r2, [sp, #28]
 80054da:	9304      	str	r3, [sp, #16]
 80054dc:	783b      	ldrb	r3, [r7, #0]
 80054de:	2b2e      	cmp	r3, #46	; 0x2e
 80054e0:	d10d      	bne.n	80054fe <_svfiprintf_r+0x122>
 80054e2:	787b      	ldrb	r3, [r7, #1]
 80054e4:	1c79      	adds	r1, r7, #1
 80054e6:	2b2a      	cmp	r3, #42	; 0x2a
 80054e8:	d132      	bne.n	8005550 <_svfiprintf_r+0x174>
 80054ea:	9b03      	ldr	r3, [sp, #12]
 80054ec:	3702      	adds	r7, #2
 80054ee:	1d1a      	adds	r2, r3, #4
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	9203      	str	r2, [sp, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	bfb8      	it	lt
 80054f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80054fc:	9305      	str	r3, [sp, #20]
 80054fe:	4c2d      	ldr	r4, [pc, #180]	; (80055b4 <_svfiprintf_r+0x1d8>)
 8005500:	2203      	movs	r2, #3
 8005502:	7839      	ldrb	r1, [r7, #0]
 8005504:	4620      	mov	r0, r4
 8005506:	f000 f9f5 	bl	80058f4 <memchr>
 800550a:	b138      	cbz	r0, 800551c <_svfiprintf_r+0x140>
 800550c:	2340      	movs	r3, #64	; 0x40
 800550e:	1b00      	subs	r0, r0, r4
 8005510:	fa03 f000 	lsl.w	r0, r3, r0
 8005514:	9b04      	ldr	r3, [sp, #16]
 8005516:	3701      	adds	r7, #1
 8005518:	4303      	orrs	r3, r0
 800551a:	9304      	str	r3, [sp, #16]
 800551c:	7839      	ldrb	r1, [r7, #0]
 800551e:	2206      	movs	r2, #6
 8005520:	4825      	ldr	r0, [pc, #148]	; (80055b8 <_svfiprintf_r+0x1dc>)
 8005522:	1c7e      	adds	r6, r7, #1
 8005524:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005528:	f000 f9e4 	bl	80058f4 <memchr>
 800552c:	2800      	cmp	r0, #0
 800552e:	d035      	beq.n	800559c <_svfiprintf_r+0x1c0>
 8005530:	4b22      	ldr	r3, [pc, #136]	; (80055bc <_svfiprintf_r+0x1e0>)
 8005532:	b9fb      	cbnz	r3, 8005574 <_svfiprintf_r+0x198>
 8005534:	9b03      	ldr	r3, [sp, #12]
 8005536:	3307      	adds	r3, #7
 8005538:	f023 0307 	bic.w	r3, r3, #7
 800553c:	3308      	adds	r3, #8
 800553e:	9303      	str	r3, [sp, #12]
 8005540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005542:	444b      	add	r3, r9
 8005544:	9309      	str	r3, [sp, #36]	; 0x24
 8005546:	e76d      	b.n	8005424 <_svfiprintf_r+0x48>
 8005548:	fb00 3202 	mla	r2, r0, r2, r3
 800554c:	2101      	movs	r1, #1
 800554e:	e7a4      	b.n	800549a <_svfiprintf_r+0xbe>
 8005550:	2300      	movs	r3, #0
 8005552:	240a      	movs	r4, #10
 8005554:	4618      	mov	r0, r3
 8005556:	9305      	str	r3, [sp, #20]
 8005558:	460f      	mov	r7, r1
 800555a:	783a      	ldrb	r2, [r7, #0]
 800555c:	3101      	adds	r1, #1
 800555e:	3a30      	subs	r2, #48	; 0x30
 8005560:	2a09      	cmp	r2, #9
 8005562:	d903      	bls.n	800556c <_svfiprintf_r+0x190>
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0ca      	beq.n	80054fe <_svfiprintf_r+0x122>
 8005568:	9005      	str	r0, [sp, #20]
 800556a:	e7c8      	b.n	80054fe <_svfiprintf_r+0x122>
 800556c:	fb04 2000 	mla	r0, r4, r0, r2
 8005570:	2301      	movs	r3, #1
 8005572:	e7f1      	b.n	8005558 <_svfiprintf_r+0x17c>
 8005574:	ab03      	add	r3, sp, #12
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	462a      	mov	r2, r5
 800557a:	4b11      	ldr	r3, [pc, #68]	; (80055c0 <_svfiprintf_r+0x1e4>)
 800557c:	a904      	add	r1, sp, #16
 800557e:	4640      	mov	r0, r8
 8005580:	f3af 8000 	nop.w
 8005584:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005588:	4681      	mov	r9, r0
 800558a:	d1d9      	bne.n	8005540 <_svfiprintf_r+0x164>
 800558c:	89ab      	ldrh	r3, [r5, #12]
 800558e:	065b      	lsls	r3, r3, #25
 8005590:	f53f af39 	bmi.w	8005406 <_svfiprintf_r+0x2a>
 8005594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005596:	b01d      	add	sp, #116	; 0x74
 8005598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800559c:	ab03      	add	r3, sp, #12
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	462a      	mov	r2, r5
 80055a2:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <_svfiprintf_r+0x1e4>)
 80055a4:	a904      	add	r1, sp, #16
 80055a6:	4640      	mov	r0, r8
 80055a8:	f000 f884 	bl	80056b4 <_printf_i>
 80055ac:	e7ea      	b.n	8005584 <_svfiprintf_r+0x1a8>
 80055ae:	bf00      	nop
 80055b0:	08005c00 	.word	0x08005c00
 80055b4:	08005c06 	.word	0x08005c06
 80055b8:	08005c0a 	.word	0x08005c0a
 80055bc:	00000000 	.word	0x00000000
 80055c0:	08005325 	.word	0x08005325

080055c4 <_printf_common>:
 80055c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c8:	4691      	mov	r9, r2
 80055ca:	461f      	mov	r7, r3
 80055cc:	688a      	ldr	r2, [r1, #8]
 80055ce:	690b      	ldr	r3, [r1, #16]
 80055d0:	4606      	mov	r6, r0
 80055d2:	4293      	cmp	r3, r2
 80055d4:	bfb8      	it	lt
 80055d6:	4613      	movlt	r3, r2
 80055d8:	f8c9 3000 	str.w	r3, [r9]
 80055dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055e0:	460c      	mov	r4, r1
 80055e2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055e6:	b112      	cbz	r2, 80055ee <_printf_common+0x2a>
 80055e8:	3301      	adds	r3, #1
 80055ea:	f8c9 3000 	str.w	r3, [r9]
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	0699      	lsls	r1, r3, #26
 80055f2:	bf42      	ittt	mi
 80055f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80055f8:	3302      	addmi	r3, #2
 80055fa:	f8c9 3000 	strmi.w	r3, [r9]
 80055fe:	6825      	ldr	r5, [r4, #0]
 8005600:	f015 0506 	ands.w	r5, r5, #6
 8005604:	d107      	bne.n	8005616 <_printf_common+0x52>
 8005606:	f104 0a19 	add.w	sl, r4, #25
 800560a:	68e3      	ldr	r3, [r4, #12]
 800560c:	f8d9 2000 	ldr.w	r2, [r9]
 8005610:	1a9b      	subs	r3, r3, r2
 8005612:	429d      	cmp	r5, r3
 8005614:	db2a      	blt.n	800566c <_printf_common+0xa8>
 8005616:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800561a:	6822      	ldr	r2, [r4, #0]
 800561c:	3300      	adds	r3, #0
 800561e:	bf18      	it	ne
 8005620:	2301      	movne	r3, #1
 8005622:	0692      	lsls	r2, r2, #26
 8005624:	d42f      	bmi.n	8005686 <_printf_common+0xc2>
 8005626:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800562a:	4639      	mov	r1, r7
 800562c:	4630      	mov	r0, r6
 800562e:	47c0      	blx	r8
 8005630:	3001      	adds	r0, #1
 8005632:	d022      	beq.n	800567a <_printf_common+0xb6>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	68e5      	ldr	r5, [r4, #12]
 8005638:	f003 0306 	and.w	r3, r3, #6
 800563c:	2b04      	cmp	r3, #4
 800563e:	bf18      	it	ne
 8005640:	2500      	movne	r5, #0
 8005642:	f8d9 2000 	ldr.w	r2, [r9]
 8005646:	f04f 0900 	mov.w	r9, #0
 800564a:	bf08      	it	eq
 800564c:	1aad      	subeq	r5, r5, r2
 800564e:	68a3      	ldr	r3, [r4, #8]
 8005650:	6922      	ldr	r2, [r4, #16]
 8005652:	bf08      	it	eq
 8005654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005658:	4293      	cmp	r3, r2
 800565a:	bfc4      	itt	gt
 800565c:	1a9b      	subgt	r3, r3, r2
 800565e:	18ed      	addgt	r5, r5, r3
 8005660:	341a      	adds	r4, #26
 8005662:	454d      	cmp	r5, r9
 8005664:	d11b      	bne.n	800569e <_printf_common+0xda>
 8005666:	2000      	movs	r0, #0
 8005668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800566c:	2301      	movs	r3, #1
 800566e:	4652      	mov	r2, sl
 8005670:	4639      	mov	r1, r7
 8005672:	4630      	mov	r0, r6
 8005674:	47c0      	blx	r8
 8005676:	3001      	adds	r0, #1
 8005678:	d103      	bne.n	8005682 <_printf_common+0xbe>
 800567a:	f04f 30ff 	mov.w	r0, #4294967295
 800567e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005682:	3501      	adds	r5, #1
 8005684:	e7c1      	b.n	800560a <_printf_common+0x46>
 8005686:	2030      	movs	r0, #48	; 0x30
 8005688:	18e1      	adds	r1, r4, r3
 800568a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005694:	4422      	add	r2, r4
 8005696:	3302      	adds	r3, #2
 8005698:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800569c:	e7c3      	b.n	8005626 <_printf_common+0x62>
 800569e:	2301      	movs	r3, #1
 80056a0:	4622      	mov	r2, r4
 80056a2:	4639      	mov	r1, r7
 80056a4:	4630      	mov	r0, r6
 80056a6:	47c0      	blx	r8
 80056a8:	3001      	adds	r0, #1
 80056aa:	d0e6      	beq.n	800567a <_printf_common+0xb6>
 80056ac:	f109 0901 	add.w	r9, r9, #1
 80056b0:	e7d7      	b.n	8005662 <_printf_common+0x9e>
	...

080056b4 <_printf_i>:
 80056b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056b8:	4617      	mov	r7, r2
 80056ba:	7e0a      	ldrb	r2, [r1, #24]
 80056bc:	b085      	sub	sp, #20
 80056be:	2a6e      	cmp	r2, #110	; 0x6e
 80056c0:	4698      	mov	r8, r3
 80056c2:	4606      	mov	r6, r0
 80056c4:	460c      	mov	r4, r1
 80056c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056c8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80056cc:	f000 80bc 	beq.w	8005848 <_printf_i+0x194>
 80056d0:	d81a      	bhi.n	8005708 <_printf_i+0x54>
 80056d2:	2a63      	cmp	r2, #99	; 0x63
 80056d4:	d02e      	beq.n	8005734 <_printf_i+0x80>
 80056d6:	d80a      	bhi.n	80056ee <_printf_i+0x3a>
 80056d8:	2a00      	cmp	r2, #0
 80056da:	f000 80c8 	beq.w	800586e <_printf_i+0x1ba>
 80056de:	2a58      	cmp	r2, #88	; 0x58
 80056e0:	f000 808a 	beq.w	80057f8 <_printf_i+0x144>
 80056e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056e8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80056ec:	e02a      	b.n	8005744 <_printf_i+0x90>
 80056ee:	2a64      	cmp	r2, #100	; 0x64
 80056f0:	d001      	beq.n	80056f6 <_printf_i+0x42>
 80056f2:	2a69      	cmp	r2, #105	; 0x69
 80056f4:	d1f6      	bne.n	80056e4 <_printf_i+0x30>
 80056f6:	6821      	ldr	r1, [r4, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80056fe:	d023      	beq.n	8005748 <_printf_i+0x94>
 8005700:	1d11      	adds	r1, r2, #4
 8005702:	6019      	str	r1, [r3, #0]
 8005704:	6813      	ldr	r3, [r2, #0]
 8005706:	e027      	b.n	8005758 <_printf_i+0xa4>
 8005708:	2a73      	cmp	r2, #115	; 0x73
 800570a:	f000 80b4 	beq.w	8005876 <_printf_i+0x1c2>
 800570e:	d808      	bhi.n	8005722 <_printf_i+0x6e>
 8005710:	2a6f      	cmp	r2, #111	; 0x6f
 8005712:	d02a      	beq.n	800576a <_printf_i+0xb6>
 8005714:	2a70      	cmp	r2, #112	; 0x70
 8005716:	d1e5      	bne.n	80056e4 <_printf_i+0x30>
 8005718:	680a      	ldr	r2, [r1, #0]
 800571a:	f042 0220 	orr.w	r2, r2, #32
 800571e:	600a      	str	r2, [r1, #0]
 8005720:	e003      	b.n	800572a <_printf_i+0x76>
 8005722:	2a75      	cmp	r2, #117	; 0x75
 8005724:	d021      	beq.n	800576a <_printf_i+0xb6>
 8005726:	2a78      	cmp	r2, #120	; 0x78
 8005728:	d1dc      	bne.n	80056e4 <_printf_i+0x30>
 800572a:	2278      	movs	r2, #120	; 0x78
 800572c:	496f      	ldr	r1, [pc, #444]	; (80058ec <_printf_i+0x238>)
 800572e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005732:	e064      	b.n	80057fe <_printf_i+0x14a>
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800573a:	1d11      	adds	r1, r2, #4
 800573c:	6019      	str	r1, [r3, #0]
 800573e:	6813      	ldr	r3, [r2, #0]
 8005740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005744:	2301      	movs	r3, #1
 8005746:	e0a3      	b.n	8005890 <_printf_i+0x1dc>
 8005748:	f011 0f40 	tst.w	r1, #64	; 0x40
 800574c:	f102 0104 	add.w	r1, r2, #4
 8005750:	6019      	str	r1, [r3, #0]
 8005752:	d0d7      	beq.n	8005704 <_printf_i+0x50>
 8005754:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005758:	2b00      	cmp	r3, #0
 800575a:	da03      	bge.n	8005764 <_printf_i+0xb0>
 800575c:	222d      	movs	r2, #45	; 0x2d
 800575e:	425b      	negs	r3, r3
 8005760:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005764:	4962      	ldr	r1, [pc, #392]	; (80058f0 <_printf_i+0x23c>)
 8005766:	220a      	movs	r2, #10
 8005768:	e017      	b.n	800579a <_printf_i+0xe6>
 800576a:	6820      	ldr	r0, [r4, #0]
 800576c:	6819      	ldr	r1, [r3, #0]
 800576e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005772:	d003      	beq.n	800577c <_printf_i+0xc8>
 8005774:	1d08      	adds	r0, r1, #4
 8005776:	6018      	str	r0, [r3, #0]
 8005778:	680b      	ldr	r3, [r1, #0]
 800577a:	e006      	b.n	800578a <_printf_i+0xd6>
 800577c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005780:	f101 0004 	add.w	r0, r1, #4
 8005784:	6018      	str	r0, [r3, #0]
 8005786:	d0f7      	beq.n	8005778 <_printf_i+0xc4>
 8005788:	880b      	ldrh	r3, [r1, #0]
 800578a:	2a6f      	cmp	r2, #111	; 0x6f
 800578c:	bf14      	ite	ne
 800578e:	220a      	movne	r2, #10
 8005790:	2208      	moveq	r2, #8
 8005792:	4957      	ldr	r1, [pc, #348]	; (80058f0 <_printf_i+0x23c>)
 8005794:	2000      	movs	r0, #0
 8005796:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800579a:	6865      	ldr	r5, [r4, #4]
 800579c:	2d00      	cmp	r5, #0
 800579e:	60a5      	str	r5, [r4, #8]
 80057a0:	f2c0 809c 	blt.w	80058dc <_printf_i+0x228>
 80057a4:	6820      	ldr	r0, [r4, #0]
 80057a6:	f020 0004 	bic.w	r0, r0, #4
 80057aa:	6020      	str	r0, [r4, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d13f      	bne.n	8005830 <_printf_i+0x17c>
 80057b0:	2d00      	cmp	r5, #0
 80057b2:	f040 8095 	bne.w	80058e0 <_printf_i+0x22c>
 80057b6:	4675      	mov	r5, lr
 80057b8:	2a08      	cmp	r2, #8
 80057ba:	d10b      	bne.n	80057d4 <_printf_i+0x120>
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	07da      	lsls	r2, r3, #31
 80057c0:	d508      	bpl.n	80057d4 <_printf_i+0x120>
 80057c2:	6923      	ldr	r3, [r4, #16]
 80057c4:	6862      	ldr	r2, [r4, #4]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	bfde      	ittt	le
 80057ca:	2330      	movle	r3, #48	; 0x30
 80057cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057d4:	ebae 0305 	sub.w	r3, lr, r5
 80057d8:	6123      	str	r3, [r4, #16]
 80057da:	f8cd 8000 	str.w	r8, [sp]
 80057de:	463b      	mov	r3, r7
 80057e0:	aa03      	add	r2, sp, #12
 80057e2:	4621      	mov	r1, r4
 80057e4:	4630      	mov	r0, r6
 80057e6:	f7ff feed 	bl	80055c4 <_printf_common>
 80057ea:	3001      	adds	r0, #1
 80057ec:	d155      	bne.n	800589a <_printf_i+0x1e6>
 80057ee:	f04f 30ff 	mov.w	r0, #4294967295
 80057f2:	b005      	add	sp, #20
 80057f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057f8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80057fc:	493c      	ldr	r1, [pc, #240]	; (80058f0 <_printf_i+0x23c>)
 80057fe:	6822      	ldr	r2, [r4, #0]
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005806:	f100 0504 	add.w	r5, r0, #4
 800580a:	601d      	str	r5, [r3, #0]
 800580c:	d001      	beq.n	8005812 <_printf_i+0x15e>
 800580e:	6803      	ldr	r3, [r0, #0]
 8005810:	e002      	b.n	8005818 <_printf_i+0x164>
 8005812:	0655      	lsls	r5, r2, #25
 8005814:	d5fb      	bpl.n	800580e <_printf_i+0x15a>
 8005816:	8803      	ldrh	r3, [r0, #0]
 8005818:	07d0      	lsls	r0, r2, #31
 800581a:	bf44      	itt	mi
 800581c:	f042 0220 	orrmi.w	r2, r2, #32
 8005820:	6022      	strmi	r2, [r4, #0]
 8005822:	b91b      	cbnz	r3, 800582c <_printf_i+0x178>
 8005824:	6822      	ldr	r2, [r4, #0]
 8005826:	f022 0220 	bic.w	r2, r2, #32
 800582a:	6022      	str	r2, [r4, #0]
 800582c:	2210      	movs	r2, #16
 800582e:	e7b1      	b.n	8005794 <_printf_i+0xe0>
 8005830:	4675      	mov	r5, lr
 8005832:	fbb3 f0f2 	udiv	r0, r3, r2
 8005836:	fb02 3310 	mls	r3, r2, r0, r3
 800583a:	5ccb      	ldrb	r3, [r1, r3]
 800583c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005840:	4603      	mov	r3, r0
 8005842:	2800      	cmp	r0, #0
 8005844:	d1f5      	bne.n	8005832 <_printf_i+0x17e>
 8005846:	e7b7      	b.n	80057b8 <_printf_i+0x104>
 8005848:	6808      	ldr	r0, [r1, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005850:	6949      	ldr	r1, [r1, #20]
 8005852:	d004      	beq.n	800585e <_printf_i+0x1aa>
 8005854:	1d10      	adds	r0, r2, #4
 8005856:	6018      	str	r0, [r3, #0]
 8005858:	6813      	ldr	r3, [r2, #0]
 800585a:	6019      	str	r1, [r3, #0]
 800585c:	e007      	b.n	800586e <_printf_i+0x1ba>
 800585e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005862:	f102 0004 	add.w	r0, r2, #4
 8005866:	6018      	str	r0, [r3, #0]
 8005868:	6813      	ldr	r3, [r2, #0]
 800586a:	d0f6      	beq.n	800585a <_printf_i+0x1a6>
 800586c:	8019      	strh	r1, [r3, #0]
 800586e:	2300      	movs	r3, #0
 8005870:	4675      	mov	r5, lr
 8005872:	6123      	str	r3, [r4, #16]
 8005874:	e7b1      	b.n	80057da <_printf_i+0x126>
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	1d11      	adds	r1, r2, #4
 800587a:	6019      	str	r1, [r3, #0]
 800587c:	6815      	ldr	r5, [r2, #0]
 800587e:	2100      	movs	r1, #0
 8005880:	6862      	ldr	r2, [r4, #4]
 8005882:	4628      	mov	r0, r5
 8005884:	f000 f836 	bl	80058f4 <memchr>
 8005888:	b108      	cbz	r0, 800588e <_printf_i+0x1da>
 800588a:	1b40      	subs	r0, r0, r5
 800588c:	6060      	str	r0, [r4, #4]
 800588e:	6863      	ldr	r3, [r4, #4]
 8005890:	6123      	str	r3, [r4, #16]
 8005892:	2300      	movs	r3, #0
 8005894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005898:	e79f      	b.n	80057da <_printf_i+0x126>
 800589a:	6923      	ldr	r3, [r4, #16]
 800589c:	462a      	mov	r2, r5
 800589e:	4639      	mov	r1, r7
 80058a0:	4630      	mov	r0, r6
 80058a2:	47c0      	blx	r8
 80058a4:	3001      	adds	r0, #1
 80058a6:	d0a2      	beq.n	80057ee <_printf_i+0x13a>
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	079b      	lsls	r3, r3, #30
 80058ac:	d507      	bpl.n	80058be <_printf_i+0x20a>
 80058ae:	2500      	movs	r5, #0
 80058b0:	f104 0919 	add.w	r9, r4, #25
 80058b4:	68e3      	ldr	r3, [r4, #12]
 80058b6:	9a03      	ldr	r2, [sp, #12]
 80058b8:	1a9b      	subs	r3, r3, r2
 80058ba:	429d      	cmp	r5, r3
 80058bc:	db05      	blt.n	80058ca <_printf_i+0x216>
 80058be:	68e0      	ldr	r0, [r4, #12]
 80058c0:	9b03      	ldr	r3, [sp, #12]
 80058c2:	4298      	cmp	r0, r3
 80058c4:	bfb8      	it	lt
 80058c6:	4618      	movlt	r0, r3
 80058c8:	e793      	b.n	80057f2 <_printf_i+0x13e>
 80058ca:	2301      	movs	r3, #1
 80058cc:	464a      	mov	r2, r9
 80058ce:	4639      	mov	r1, r7
 80058d0:	4630      	mov	r0, r6
 80058d2:	47c0      	blx	r8
 80058d4:	3001      	adds	r0, #1
 80058d6:	d08a      	beq.n	80057ee <_printf_i+0x13a>
 80058d8:	3501      	adds	r5, #1
 80058da:	e7eb      	b.n	80058b4 <_printf_i+0x200>
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1a7      	bne.n	8005830 <_printf_i+0x17c>
 80058e0:	780b      	ldrb	r3, [r1, #0]
 80058e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058ea:	e765      	b.n	80057b8 <_printf_i+0x104>
 80058ec:	08005c22 	.word	0x08005c22
 80058f0:	08005c11 	.word	0x08005c11

080058f4 <memchr>:
 80058f4:	b510      	push	{r4, lr}
 80058f6:	b2c9      	uxtb	r1, r1
 80058f8:	4402      	add	r2, r0
 80058fa:	4290      	cmp	r0, r2
 80058fc:	4603      	mov	r3, r0
 80058fe:	d101      	bne.n	8005904 <memchr+0x10>
 8005900:	2000      	movs	r0, #0
 8005902:	bd10      	pop	{r4, pc}
 8005904:	781c      	ldrb	r4, [r3, #0]
 8005906:	3001      	adds	r0, #1
 8005908:	428c      	cmp	r4, r1
 800590a:	d1f6      	bne.n	80058fa <memchr+0x6>
 800590c:	4618      	mov	r0, r3
 800590e:	bd10      	pop	{r4, pc}

08005910 <memcpy>:
 8005910:	b510      	push	{r4, lr}
 8005912:	1e43      	subs	r3, r0, #1
 8005914:	440a      	add	r2, r1
 8005916:	4291      	cmp	r1, r2
 8005918:	d100      	bne.n	800591c <memcpy+0xc>
 800591a:	bd10      	pop	{r4, pc}
 800591c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005920:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005924:	e7f7      	b.n	8005916 <memcpy+0x6>

08005926 <memmove>:
 8005926:	4288      	cmp	r0, r1
 8005928:	b510      	push	{r4, lr}
 800592a:	eb01 0302 	add.w	r3, r1, r2
 800592e:	d803      	bhi.n	8005938 <memmove+0x12>
 8005930:	1e42      	subs	r2, r0, #1
 8005932:	4299      	cmp	r1, r3
 8005934:	d10c      	bne.n	8005950 <memmove+0x2a>
 8005936:	bd10      	pop	{r4, pc}
 8005938:	4298      	cmp	r0, r3
 800593a:	d2f9      	bcs.n	8005930 <memmove+0xa>
 800593c:	1881      	adds	r1, r0, r2
 800593e:	1ad2      	subs	r2, r2, r3
 8005940:	42d3      	cmn	r3, r2
 8005942:	d100      	bne.n	8005946 <memmove+0x20>
 8005944:	bd10      	pop	{r4, pc}
 8005946:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800594a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800594e:	e7f7      	b.n	8005940 <memmove+0x1a>
 8005950:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005954:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005958:	e7eb      	b.n	8005932 <memmove+0xc>

0800595a <_realloc_r>:
 800595a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595c:	4607      	mov	r7, r0
 800595e:	4614      	mov	r4, r2
 8005960:	460e      	mov	r6, r1
 8005962:	b921      	cbnz	r1, 800596e <_realloc_r+0x14>
 8005964:	4611      	mov	r1, r2
 8005966:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800596a:	f7ff bc2f 	b.w	80051cc <_malloc_r>
 800596e:	b922      	cbnz	r2, 800597a <_realloc_r+0x20>
 8005970:	f7ff fbe0 	bl	8005134 <_free_r>
 8005974:	4625      	mov	r5, r4
 8005976:	4628      	mov	r0, r5
 8005978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800597a:	f000 f814 	bl	80059a6 <_malloc_usable_size_r>
 800597e:	4284      	cmp	r4, r0
 8005980:	d90f      	bls.n	80059a2 <_realloc_r+0x48>
 8005982:	4621      	mov	r1, r4
 8005984:	4638      	mov	r0, r7
 8005986:	f7ff fc21 	bl	80051cc <_malloc_r>
 800598a:	4605      	mov	r5, r0
 800598c:	2800      	cmp	r0, #0
 800598e:	d0f2      	beq.n	8005976 <_realloc_r+0x1c>
 8005990:	4631      	mov	r1, r6
 8005992:	4622      	mov	r2, r4
 8005994:	f7ff ffbc 	bl	8005910 <memcpy>
 8005998:	4631      	mov	r1, r6
 800599a:	4638      	mov	r0, r7
 800599c:	f7ff fbca 	bl	8005134 <_free_r>
 80059a0:	e7e9      	b.n	8005976 <_realloc_r+0x1c>
 80059a2:	4635      	mov	r5, r6
 80059a4:	e7e7      	b.n	8005976 <_realloc_r+0x1c>

080059a6 <_malloc_usable_size_r>:
 80059a6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80059aa:	2800      	cmp	r0, #0
 80059ac:	f1a0 0004 	sub.w	r0, r0, #4
 80059b0:	bfbc      	itt	lt
 80059b2:	580b      	ldrlt	r3, [r1, r0]
 80059b4:	18c0      	addlt	r0, r0, r3
 80059b6:	4770      	bx	lr

080059b8 <_init>:
 80059b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ba:	bf00      	nop
 80059bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059be:	bc08      	pop	{r3}
 80059c0:	469e      	mov	lr, r3
 80059c2:	4770      	bx	lr

080059c4 <_fini>:
 80059c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c6:	bf00      	nop
 80059c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ca:	bc08      	pop	{r3}
 80059cc:	469e      	mov	lr, r3
 80059ce:	4770      	bx	lr
