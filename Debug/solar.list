
solar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a88  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005bc8  08005bc8  00015bc8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005c64  08005c64  00015c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005c68  08005c68  00015c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08005c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000734  20000078  08005ce4  00020078  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200007ac  08005ce4  000207ac  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001fecc  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004136  00000000  00000000  0003ff6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007bc2  00000000  00000000  000440a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000cc8  00000000  00000000  0004bc68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001380  00000000  00000000  0004c930  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008f12  00000000  00000000  0004dcb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000045e2  00000000  00000000  00056bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005b1a4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002a5c  00000000  00000000  0005b220  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08005bb0 	.word	0x08005bb0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08005bb0 	.word	0x08005bb0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f092 0f00 	teq	r2, #0
 800047a:	bf14      	ite	ne
 800047c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e720      	b.n	80002d4 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aedc 	beq.w	8000282 <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6c1      	b.n	8000282 <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	d1ed      	bne.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_fmul>:
 8000d40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d48:	bf1e      	ittt	ne
 8000d4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4e:	ea92 0f0c 	teqne	r2, ip
 8000d52:	ea93 0f0c 	teqne	r3, ip
 8000d56:	d06f      	beq.n	8000e38 <__aeabi_fmul+0xf8>
 8000d58:	441a      	add	r2, r3
 8000d5a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5e:	0240      	lsls	r0, r0, #9
 8000d60:	bf18      	it	ne
 8000d62:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d66:	d01e      	beq.n	8000da6 <__aeabi_fmul+0x66>
 8000d68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d6c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d70:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d74:	fba0 3101 	umull	r3, r1, r0, r1
 8000d78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d7c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d80:	bf3e      	ittt	cc
 8000d82:	0049      	lslcc	r1, r1, #1
 8000d84:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d88:	005b      	lslcc	r3, r3, #1
 8000d8a:	ea40 0001 	orr.w	r0, r0, r1
 8000d8e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d92:	2afd      	cmp	r2, #253	; 0xfd
 8000d94:	d81d      	bhi.n	8000dd2 <__aeabi_fmul+0x92>
 8000d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9e:	bf08      	it	eq
 8000da0:	f020 0001 	biceq.w	r0, r0, #1
 8000da4:	4770      	bx	lr
 8000da6:	f090 0f00 	teq	r0, #0
 8000daa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dae:	bf08      	it	eq
 8000db0:	0249      	lsleq	r1, r1, #9
 8000db2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dba:	3a7f      	subs	r2, #127	; 0x7f
 8000dbc:	bfc2      	ittt	gt
 8000dbe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc6:	4770      	bxgt	lr
 8000dc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	3a01      	subs	r2, #1
 8000dd2:	dc5d      	bgt.n	8000e90 <__aeabi_fmul+0x150>
 8000dd4:	f112 0f19 	cmn.w	r2, #25
 8000dd8:	bfdc      	itt	le
 8000dda:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dde:	4770      	bxle	lr
 8000de0:	f1c2 0200 	rsb	r2, r2, #0
 8000de4:	0041      	lsls	r1, r0, #1
 8000de6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dea:	f1c2 0220 	rsb	r2, r2, #32
 8000dee:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df6:	f140 0000 	adc.w	r0, r0, #0
 8000dfa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfe:	bf08      	it	eq
 8000e00:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e04:	4770      	bx	lr
 8000e06:	f092 0f00 	teq	r2, #0
 8000e0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0e:	bf02      	ittt	eq
 8000e10:	0040      	lsleq	r0, r0, #1
 8000e12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e16:	3a01      	subeq	r2, #1
 8000e18:	d0f9      	beq.n	8000e0e <__aeabi_fmul+0xce>
 8000e1a:	ea40 000c 	orr.w	r0, r0, ip
 8000e1e:	f093 0f00 	teq	r3, #0
 8000e22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0049      	lsleq	r1, r1, #1
 8000e2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2e:	3b01      	subeq	r3, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xe6>
 8000e32:	ea41 010c 	orr.w	r1, r1, ip
 8000e36:	e78f      	b.n	8000d58 <__aeabi_fmul+0x18>
 8000e38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	bf18      	it	ne
 8000e42:	ea93 0f0c 	teqne	r3, ip
 8000e46:	d00a      	beq.n	8000e5e <__aeabi_fmul+0x11e>
 8000e48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e4c:	bf18      	it	ne
 8000e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	d1d8      	bne.n	8000e06 <__aeabi_fmul+0xc6>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	4770      	bx	lr
 8000e5e:	f090 0f00 	teq	r0, #0
 8000e62:	bf17      	itett	ne
 8000e64:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e68:	4608      	moveq	r0, r1
 8000e6a:	f091 0f00 	teqne	r1, #0
 8000e6e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e72:	d014      	beq.n	8000e9e <__aeabi_fmul+0x15e>
 8000e74:	ea92 0f0c 	teq	r2, ip
 8000e78:	d101      	bne.n	8000e7e <__aeabi_fmul+0x13e>
 8000e7a:	0242      	lsls	r2, r0, #9
 8000e7c:	d10f      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e7e:	ea93 0f0c 	teq	r3, ip
 8000e82:	d103      	bne.n	8000e8c <__aeabi_fmul+0x14c>
 8000e84:	024b      	lsls	r3, r1, #9
 8000e86:	bf18      	it	ne
 8000e88:	4608      	movne	r0, r1
 8000e8a:	d108      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e8c:	ea80 0001 	eor.w	r0, r0, r1
 8000e90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9c:	4770      	bx	lr
 8000e9e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_fdiv>:
 8000ea8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb0:	bf1e      	ittt	ne
 8000eb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb6:	ea92 0f0c 	teqne	r2, ip
 8000eba:	ea93 0f0c 	teqne	r3, ip
 8000ebe:	d069      	beq.n	8000f94 <__aeabi_fdiv+0xec>
 8000ec0:	eba2 0203 	sub.w	r2, r2, r3
 8000ec4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec8:	0249      	lsls	r1, r1, #9
 8000eca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ece:	d037      	beq.n	8000f40 <__aeabi_fdiv+0x98>
 8000ed0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000edc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	bf38      	it	cc
 8000ee4:	005b      	lslcc	r3, r3, #1
 8000ee6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	bf24      	itt	cs
 8000ef2:	1a5b      	subcs	r3, r3, r1
 8000ef4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f02:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f06:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0a:	bf24      	itt	cs
 8000f0c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f14:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f18:	bf24      	itt	cs
 8000f1a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	bf18      	it	ne
 8000f26:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2a:	d1e0      	bne.n	8000eee <__aeabi_fdiv+0x46>
 8000f2c:	2afd      	cmp	r2, #253	; 0xfd
 8000f2e:	f63f af50 	bhi.w	8000dd2 <__aeabi_fmul+0x92>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f38:	bf08      	it	eq
 8000f3a:	f020 0001 	biceq.w	r0, r0, #1
 8000f3e:	4770      	bx	lr
 8000f40:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f44:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f48:	327f      	adds	r2, #127	; 0x7f
 8000f4a:	bfc2      	ittt	gt
 8000f4c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f50:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f54:	4770      	bxgt	lr
 8000f56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	3a01      	subs	r2, #1
 8000f60:	e737      	b.n	8000dd2 <__aeabi_fmul+0x92>
 8000f62:	f092 0f00 	teq	r2, #0
 8000f66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6a:	bf02      	ittt	eq
 8000f6c:	0040      	lsleq	r0, r0, #1
 8000f6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f72:	3a01      	subeq	r2, #1
 8000f74:	d0f9      	beq.n	8000f6a <__aeabi_fdiv+0xc2>
 8000f76:	ea40 000c 	orr.w	r0, r0, ip
 8000f7a:	f093 0f00 	teq	r3, #0
 8000f7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0049      	lsleq	r1, r1, #1
 8000f86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8a:	3b01      	subeq	r3, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xda>
 8000f8e:	ea41 010c 	orr.w	r1, r1, ip
 8000f92:	e795      	b.n	8000ec0 <__aeabi_fdiv+0x18>
 8000f94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f98:	ea92 0f0c 	teq	r2, ip
 8000f9c:	d108      	bne.n	8000fb0 <__aeabi_fdiv+0x108>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	f47f af7d 	bne.w	8000e9e <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	f47f af70 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e776      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fb0:	ea93 0f0c 	teq	r3, ip
 8000fb4:	d104      	bne.n	8000fc0 <__aeabi_fdiv+0x118>
 8000fb6:	024b      	lsls	r3, r1, #9
 8000fb8:	f43f af4c 	beq.w	8000e54 <__aeabi_fmul+0x114>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e76e      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc4:	bf18      	it	ne
 8000fc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fca:	d1ca      	bne.n	8000f62 <__aeabi_fdiv+0xba>
 8000fcc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd0:	f47f af5c 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fd4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fd8:	f47f af3c 	bne.w	8000e54 <__aeabi_fmul+0x114>
 8000fdc:	e75f      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_f2iz>:
 8000fe0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fe8:	d30f      	bcc.n	800100a <__aeabi_f2iz+0x2a>
 8000fea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff2:	d90d      	bls.n	8001010 <__aeabi_f2iz+0x30>
 8000ff4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ffc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	bf18      	it	ne
 8001006:	4240      	negne	r0, r0
 8001008:	4770      	bx	lr
 800100a:	f04f 0000 	mov.w	r0, #0
 800100e:	4770      	bx	lr
 8001010:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001014:	d101      	bne.n	800101a <__aeabi_f2iz+0x3a>
 8001016:	0242      	lsls	r2, r0, #9
 8001018:	d105      	bne.n	8001026 <__aeabi_f2iz+0x46>
 800101a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800101e:	bf08      	it	eq
 8001020:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001024:	4770      	bx	lr
 8001026:	f04f 0000 	mov.w	r0, #0
 800102a:	4770      	bx	lr

0800102c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_InitTick+0x24>)
{
 800102e:	b510      	push	{r4, lr}
 8001030:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001038:	fbb0 f0f3 	udiv	r0, r0, r3
 800103c:	f000 fb1c 	bl	8001678 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001040:	2200      	movs	r2, #0
 8001042:	4621      	mov	r1, r4
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f000 fad6 	bl	80015f8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800104c:	2000      	movs	r0, #0
 800104e:	bd10      	pop	{r4, pc}
 8001050:	20000010 	.word	0x20000010

08001054 <HAL_Init>:
{
 8001054:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001056:	2003      	movs	r0, #3
 8001058:	f000 fabc 	bl	80015d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800105c:	2000      	movs	r0, #0
 800105e:	f7ff ffe5 	bl	800102c <HAL_InitTick>
  HAL_MspInit();
 8001062:	f003 ff8f 	bl	8004f84 <HAL_MspInit>
}
 8001066:	2000      	movs	r0, #0
 8001068:	bd08      	pop	{r3, pc}
	...

0800106c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800106c:	4a02      	ldr	r2, [pc, #8]	; (8001078 <HAL_IncTick+0xc>)
 800106e:	6813      	ldr	r3, [r2, #0]
 8001070:	3301      	adds	r3, #1
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	200000a4 	.word	0x200000a4

0800107c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800107c:	4b01      	ldr	r3, [pc, #4]	; (8001084 <HAL_GetTick+0x8>)
 800107e:	6818      	ldr	r0, [r3, #0]
}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	200000a4 	.word	0x200000a4

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001088:	b513      	push	{r0, r1, r4, lr}
 800108a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800108c:	f7ff fff6 	bl	800107c <HAL_GetTick>
 8001090:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8001092:	f7ff fff3 	bl	800107c <HAL_GetTick>
 8001096:	9b01      	ldr	r3, [sp, #4]
 8001098:	1b00      	subs	r0, r0, r4
 800109a:	4298      	cmp	r0, r3
 800109c:	d3f9      	bcc.n	8001092 <HAL_Delay+0xa>
  {
  }
}
 800109e:	b002      	add	sp, #8
 80010a0:	bd10      	pop	{r4, pc}
	...

080010a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010a6:	4604      	mov	r4, r0
 80010a8:	b908      	cbnz	r0, 80010ae <HAL_ADC_Init+0xa>
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 80010aa:	2001      	movs	r0, #1
 80010ac:	e092      	b.n	80011d4 <HAL_ADC_Init+0x130>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010ae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80010b0:	b973      	cbnz	r3, 80010d0 <HAL_ADC_Init+0x2c>
    ADC_CLEAR_ERRORCODE(hadc);
 80010b2:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 80010b4:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b8:	4b54      	ldr	r3, [pc, #336]	; (800120c <HAL_ADC_Init+0x168>)
 80010ba:	6a1a      	ldr	r2, [r3, #32]
 80010bc:	f042 0201 	orr.w	r2, r2, #1
 80010c0:	621a      	str	r2, [r3, #32]
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 80010cc:	f002 fb50 	bl	8003770 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80010d2:	06db      	lsls	r3, r3, #27
 80010d4:	d4e9      	bmi.n	80010aa <HAL_ADC_Init+0x6>
    ADC_STATE_CLR_SET(hadc->State,
 80010d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 80010d8:	4a4d      	ldr	r2, [pc, #308]	; (8001210 <HAL_ADC_Init+0x16c>)
    ADC_STATE_CLR_SET(hadc->State,
 80010da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010de:	f023 0302 	bic.w	r3, r3, #2
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 80010e8:	6853      	ldr	r3, [r2, #4]
 80010ea:	6861      	ldr	r1, [r4, #4]
 80010ec:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80010f0:	430b      	orrs	r3, r1
 80010f2:	6053      	str	r3, [r2, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010f8:	fa90 f0a0 	rbit	r0, r0
 80010fc:	2302      	movs	r3, #2
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 80010fe:	fab0 f080 	clz	r0, r0
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 8001102:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001104:	fa93 f3a3 	rbit	r3, r3
 8001108:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 800110c:	6965      	ldr	r5, [r4, #20]
 800110e:	68e2      	ldr	r2, [r4, #12]
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8001114:	432a      	orrs	r2, r5
 8001116:	6a25      	ldr	r5, [r4, #32]
 8001118:	432a      	orrs	r2, r5
 800111a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800111c:	fa05 f000 	lsl.w	r0, r5, r0
 8001120:	4302      	orrs	r2, r0
                hadc->Init.ChannelsBank                              |
 8001122:	4313      	orrs	r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001124:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001126:	6925      	ldr	r5, [r4, #16]
 8001128:	2a10      	cmp	r2, #16
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800112a:	bf1c      	itt	ne
 800112c:	6ba0      	ldrne	r0, [r4, #56]	; 0x38
 800112e:	4302      	orrne	r2, r0
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001130:	6820      	ldr	r0, [r4, #0]
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001132:	bf18      	it	ne
 8001134:	4313      	orrne	r3, r2
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001136:	6802      	ldr	r2, [r0, #0]
 8001138:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800113c:	d123      	bne.n	8001186 <HAL_ADC_Init+0xe2>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800113e:	69a6      	ldr	r6, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001140:	69e7      	ldr	r7, [r4, #28]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001142:	4333      	orrs	r3, r6
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001144:	68a6      	ldr	r6, [r4, #8]
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001146:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800114a:	ea46 0607 	orr.w	r6, r6, r7
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800114e:	d043      	beq.n	80011d8 <HAL_ADC_Init+0x134>
 8001150:	2d01      	cmp	r5, #1
 8001152:	bf08      	it	eq
 8001154:	f44f 7280 	moveq.w	r2, #256	; 0x100
                  hadc->Init.LowPowerAutoPowerOff           |
 8001158:	4332      	orrs	r2, r6
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800115a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800115c:	2e01      	cmp	r6, #1
 800115e:	d10d      	bne.n	800117c <HAL_ADC_Init+0xd8>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001160:	2900      	cmp	r1, #0
 8001162:	d13b      	bne.n	80011dc <HAL_ADC_Init+0x138>
 8001164:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001168:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800116c:	fab1 f681 	clz	r6, r1
 8001170:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001172:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001176:	3901      	subs	r1, #1
 8001178:	40b1      	lsls	r1, r6
 800117a:	430a      	orrs	r2, r1
        MODIFY_REG(hadc->Instance->CR1,
 800117c:	6846      	ldr	r6, [r0, #4]
 800117e:	4925      	ldr	r1, [pc, #148]	; (8001214 <HAL_ADC_Init+0x170>)
 8001180:	4031      	ands	r1, r6
 8001182:	430a      	orrs	r2, r1
 8001184:	6042      	str	r2, [r0, #4]
    MODIFY_REG(hadc->Instance->CR2    ,
 8001186:	6881      	ldr	r1, [r0, #8]
 8001188:	4a23      	ldr	r2, [pc, #140]	; (8001218 <HAL_ADC_Init+0x174>)
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800118a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 800118e:	ea02 0201 	and.w	r2, r2, r1
 8001192:	ea42 0203 	orr.w	r2, r2, r3
 8001196:	6082      	str	r2, [r0, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001198:	d001      	beq.n	800119e <HAL_ADC_Init+0xfa>
 800119a:	2d01      	cmp	r5, #1
 800119c:	d127      	bne.n	80011ee <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800119e:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80011a0:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80011a4:	fa92 f2a2 	rbit	r2, r2
 80011a8:	fab2 f182 	clz	r1, r2
 80011ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80011ae:	3a01      	subs	r2, #1
 80011b0:	408a      	lsls	r2, r1
 80011b2:	f025 71f8 	bic.w	r1, r5, #32505856	; 0x1f00000
 80011b6:	430a      	orrs	r2, r1
      MODIFY_REG(hadc->Instance->SQR1,
 80011b8:	6302      	str	r2, [r0, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80011ba:	6881      	ldr	r1, [r0, #8]
 80011bc:	4a17      	ldr	r2, [pc, #92]	; (800121c <HAL_ADC_Init+0x178>)
 80011be:	400a      	ands	r2, r1
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d118      	bne.n	80011f6 <HAL_ADC_Init+0x152>
      ADC_CLEAR_ERRORCODE(hadc);
 80011c4:	2000      	movs	r0, #0
 80011c6:	6520      	str	r0, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 80011c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80011ca:	f023 0303 	bic.w	r3, r3, #3
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80011d4:	b003      	add	sp, #12
 80011d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80011d8:	462a      	mov	r2, r5
 80011da:	e7bd      	b.n	8001158 <HAL_ADC_Init+0xb4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011dc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80011de:	f041 0120 	orr.w	r1, r1, #32
 80011e2:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80011e6:	f041 0101 	orr.w	r1, r1, #1
 80011ea:	6521      	str	r1, [r4, #80]	; 0x50
 80011ec:	e7c6      	b.n	800117c <HAL_ADC_Init+0xd8>
      MODIFY_REG(hadc->Instance->SQR1,
 80011ee:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80011f0:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80011f4:	e7e0      	b.n	80011b8 <HAL_ADC_Init+0x114>
      ADC_STATE_CLR_SET(hadc->State,
 80011f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80011f8:	f023 0312 	bic.w	r3, r3, #18
 80011fc:	f043 0310 	orr.w	r3, r3, #16
 8001200:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001202:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6523      	str	r3, [r4, #80]	; 0x50
 800120a:	e74e      	b.n	80010aa <HAL_ADC_Init+0x6>
 800120c:	40023800 	.word	0x40023800
 8001210:	40012700 	.word	0x40012700
 8001214:	fcfc16ff 	.word	0xfcfc16ff
 8001218:	c0fff189 	.word	0xc0fff189
 800121c:	bf80fffe 	.word	0xbf80fffe

08001220 <HAL_ADC_ConvCpltCallback>:
 8001220:	4770      	bx	lr

08001222 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001222:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001224:	b510      	push	{r4, lr}
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001228:	f012 0f50 	tst.w	r2, #80	; 0x50
 800122c:	d124      	bne.n	8001278 <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800122e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001234:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	6891      	ldr	r1, [r2, #8]
 800123a:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 800123e:	d117      	bne.n	8001270 <ADC_DMAConvCplt+0x4e>
 8001240:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001242:	b9a9      	cbnz	r1, 8001270 <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001244:	6b11      	ldr	r1, [r2, #48]	; 0x30
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001246:	f011 7ff8 	tst.w	r1, #32505856	; 0x1f00000
 800124a:	d002      	beq.n	8001252 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800124c:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800124e:	0549      	lsls	r1, r1, #21
 8001250:	d40e      	bmi.n	8001270 <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001252:	6851      	ldr	r1, [r2, #4]
 8001254:	f021 0120 	bic.w	r1, r1, #32
 8001258:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800125a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800125c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001260:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001262:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001264:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001266:	bf5e      	ittt	pl
 8001268:	6cda      	ldrpl	r2, [r3, #76]	; 0x4c
 800126a:	f042 0201 	orrpl.w	r2, r2, #1
 800126e:	64da      	strpl	r2, [r3, #76]	; 0x4c
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ffd5 	bl	8001220 <HAL_ADC_ConvCpltCallback>
 8001276:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  }
}
 800127a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	4718      	bx	r3

08001282 <HAL_ADC_ConvHalfCpltCallback>:
 8001282:	4770      	bx	lr

08001284 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001284:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001286:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001288:	f7ff fffb 	bl	8001282 <HAL_ADC_ConvHalfCpltCallback>
 800128c:	bd08      	pop	{r3, pc}

0800128e <HAL_ADC_ErrorCallback>:
{
 800128e:	4770      	bx	lr

08001290 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001290:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001292:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001294:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800129a:	64c3      	str	r3, [r0, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800129c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6503      	str	r3, [r0, #80]	; 0x50
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 80012a4:	f7ff fff3 	bl	800128e <HAL_ADC_ErrorCallback>
 80012a8:	bd08      	pop	{r3, pc}
	...

080012ac <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 80012ac:	2300      	movs	r3, #0
{
 80012ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 80012b0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80012b2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	f000 809c 	beq.w	80013f4 <HAL_ADC_ConfigChannel+0x148>
 80012bc:	2301      	movs	r3, #1
  if (sConfig->Rank < 7)
 80012be:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80012c0:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 80012c4:	2d06      	cmp	r5, #6
 80012c6:	6804      	ldr	r4, [r0, #0]
 80012c8:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80012cc:	680a      	ldr	r2, [r1, #0]
 80012ce:	d821      	bhi.n	8001314 <HAL_ADC_ConfigChannel+0x68>
    MODIFY_REG(hadc->Instance->SQR5,
 80012d0:	442b      	add	r3, r5
 80012d2:	251f      	movs	r5, #31
 80012d4:	6c26      	ldr	r6, [r4, #64]	; 0x40
 80012d6:	3b05      	subs	r3, #5
 80012d8:	409d      	lsls	r5, r3
 80012da:	ea26 0505 	bic.w	r5, r6, r5
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	432b      	orrs	r3, r5
 80012e4:	6423      	str	r3, [r4, #64]	; 0x40
  if (sConfig->Channel < ADC_CHANNEL_10)
 80012e6:	2a09      	cmp	r2, #9
 80012e8:	d84a      	bhi.n	8001380 <HAL_ADC_ConfigChannel+0xd4>
    MODIFY_REG(hadc->Instance->SMPR3,
 80012ea:	2507      	movs	r5, #7
 80012ec:	6963      	ldr	r3, [r4, #20]
 80012ee:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 80012f2:	6889      	ldr	r1, [r1, #8]
 80012f4:	40b5      	lsls	r5, r6
 80012f6:	ea23 0305 	bic.w	r3, r3, r5
 80012fa:	40b1      	lsls	r1, r6
 80012fc:	430b      	orrs	r3, r1
 80012fe:	6163      	str	r3, [r4, #20]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001300:	f1a2 0310 	sub.w	r3, r2, #16
 8001304:	2b01      	cmp	r3, #1
 8001306:	d95d      	bls.n	80013c4 <HAL_ADC_ConfigChannel+0x118>
  __HAL_UNLOCK(hadc);
 8001308:	2300      	movs	r3, #0
 800130a:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  return tmp_hal_status;
 800130e:	4618      	mov	r0, r3
}
 8001310:	b002      	add	sp, #8
 8001312:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13)
 8001314:	2d0c      	cmp	r5, #12
 8001316:	d80b      	bhi.n	8001330 <HAL_ADC_ConfigChannel+0x84>
    MODIFY_REG(hadc->Instance->SQR4,
 8001318:	442b      	add	r3, r5
 800131a:	251f      	movs	r5, #31
 800131c:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800131e:	3b23      	subs	r3, #35	; 0x23
 8001320:	409d      	lsls	r5, r3
 8001322:	ea26 0505 	bic.w	r5, r6, r5
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	432b      	orrs	r3, r5
 800132c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800132e:	e7da      	b.n	80012e6 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 19)
 8001330:	2d12      	cmp	r5, #18
 8001332:	d80b      	bhi.n	800134c <HAL_ADC_ConfigChannel+0xa0>
    MODIFY_REG(hadc->Instance->SQR3,
 8001334:	442b      	add	r3, r5
 8001336:	251f      	movs	r5, #31
 8001338:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800133a:	3b41      	subs	r3, #65	; 0x41
 800133c:	409d      	lsls	r5, r3
 800133e:	ea26 0505 	bic.w	r5, r6, r5
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	432b      	orrs	r3, r5
 8001348:	63a3      	str	r3, [r4, #56]	; 0x38
 800134a:	e7cc      	b.n	80012e6 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 25)
 800134c:	2d18      	cmp	r5, #24
 800134e:	d80b      	bhi.n	8001368 <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SQR2,
 8001350:	442b      	add	r3, r5
 8001352:	251f      	movs	r5, #31
 8001354:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8001356:	3b5f      	subs	r3, #95	; 0x5f
 8001358:	409d      	lsls	r5, r3
 800135a:	ea26 0505 	bic.w	r5, r6, r5
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	432b      	orrs	r3, r5
 8001364:	6363      	str	r3, [r4, #52]	; 0x34
 8001366:	e7be      	b.n	80012e6 <HAL_ADC_ConfigChannel+0x3a>
    MODIFY_REG(hadc->Instance->SQR1,
 8001368:	442b      	add	r3, r5
 800136a:	251f      	movs	r5, #31
 800136c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800136e:	3b7d      	subs	r3, #125	; 0x7d
 8001370:	409d      	lsls	r5, r3
 8001372:	ea26 0505 	bic.w	r5, r6, r5
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	432b      	orrs	r3, r5
 800137c:	6323      	str	r3, [r4, #48]	; 0x30
 800137e:	e7b2      	b.n	80012e6 <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001380:	2a13      	cmp	r2, #19
 8001382:	d80d      	bhi.n	80013a0 <HAL_ADC_ConfigChannel+0xf4>
    MODIFY_REG(hadc->Instance->SMPR2,
 8001384:	2607      	movs	r6, #7
 8001386:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800138a:	6923      	ldr	r3, [r4, #16]
 800138c:	3d1e      	subs	r5, #30
 800138e:	6889      	ldr	r1, [r1, #8]
 8001390:	40ae      	lsls	r6, r5
 8001392:	ea23 0306 	bic.w	r3, r3, r6
 8001396:	fa01 f505 	lsl.w	r5, r1, r5
 800139a:	432b      	orrs	r3, r5
 800139c:	6123      	str	r3, [r4, #16]
 800139e:	e7af      	b.n	8001300 <HAL_ADC_ConfigChannel+0x54>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80013a0:	2a1a      	cmp	r2, #26
 80013a2:	d80d      	bhi.n	80013c0 <HAL_ADC_ConfigChannel+0x114>
    MODIFY_REG(hadc->Instance->SMPR1,
 80013a4:	2607      	movs	r6, #7
 80013a6:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80013aa:	68e3      	ldr	r3, [r4, #12]
 80013ac:	3d3c      	subs	r5, #60	; 0x3c
 80013ae:	6889      	ldr	r1, [r1, #8]
 80013b0:	40ae      	lsls	r6, r5
 80013b2:	ea23 0306 	bic.w	r3, r3, r6
 80013b6:	fa01 f505 	lsl.w	r5, r1, r5
 80013ba:	432b      	orrs	r3, r5
 80013bc:	60e3      	str	r3, [r4, #12]
 80013be:	e79f      	b.n	8001300 <HAL_ADC_ConfigChannel+0x54>
  __ASM volatile ("nop");
 80013c0:	bf00      	nop
 80013c2:	e79d      	b.n	8001300 <HAL_ADC_ConfigChannel+0x54>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_ADC_ConfigChannel+0x14c>)
 80013c6:	6859      	ldr	r1, [r3, #4]
 80013c8:	0209      	lsls	r1, r1, #8
 80013ca:	d49d      	bmi.n	8001308 <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80013cc:	6859      	ldr	r1, [r3, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013ce:	2a10      	cmp	r2, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80013d0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80013d4:	6059      	str	r1, [r3, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013d6:	d197      	bne.n	8001308 <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HAL_ADC_ConfigChannel+0x150>)
 80013da:	4a09      	ldr	r2, [pc, #36]	; (8001400 <HAL_ADC_ConfigChannel+0x154>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	fbb3 f2f2 	udiv	r2, r3, r2
 80013e2:	230a      	movs	r3, #10
 80013e4:	4353      	muls	r3, r2
            wait_loop_index--;
 80013e6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 80013e8:	9b01      	ldr	r3, [sp, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d08c      	beq.n	8001308 <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 80013ee:	9b01      	ldr	r3, [sp, #4]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	e7f8      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x13a>
  __HAL_LOCK(hadc);
 80013f4:	2002      	movs	r0, #2
 80013f6:	e78b      	b.n	8001310 <HAL_ADC_ConfigChannel+0x64>
 80013f8:	40012700 	.word	0x40012700
 80013fc:	20000010 	.word	0x20000010
 8001400:	000f4240 	.word	0x000f4240

08001404 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 8001404:	2300      	movs	r3, #0
{
 8001406:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8001408:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800140a:	6803      	ldr	r3, [r0, #0]
{
 800140c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	0652      	lsls	r2, r2, #25
 8001412:	d502      	bpl.n	800141a <ADC_Enable+0x16>
  return HAL_OK;
 8001414:	2000      	movs	r0, #0
}
 8001416:	b002      	add	sp, #8
 8001418:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	f042 0201 	orr.w	r2, r2, #1
 8001420:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <ADC_Enable+0x6c>)
 8001424:	4a13      	ldr	r2, [pc, #76]	; (8001474 <ADC_Enable+0x70>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	fbb3 f3f2 	udiv	r3, r3, r2
 800142c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      wait_loop_index--;
 8001430:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8001432:	9b01      	ldr	r3, [sp, #4]
 8001434:	b9c3      	cbnz	r3, 8001468 <ADC_Enable+0x64>
    tickstart = HAL_GetTick();    
 8001436:	f7ff fe21 	bl	800107c <HAL_GetTick>
 800143a:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800143c:	6823      	ldr	r3, [r4, #0]
 800143e:	681d      	ldr	r5, [r3, #0]
 8001440:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001444:	d1e6      	bne.n	8001414 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001446:	f7ff fe19 	bl	800107c <HAL_GetTick>
 800144a:	1b80      	subs	r0, r0, r6
 800144c:	2802      	cmp	r0, #2
 800144e:	d9f5      	bls.n	800143c <ADC_Enable+0x38>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001450:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        __HAL_UNLOCK(hadc);
 8001452:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001456:	f043 0310 	orr.w	r3, r3, #16
 800145a:	64e3      	str	r3, [r4, #76]	; 0x4c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145c:	6d23      	ldr	r3, [r4, #80]	; 0x50
        __HAL_UNLOCK(hadc);
 800145e:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6523      	str	r3, [r4, #80]	; 0x50
 8001466:	e7d6      	b.n	8001416 <ADC_Enable+0x12>
      wait_loop_index--;
 8001468:	9b01      	ldr	r3, [sp, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	e7e0      	b.n	8001430 <ADC_Enable+0x2c>
 800146e:	bf00      	nop
 8001470:	20000010 	.word	0x20000010
 8001474:	000f4240 	.word	0x000f4240

08001478 <HAL_ADC_Start_DMA>:
{
 8001478:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 800147c:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 8001480:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001482:	2b01      	cmp	r3, #1
{
 8001484:	460f      	mov	r7, r1
 8001486:	4690      	mov	r8, r2
  __HAL_LOCK(hadc);
 8001488:	d04e      	beq.n	8001528 <HAL_ADC_Start_DMA+0xb0>
 800148a:	2301      	movs	r3, #1
 800148c:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 8001490:	f7ff ffb8 	bl	8001404 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001494:	4606      	mov	r6, r0
 8001496:	2800      	cmp	r0, #0
 8001498:	d143      	bne.n	8001522 <HAL_ADC_Start_DMA+0xaa>
    ADC_STATE_CLR_SET(hadc->State,
 800149a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800149c:	6821      	ldr	r1, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 800149e:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80014a2:	f020 0001 	bic.w	r0, r0, #1
 80014a6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80014aa:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014ac:	684b      	ldr	r3, [r1, #4]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014ae:	463a      	mov	r2, r7
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014b0:	055b      	lsls	r3, r3, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014b2:	bf48      	it	mi
 80014b4:	6ce0      	ldrmi	r0, [r4, #76]	; 0x4c
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014b6:	f101 0158 	add.w	r1, r1, #88	; 0x58
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014ba:	bf42      	ittt	mi
 80014bc:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80014c0:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80014c4:	64e0      	strmi	r0, [r4, #76]	; 0x4c
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014c8:	6c60      	ldr	r0, [r4, #68]	; 0x44
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014ca:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014ce:	bf1c      	itt	ne
 80014d0:	6d23      	ldrne	r3, [r4, #80]	; 0x50
 80014d2:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80014d6:	6523      	str	r3, [r4, #80]	; 0x50
    __HAL_UNLOCK(hadc);
 80014d8:	2300      	movs	r3, #0
 80014da:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <HAL_ADC_Start_DMA+0xb4>)
 80014e0:	6283      	str	r3, [r0, #40]	; 0x28
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <HAL_ADC_Start_DMA+0xb8>)
 80014e4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_ADC_Start_DMA+0xbc>)
 80014e8:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014ea:	f06f 0322 	mvn.w	r3, #34	; 0x22
 80014ee:	f841 3c58 	str.w	r3, [r1, #-88]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014f2:	f851 3c54 	ldr.w	r3, [r1, #-84]
 80014f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014fa:	f841 3c54 	str.w	r3, [r1, #-84]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80014fe:	f851 3c50 	ldr.w	r3, [r1, #-80]
 8001502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001506:	f841 3c50 	str.w	r3, [r1, #-80]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800150a:	4643      	mov	r3, r8
 800150c:	f000 f912 	bl	8001734 <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001510:	6823      	ldr	r3, [r4, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001518:	d103      	bne.n	8001522 <HAL_ADC_Start_DMA+0xaa>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001520:	609a      	str	r2, [r3, #8]
}
 8001522:	4630      	mov	r0, r6
 8001524:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
  __HAL_LOCK(hadc);
 8001528:	2602      	movs	r6, #2
 800152a:	e7fa      	b.n	8001522 <HAL_ADC_Start_DMA+0xaa>
 800152c:	08001223 	.word	0x08001223
 8001530:	08001285 	.word	0x08001285
 8001534:	08001291 	.word	0x08001291

08001538 <ADC_ConversionStop_Disable>:
{
 8001538:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800153a:	6803      	ldr	r3, [r0, #0]
{
 800153c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	0652      	lsls	r2, r2, #25
 8001542:	d401      	bmi.n	8001548 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001544:	2000      	movs	r0, #0
 8001546:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001550:	f7ff fd94 	bl	800107c <HAL_GetTick>
 8001554:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	065b      	lsls	r3, r3, #25
 800155c:	d5f2      	bpl.n	8001544 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800155e:	f7ff fd8d 	bl	800107c <HAL_GetTick>
 8001562:	1b40      	subs	r0, r0, r5
 8001564:	2802      	cmp	r0, #2
 8001566:	d9f6      	bls.n	8001556 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001568:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800156c:	f043 0310 	orr.w	r3, r3, #16
 8001570:	64e3      	str	r3, [r4, #76]	; 0x4c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001572:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6523      	str	r3, [r4, #80]	; 0x50
 800157a:	bd38      	pop	{r3, r4, r5, pc}

0800157c <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 800157c:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 8001580:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001582:	2b01      	cmp	r3, #1
{
 8001584:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001586:	d022      	beq.n	80015ce <HAL_ADC_Stop_DMA+0x52>
 8001588:	2301      	movs	r3, #1
 800158a:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800158e:	f7ff ffd3 	bl	8001538 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8001592:	b9a8      	cbnz	r0, 80015c0 <HAL_ADC_Stop_DMA+0x44>
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001594:	6822      	ldr	r2, [r4, #0]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001596:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001598:	6893      	ldr	r3, [r2, #8]
 800159a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800159e:	6093      	str	r3, [r2, #8]
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80015a0:	f000 f906 	bl	80017b0 <HAL_DMA_Abort>
      ADC_STATE_CLR_SET(hadc->State,
 80015a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    if (tmp_hal_status == HAL_OK)
 80015a6:	b978      	cbnz	r0, 80015c8 <HAL_ADC_Stop_DMA+0x4c>
      ADC_STATE_CLR_SET(hadc->State,
 80015a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015ac:	f023 0301 	bic.w	r3, r3, #1
 80015b0:	f043 0301 	orr.w	r3, r3, #1
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80015b4:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80015b6:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80015b8:	6853      	ldr	r3, [r2, #4]
 80015ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80015be:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hadc);
 80015c0:	2300      	movs	r3, #0
 80015c2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return tmp_hal_status;
 80015c6:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80015c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015cc:	e7f2      	b.n	80015b4 <HAL_ADC_Stop_DMA+0x38>
  __HAL_LOCK(hadc);
 80015ce:	2002      	movs	r0, #2
}
 80015d0:	bd10      	pop	{r4, pc}
	...

080015d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d4:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80015d6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80015da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015e2:	041b      	lsls	r3, r3, #16
 80015e4:	0c1b      	lsrs	r3, r3, #16
 80015e6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80015ee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80015f0:	60d3      	str	r3, [r2, #12]
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fa:	b530      	push	{r4, r5, lr}
 80015fc:	68dc      	ldr	r4, [r3, #12]
 80015fe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001602:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	2b04      	cmp	r3, #4
 800160a:	bf28      	it	cs
 800160c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001614:	bf98      	it	ls
 8001616:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	fa05 f303 	lsl.w	r3, r5, r3
 800161c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001620:	bf88      	it	hi
 8001622:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4019      	ands	r1, r3
 8001626:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001628:	fa05 f404 	lsl.w	r4, r5, r4
 800162c:	3c01      	subs	r4, #1
 800162e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001630:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001632:	ea42 0201 	orr.w	r2, r2, r1
 8001636:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	bfaf      	iteee	ge
 800163c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	4b06      	ldrlt	r3, [pc, #24]	; (800165c <HAL_NVIC_SetPriority+0x64>)
 8001642:	f000 000f 	andlt.w	r0, r0, #15
 8001646:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	bfa5      	ittet	ge
 800164a:	b2d2      	uxtbge	r2, r2
 800164c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001650:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001656:	bd30      	pop	{r4, r5, pc}
 8001658:	e000ed00 	.word	0xe000ed00
 800165c:	e000ed14 	.word	0xe000ed14

08001660 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001660:	2301      	movs	r3, #1
 8001662:	0942      	lsrs	r2, r0, #5
 8001664:	f000 001f 	and.w	r0, r0, #31
 8001668:	fa03 f000 	lsl.w	r0, r3, r0
 800166c:	4b01      	ldr	r3, [pc, #4]	; (8001674 <HAL_NVIC_EnableIRQ+0x14>)
 800166e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100

08001678 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001678:	3801      	subs	r0, #1
 800167a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800167e:	d20a      	bcs.n	8001696 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001686:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001688:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800168c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001696:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000e010 	.word	0xe000e010
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80016a4:	b510      	push	{r4, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80016a6:	2800      	cmp	r0, #0
 80016a8:	d039      	beq.n	800171e <HAL_DMA_Init+0x7a>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80016aa:	6801      	ldr	r1, [r0, #0]
 80016ac:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <HAL_DMA_Init+0x80>)
 80016ae:	2414      	movs	r4, #20
 80016b0:	4299      	cmp	r1, r3
 80016b2:	d82c      	bhi.n	800170e <HAL_DMA_Init+0x6a>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016b4:	4a1c      	ldr	r2, [pc, #112]	; (8001728 <HAL_DMA_Init+0x84>)
    hdma->DmaBaseAddress = DMA1;
 80016b6:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016ba:	440a      	add	r2, r1
 80016bc:	fbb2 f2f4 	udiv	r2, r2, r4
 80016c0:	0092      	lsls	r2, r2, #2
 80016c2:	6402      	str	r2, [r0, #64]	; 0x40
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 80016c4:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016c6:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016c8:	6884      	ldr	r4, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 80016ca:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp |=  hdma->Init.Direction        |
 80016ce:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 80016d0:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80016d2:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d4:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016d6:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016da:	4323      	orrs	r3, r4
 80016dc:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016de:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e2:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e4:	6944      	ldr	r4, [r0, #20]
 80016e6:	4323      	orrs	r3, r4
 80016e8:	6984      	ldr	r4, [r0, #24]
 80016ea:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ec:	69c4      	ldr	r4, [r0, #28]
 80016ee:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80016f0:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80016f2:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016f4:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 80016f6:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f8:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->XferCpltCallback = NULL;
 80016fa:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80016fc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80016fe:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001700:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_READY;
 8001702:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001706:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 800170a:	4618      	mov	r0, r3
 800170c:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <HAL_DMA_Init+0x88>)
 8001710:	440b      	add	r3, r1
 8001712:	fbb3 f3f4 	udiv	r3, r3, r4
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_DMA_Init+0x8c>)
 800171c:	e7d2      	b.n	80016c4 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 800171e:	2001      	movs	r0, #1
}
 8001720:	bd10      	pop	{r4, pc}
 8001722:	bf00      	nop
 8001724:	40026407 	.word	0x40026407
 8001728:	bffd9ff8 	.word	0xbffd9ff8
 800172c:	bffd9bf8 	.word	0xbffd9bf8
 8001730:	40026400 	.word	0x40026400

08001734 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001734:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001736:	f890 4020 	ldrb.w	r4, [r0, #32]
 800173a:	2c01      	cmp	r4, #1
 800173c:	d036      	beq.n	80017ac <HAL_DMA_Start_IT+0x78>
 800173e:	2401      	movs	r4, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8001740:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001744:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001748:	b2ed      	uxtb	r5, r5
 800174a:	42a5      	cmp	r5, r4
 800174c:	f04f 0600 	mov.w	r6, #0
 8001750:	f04f 0402 	mov.w	r4, #2
 8001754:	d128      	bne.n	80017a8 <HAL_DMA_Start_IT+0x74>
  {
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001756:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800175a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800175c:	6386      	str	r6, [r0, #56]	; 0x38
  __HAL_DMA_DISABLE(hdma);
 800175e:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001760:	6c07      	ldr	r7, [r0, #64]	; 0x40
  __HAL_DMA_DISABLE(hdma);
 8001762:	f026 0601 	bic.w	r6, r6, #1
 8001766:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001768:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 800176a:	40bd      	lsls	r5, r7
 800176c:	6075      	str	r5, [r6, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800176e:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001770:	6843      	ldr	r3, [r0, #4]
 8001772:	6805      	ldr	r5, [r0, #0]
 8001774:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8001776:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001778:	bf0b      	itete	eq
 800177a:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800177c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800177e:	60e1      	streq	r1, [r4, #12]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001780:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001782:	b14b      	cbz	r3, 8001798 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001784:	6823      	ldr	r3, [r4, #0]
 8001786:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800178a:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);
 800178c:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800178e:	2000      	movs	r0, #0
  __HAL_DMA_ENABLE(hdma);
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	602b      	str	r3, [r5, #0]
 8001796:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001798:	6823      	ldr	r3, [r4, #0]
 800179a:	f023 0304 	bic.w	r3, r3, #4
 800179e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	f043 030a 	orr.w	r3, r3, #10
 80017a6:	e7f0      	b.n	800178a <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 80017a8:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80017ac:	2002      	movs	r0, #2
} 
 80017ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017b0 <HAL_DMA_Abort>:
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b0:	6802      	ldr	r2, [r0, #0]
{
 80017b2:	4603      	mov	r3, r0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b4:	6811      	ldr	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = ((DMA_ISR_GIF1) << (hdma->ChannelIndex));
 80017b6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b8:	f021 010e 	bic.w	r1, r1, #14
 80017bc:	6011      	str	r1, [r2, #0]
  __HAL_DMA_DISABLE(hdma);
 80017be:	6811      	ldr	r1, [r2, #0]
 80017c0:	f021 0101 	bic.w	r1, r1, #1
 80017c4:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = ((DMA_ISR_GIF1) << (hdma->ChannelIndex));
 80017c6:	2101      	movs	r1, #1
 80017c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ca:	fa01 f202 	lsl.w	r2, r1, r2
 80017ce:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdma);
 80017d0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80017d2:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 80017d6:	f883 0020 	strb.w	r0, [r3, #32]
}
 80017da:	4770      	bx	lr

080017dc <HAL_DMA_IRQHandler>:
{
 80017dc:	b470      	push	{r4, r5, r6}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80017de:	2404      	movs	r4, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017e0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80017e2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017e4:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80017e6:	6803      	ldr	r3, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80017e8:	4094      	lsls	r4, r2
 80017ea:	4226      	tst	r6, r4
  uint32_t source_it = hdma->Instance->CCR;
 80017ec:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80017ee:	d00e      	beq.n	800180e <HAL_DMA_IRQHandler+0x32>
 80017f0:	f015 0f04 	tst.w	r5, #4
 80017f4:	d00b      	beq.n	800180e <HAL_DMA_IRQHandler+0x32>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017fa:	bf5e      	ittt	pl
 80017fc:	681a      	ldrpl	r2, [r3, #0]
 80017fe:	f022 0204 	bicpl.w	r2, r2, #4
 8001802:	601a      	strpl	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001804:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      hdma->DmaBaseAddress->IFCR  = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8001806:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001808:	b373      	cbz	r3, 8001868 <HAL_DMA_IRQHandler+0x8c>
}
 800180a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800180c:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800180e:	2402      	movs	r4, #2
 8001810:	4094      	lsls	r4, r2
 8001812:	4226      	tst	r6, r4
 8001814:	d012      	beq.n	800183c <HAL_DMA_IRQHandler+0x60>
 8001816:	f015 0f02 	tst.w	r5, #2
 800181a:	d00f      	beq.n	800183c <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	0695      	lsls	r5, r2, #26
 8001820:	d406      	bmi.n	8001830 <HAL_DMA_IRQHandler+0x54>
    __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	f022 020a 	bic.w	r2, r2, #10
 8001828:	601a      	str	r2, [r3, #0]
    hdma->State = HAL_DMA_STATE_READY;
 800182a:	2301      	movs	r3, #1
 800182c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001830:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 8001832:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001834:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001838:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800183a:	e7e5      	b.n	8001808 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800183c:	2408      	movs	r4, #8
 800183e:	4094      	lsls	r4, r2
 8001840:	4234      	tst	r4, r6
 8001842:	d011      	beq.n	8001868 <HAL_DMA_IRQHandler+0x8c>
 8001844:	072c      	lsls	r4, r5, #28
 8001846:	d50f      	bpl.n	8001868 <HAL_DMA_IRQHandler+0x8c>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001848:	681c      	ldr	r4, [r3, #0]
 800184a:	f024 040e 	bic.w	r4, r4, #14
 800184e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR  = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001850:	2301      	movs	r3, #1
 8001852:	fa03 f202 	lsl.w	r2, r3, r2
 8001856:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001858:	6383      	str	r3, [r0, #56]	; 0x38
      hdma->State = HAL_DMA_STATE_READY;
 800185a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_UNLOCK(hdma);
 800185e:	2300      	movs	r3, #0
 8001860:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001864:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001866:	e7cf      	b.n	8001808 <HAL_DMA_IRQHandler+0x2c>
}
 8001868:	bc70      	pop	{r4, r5, r6}
 800186a:	4770      	bx	lr

0800186c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 800186c:	2300      	movs	r3, #0
{ 
 800186e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001872:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001876:	f8df 9168 	ldr.w	r9, [pc, #360]	; 80019e0 <HAL_GPIO_Init+0x174>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800187a:	4a57      	ldr	r2, [pc, #348]	; (80019d8 <HAL_GPIO_Init+0x16c>)
  while (((GPIO_Init->Pin) >> position) != 0)
 800187c:	fa38 f403 	lsrs.w	r4, r8, r3
 8001880:	d102      	bne.n	8001888 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  } 
}
 8001882:	b003      	add	sp, #12
 8001884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001888:	2401      	movs	r4, #1
 800188a:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 800188e:	ea18 050a 	ands.w	r5, r8, sl
 8001892:	f000 8099 	beq.w	80019c8 <HAL_GPIO_Init+0x15c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001896:	684c      	ldr	r4, [r1, #4]
 8001898:	f024 0b10 	bic.w	fp, r4, #16
 800189c:	f1bb 0f02 	cmp.w	fp, #2
 80018a0:	d114      	bne.n	80018cc <HAL_GPIO_Init+0x60>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80018a2:	270f      	movs	r7, #15
        temp = GPIOx->AFR[position >> 3];
 80018a4:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80018a8:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80018ac:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80018b0:	f8de 6020 	ldr.w	r6, [lr, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80018b4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80018b8:	fa07 f70c 	lsl.w	r7, r7, ip
 80018bc:	ea26 0707 	bic.w	r7, r6, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80018c0:	690e      	ldr	r6, [r1, #16]
 80018c2:	fa06 f60c 	lsl.w	r6, r6, ip
 80018c6:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 80018c8:	f8ce 6020 	str.w	r6, [lr, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80018cc:	2703      	movs	r7, #3
 80018ce:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80018d2:	fa07 f70c 	lsl.w	r7, r7, ip
 80018d6:	43ff      	mvns	r7, r7
      temp = GPIOx->MODER;
 80018d8:	6806      	ldr	r6, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018da:	f004 0e03 	and.w	lr, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80018de:	403e      	ands	r6, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018e0:	fa0e fe0c 	lsl.w	lr, lr, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e4:	f10b 3bff 	add.w	fp, fp, #4294967295
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018e8:	ea4e 0606 	orr.w	r6, lr, r6
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ec:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80018f0:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018f2:	d811      	bhi.n	8001918 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR; 
 80018f4:	6886      	ldr	r6, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018f6:	ea06 0b07 	and.w	fp, r6, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80018fa:	68ce      	ldr	r6, [r1, #12]
 80018fc:	fa06 fe0c 	lsl.w	lr, r6, ip
 8001900:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8001904:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001906:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001908:	ea26 0a0a 	bic.w	sl, r6, sl
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800190c:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001910:	409e      	lsls	r6, r3
 8001912:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8001916:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001918:	68c6      	ldr	r6, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800191a:	4037      	ands	r7, r6
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800191c:	688e      	ldr	r6, [r1, #8]
 800191e:	fa06 f60c 	lsl.w	r6, r6, ip
 8001922:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001924:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8001926:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001928:	d54e      	bpl.n	80019c8 <HAL_GPIO_Init+0x15c>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800192a:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	f8d9 6020 	ldr.w	r6, [r9, #32]
 8001932:	f023 0703 	bic.w	r7, r3, #3
 8001936:	f046 0601 	orr.w	r6, r6, #1
 800193a:	f8c9 6020 	str.w	r6, [r9, #32]
 800193e:	f8d9 6020 	ldr.w	r6, [r9, #32]
 8001942:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001946:	f006 0601 	and.w	r6, r6, #1
 800194a:	9601      	str	r6, [sp, #4]
 800194c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001950:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001954:	9e01      	ldr	r6, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001956:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 800195a:	68be      	ldr	r6, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800195c:	fa0e fe0c 	lsl.w	lr, lr, ip
 8001960:	ea26 0e0e 	bic.w	lr, r6, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001964:	4e1d      	ldr	r6, [pc, #116]	; (80019dc <HAL_GPIO_Init+0x170>)
 8001966:	42b0      	cmp	r0, r6
 8001968:	d030      	beq.n	80019cc <HAL_GPIO_Init+0x160>
 800196a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800196e:	42b0      	cmp	r0, r6
 8001970:	d02e      	beq.n	80019d0 <HAL_GPIO_Init+0x164>
 8001972:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001976:	42b0      	cmp	r0, r6
 8001978:	d02c      	beq.n	80019d4 <HAL_GPIO_Init+0x168>
 800197a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800197e:	42b0      	cmp	r0, r6
 8001980:	bf14      	ite	ne
 8001982:	2605      	movne	r6, #5
 8001984:	2603      	moveq	r6, #3
 8001986:	fa06 f60c 	lsl.w	r6, r6, ip
 800198a:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800198e:	60be      	str	r6, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001990:	43ef      	mvns	r7, r5
        temp = EXTI->IMR;
 8001992:	6816      	ldr	r6, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001994:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001998:	bf0c      	ite	eq
 800199a:	403e      	andeq	r6, r7
          SET_BIT(temp, iocurrent); 
 800199c:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 800199e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 80019a0:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80019a6:	bf0c      	ite	eq
 80019a8:	403e      	andeq	r6, r7
          SET_BIT(temp, iocurrent); 
 80019aa:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 80019ac:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 80019ae:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80019b4:	bf0c      	ite	eq
 80019b6:	403e      	andeq	r6, r7
          SET_BIT(temp, iocurrent); 
 80019b8:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 80019ba:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80019bc:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019be:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80019c0:	bf54      	ite	pl
 80019c2:	403e      	andpl	r6, r7
          SET_BIT(temp, iocurrent); 
 80019c4:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 80019c6:	60d6      	str	r6, [r2, #12]
    position++;
 80019c8:	3301      	adds	r3, #1
 80019ca:	e757      	b.n	800187c <HAL_GPIO_Init+0x10>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019cc:	2600      	movs	r6, #0
 80019ce:	e7da      	b.n	8001986 <HAL_GPIO_Init+0x11a>
 80019d0:	2601      	movs	r6, #1
 80019d2:	e7d8      	b.n	8001986 <HAL_GPIO_Init+0x11a>
 80019d4:	2602      	movs	r6, #2
 80019d6:	e7d6      	b.n	8001986 <HAL_GPIO_Init+0x11a>
 80019d8:	40010400 	.word	0x40010400
 80019dc:	40020000 	.word	0x40020000
 80019e0:	40023800 	.word	0x40023800

080019e4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019e4:	6903      	ldr	r3, [r0, #16]
 80019e6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80019e8:	bf14      	ite	ne
 80019ea:	2001      	movne	r0, #1
 80019ec:	2000      	moveq	r0, #0
 80019ee:	4770      	bx	lr

080019f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f0:	b10a      	cbz	r2, 80019f6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80019f2:	6181      	str	r1, [r0, #24]
 80019f4:	4770      	bx	lr
 80019f6:	0409      	lsls	r1, r1, #16
 80019f8:	e7fb      	b.n	80019f2 <HAL_GPIO_WritePin+0x2>

080019fa <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019fa:	6802      	ldr	r2, [r0, #0]
 80019fc:	6953      	ldr	r3, [r2, #20]
 80019fe:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001a02:	d00d      	beq.n	8001a20 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a04:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001a08:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001a0a:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8001a0c:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001a0e:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a14:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001a18:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	4770      	bx	lr
  }
  return HAL_OK;
 8001a20:	4618      	mov	r0, r3
}
 8001a22:	4770      	bx	lr

08001a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a28:	4604      	mov	r4, r0
 8001a2a:	4617      	mov	r7, r2
 8001a2c:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a2e:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001a32:	b28e      	uxth	r6, r1
 8001a34:	6825      	ldr	r5, [r4, #0]
 8001a36:	f1b8 0f01 	cmp.w	r8, #1
 8001a3a:	bf0c      	ite	eq
 8001a3c:	696b      	ldreq	r3, [r5, #20]
 8001a3e:	69ab      	ldrne	r3, [r5, #24]
 8001a40:	ea36 0303 	bics.w	r3, r6, r3
 8001a44:	bf14      	ite	ne
 8001a46:	2001      	movne	r0, #1
 8001a48:	2000      	moveq	r0, #0
 8001a4a:	b908      	cbnz	r0, 8001a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a50:	696b      	ldr	r3, [r5, #20]
 8001a52:	055a      	lsls	r2, r3, #21
 8001a54:	d512      	bpl.n	8001a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a56:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8001a58:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a5e:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a60:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001a64:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001a66:	2304      	movs	r3, #4
 8001a68:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001a6a:	2300      	movs	r3, #0
      return HAL_ERROR;
 8001a6c:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8001a6e:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001a70:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001a74:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001a7c:	1c7b      	adds	r3, r7, #1
 8001a7e:	d0d9      	beq.n	8001a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001a80:	b94f      	cbnz	r7, 8001a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a82:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001a84:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a86:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001a88:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001a8c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001a90:	2003      	movs	r0, #3
 8001a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001a96:	f7ff faf1 	bl	800107c <HAL_GetTick>
 8001a9a:	eba0 0009 	sub.w	r0, r0, r9
 8001a9e:	4287      	cmp	r7, r0
 8001aa0:	d2c8      	bcs.n	8001a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001aa2:	e7ee      	b.n	8001a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001aa4 <I2C_WaitOnFlagUntilTimeout>:
{
 8001aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001aa8:	4604      	mov	r4, r0
 8001aaa:	4690      	mov	r8, r2
 8001aac:	461f      	mov	r7, r3
 8001aae:	9e08      	ldr	r6, [sp, #32]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ab0:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001ab4:	b28d      	uxth	r5, r1
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	f1b9 0f01 	cmp.w	r9, #1
 8001abc:	bf0c      	ite	eq
 8001abe:	695b      	ldreq	r3, [r3, #20]
 8001ac0:	699b      	ldrne	r3, [r3, #24]
 8001ac2:	ea35 0303 	bics.w	r3, r5, r3
 8001ac6:	bf0c      	ite	eq
 8001ac8:	2301      	moveq	r3, #1
 8001aca:	2300      	movne	r3, #0
 8001acc:	4543      	cmp	r3, r8
 8001ace:	d002      	beq.n	8001ad6 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001ad0:	2000      	movs	r0, #0
}
 8001ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001ad6:	1c7b      	adds	r3, r7, #1
 8001ad8:	d0ed      	beq.n	8001ab6 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001ada:	b95f      	cbnz	r7, 8001af4 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001adc:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001ade:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ae0:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001ae2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001ae6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001aea:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001af4:	f7ff fac2 	bl	800107c <HAL_GetTick>
 8001af8:	1b80      	subs	r0, r0, r6
 8001afa:	4287      	cmp	r7, r0
 8001afc:	d2db      	bcs.n	8001ab6 <I2C_WaitOnFlagUntilTimeout+0x12>
 8001afe:	e7ed      	b.n	8001adc <I2C_WaitOnFlagUntilTimeout+0x38>

08001b00 <I2C_WaitOnTXEFlagUntilTimeout>:
{  
 8001b00:	b570      	push	{r4, r5, r6, lr}
 8001b02:	4604      	mov	r4, r0
 8001b04:	460d      	mov	r5, r1
 8001b06:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b08:	6823      	ldr	r3, [r4, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	061b      	lsls	r3, r3, #24
 8001b0e:	d501      	bpl.n	8001b14 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001b10:	2000      	movs	r0, #0
 8001b12:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b14:	4620      	mov	r0, r4
 8001b16:	f7ff ff70 	bl	80019fa <I2C_IsAcknowledgeFailed>
 8001b1a:	b9a8      	cbnz	r0, 8001b48 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001b1c:	1c6a      	adds	r2, r5, #1
 8001b1e:	d0f3      	beq.n	8001b08 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001b20:	b965      	cbnz	r5, 8001b3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b22:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001b24:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b26:	f043 0320 	orr.w	r3, r3, #32
 8001b2a:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b2c:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001b2e:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b30:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001b32:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001b36:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001b3a:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001b3c:	f7ff fa9e 	bl	800107c <HAL_GetTick>
 8001b40:	1b80      	subs	r0, r0, r6
 8001b42:	4285      	cmp	r5, r0
 8001b44:	d2e0      	bcs.n	8001b08 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001b46:	e7ec      	b.n	8001b22 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001b48:	2001      	movs	r0, #1
}
 8001b4a:	bd70      	pop	{r4, r5, r6, pc}

08001b4c <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001b4c:	b570      	push	{r4, r5, r6, lr}
 8001b4e:	4604      	mov	r4, r0
 8001b50:	460d      	mov	r5, r1
 8001b52:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b54:	6820      	ldr	r0, [r4, #0]
 8001b56:	6943      	ldr	r3, [r0, #20]
 8001b58:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001b5c:	d001      	beq.n	8001b62 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001b5e:	2000      	movs	r0, #0
}
 8001b60:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001b62:	6942      	ldr	r2, [r0, #20]
 8001b64:	06d2      	lsls	r2, r2, #27
 8001b66:	d50b      	bpl.n	8001b80 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b68:	f06f 0210 	mvn.w	r2, #16
 8001b6c:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8001b6e:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b70:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001b72:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001b76:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001b78:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8001b7a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001b7e:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001b80:	b95d      	cbnz	r5, 8001b9a <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b82:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001b84:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b86:	f043 0320 	orr.w	r3, r3, #32
 8001b8a:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001b8c:	2320      	movs	r3, #32
 8001b8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001b92:	2300      	movs	r3, #0
 8001b94:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001b98:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001b9a:	f7ff fa6f 	bl	800107c <HAL_GetTick>
 8001b9e:	1b80      	subs	r0, r0, r6
 8001ba0:	4285      	cmp	r5, r0
 8001ba2:	d2d7      	bcs.n	8001b54 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001ba4:	e7ed      	b.n	8001b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001ba6 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001ba6:	b570      	push	{r4, r5, r6, lr}
 8001ba8:	4604      	mov	r4, r0
 8001baa:	460d      	mov	r5, r1
 8001bac:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bae:	6823      	ldr	r3, [r4, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	075b      	lsls	r3, r3, #29
 8001bb4:	d501      	bpl.n	8001bba <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f7ff ff1d 	bl	80019fa <I2C_IsAcknowledgeFailed>
 8001bc0:	b9a8      	cbnz	r0, 8001bee <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001bc2:	1c6a      	adds	r2, r5, #1
 8001bc4:	d0f3      	beq.n	8001bae <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001bc6:	b965      	cbnz	r5, 8001be2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001bca:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bcc:	f043 0320 	orr.w	r3, r3, #32
 8001bd0:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001bd2:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001bd4:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001bd6:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001bd8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001bdc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001be0:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001be2:	f7ff fa4b 	bl	800107c <HAL_GetTick>
 8001be6:	1b80      	subs	r0, r0, r6
 8001be8:	4285      	cmp	r5, r0
 8001bea:	d2e0      	bcs.n	8001bae <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001bec:	e7ec      	b.n	8001bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001bee:	2001      	movs	r0, #1
}
 8001bf0:	bd70      	pop	{r4, r5, r6, pc}
	...

08001bf4 <HAL_I2C_Init>:
{
 8001bf4:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	b908      	cbnz	r0, 8001bfe <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	bd70      	pop	{r4, r5, r6, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001bfe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c06:	b91b      	cbnz	r3, 8001c10 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001c08:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001c0c:	f001 fff6 	bl	8003bfc <HAL_I2C_MspInit>
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c10:	f001 f828 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
  if(pclk1 < I2C_MIN_PCLK_FREQ)
 8001c14:	4b3b      	ldr	r3, [pc, #236]	; (8001d04 <HAL_I2C_Init+0x110>)
 8001c16:	4298      	cmp	r0, r3
 8001c18:	d9ef      	bls.n	8001bfa <HAL_I2C_Init+0x6>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c1a:	2324      	movs	r3, #36	; 0x24
  freqrange = I2C_FREQ_RANGE(pclk1);
 8001c1c:	4d3a      	ldr	r5, [pc, #232]	; (8001d08 <HAL_I2C_Init+0x114>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  freqrange = I2C_FREQ_RANGE(pclk1);
 8001c22:	fbb0 f5f5 	udiv	r5, r0, r5
  __HAL_I2C_DISABLE(hi2c);
 8001c26:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c28:	4938      	ldr	r1, [pc, #224]	; (8001d0c <HAL_I2C_Init+0x118>)
  __HAL_I2C_DISABLE(hi2c);
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	f022 0201 	bic.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001c38:	432a      	orrs	r2, r5
 8001c3a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c3c:	6862      	ldr	r2, [r4, #4]
 8001c3e:	6a1e      	ldr	r6, [r3, #32]
 8001c40:	428a      	cmp	r2, r1
 8001c42:	bf81      	itttt	hi
 8001c44:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001c48:	4369      	mulhi	r1, r5
 8001c4a:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001c4e:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001c52:	bf94      	ite	ls
 8001c54:	1c69      	addls	r1, r5, #1
 8001c56:	3101      	addhi	r1, #1
 8001c58:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8001c5c:	4331      	orrs	r1, r6
 8001c5e:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c60:	69dd      	ldr	r5, [r3, #28]
 8001c62:	492a      	ldr	r1, [pc, #168]	; (8001d0c <HAL_I2C_Init+0x118>)
 8001c64:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8001c68:	428a      	cmp	r2, r1
 8001c6a:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8001c6e:	d830      	bhi.n	8001cd2 <HAL_I2C_Init+0xde>
 8001c70:	0052      	lsls	r2, r2, #1
 8001c72:	fbb0 f0f2 	udiv	r0, r0, r2
 8001c76:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8001c7a:	2a03      	cmp	r2, #3
 8001c7c:	bf98      	it	ls
 8001c7e:	2004      	movls	r0, #4
 8001c80:	4328      	orrs	r0, r5
 8001c82:	61d8      	str	r0, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c84:	6819      	ldr	r1, [r3, #0]
 8001c86:	6a20      	ldr	r0, [r4, #32]
 8001c88:	69e2      	ldr	r2, [r4, #28]
 8001c8a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001c8e:	4302      	orrs	r2, r0
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c94:	6899      	ldr	r1, [r3, #8]
 8001c96:	68e0      	ldr	r0, [r4, #12]
 8001c98:	6922      	ldr	r2, [r4, #16]
 8001c9a:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001c9e:	4302      	orrs	r2, r0
 8001ca0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ca8:	68d9      	ldr	r1, [r3, #12]
 8001caa:	69a0      	ldr	r0, [r4, #24]
 8001cac:	6962      	ldr	r2, [r4, #20]
 8001cae:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001cb2:	4302      	orrs	r2, r0
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001cb8:	681a      	ldr	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cba:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8001cbc:	f042 0201 	orr.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001cc2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cca:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ccc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8001cd0:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cd2:	68a1      	ldr	r1, [r4, #8]
 8001cd4:	b949      	cbnz	r1, 8001cea <HAL_I2C_Init+0xf6>
 8001cd6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001cda:	fbb0 f0f2 	udiv	r0, r0, r2
 8001cde:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8001ce2:	b162      	cbz	r2, 8001cfe <HAL_I2C_Init+0x10a>
 8001ce4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001ce8:	e7ca      	b.n	8001c80 <HAL_I2C_Init+0x8c>
 8001cea:	2119      	movs	r1, #25
 8001cec:	434a      	muls	r2, r1
 8001cee:	fbb0 f0f2 	udiv	r0, r0, r2
 8001cf2:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8001cf6:	b112      	cbz	r2, 8001cfe <HAL_I2C_Init+0x10a>
 8001cf8:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001cfc:	e7c0      	b.n	8001c80 <HAL_I2C_Init+0x8c>
 8001cfe:	2001      	movs	r0, #1
 8001d00:	e7be      	b.n	8001c80 <HAL_I2C_Init+0x8c>
 8001d02:	bf00      	nop
 8001d04:	001e847f 	.word	0x001e847f
 8001d08:	000f4240 	.word	0x000f4240
 8001d0c:	000186a0 	.word	0x000186a0

08001d10 <HAL_I2C_Master_Transmit>:
{
 8001d10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001d14:	4604      	mov	r4, r0
 8001d16:	461f      	mov	r7, r3
 8001d18:	460d      	mov	r5, r1
 8001d1a:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001d1c:	f7ff f9ae 	bl	800107c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001d20:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001d24:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001d26:	2b20      	cmp	r3, #32
 8001d28:	d004      	beq.n	8001d34 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY; 
 8001d2a:	2502      	movs	r5, #2
}
 8001d2c:	4628      	mov	r0, r5
 8001d2e:	b004      	add	sp, #16
 8001d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d34:	9000      	str	r0, [sp, #0]
 8001d36:	2319      	movs	r3, #25
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 8001d3e:	4620      	mov	r0, r4
 8001d40:	f7ff feb0 	bl	8001aa4 <I2C_WaitOnFlagUntilTimeout>
 8001d44:	2800      	cmp	r0, #0
 8001d46:	d1f0      	bne.n	8001d2a <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001d48:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d0ec      	beq.n	8001d2a <HAL_I2C_Master_Transmit+0x1a>
 8001d50:	2301      	movs	r3, #1
 8001d52:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001d5c:	bf5e      	ittt	pl
 8001d5e:	681a      	ldrpl	r2, [r3, #0]
 8001d60:	f042 0201 	orrpl.w	r2, r2, #1
 8001d64:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d6c:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d6e:	2221      	movs	r2, #33	; 0x21
 8001d70:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d74:	2210      	movs	r2, #16
 8001d76:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d7e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001d82:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d84:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001d86:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001d88:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001d8c:	8522      	strh	r2, [r4, #40]	; 0x28
  if((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME) || (hi2c->XferOptions == I2C_NO_OPTION_FRAME))
 8001d8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d90:	2a04      	cmp	r2, #4
 8001d92:	d006      	beq.n	8001da2 <HAL_I2C_Master_Transmit+0x92>
 8001d94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d96:	2a01      	cmp	r2, #1
 8001d98:	d003      	beq.n	8001da2 <HAL_I2C_Master_Transmit+0x92>
 8001d9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d9c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001da0:	d104      	bne.n	8001dac <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	e002      	b.n	8001db2 <HAL_I2C_Master_Transmit+0xa2>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001dac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001dae:	2a12      	cmp	r2, #18
 8001db0:	d0f7      	beq.n	8001da2 <HAL_I2C_Master_Transmit+0x92>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001db2:	9600      	str	r6, [sp, #0]
 8001db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001db6:	2200      	movs	r2, #0
 8001db8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	f7ff fe71 	bl	8001aa4 <I2C_WaitOnFlagUntilTimeout>
 8001dc2:	bb28      	cbnz	r0, 8001e10 <HAL_I2C_Master_Transmit+0x100>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dc4:	6923      	ldr	r3, [r4, #16]
 8001dc6:	6822      	ldr	r2, [r4, #0]
 8001dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dcc:	d112      	bne.n	8001df4 <HAL_I2C_Master_Transmit+0xe4>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dce:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001dd2:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dd4:	4633      	mov	r3, r6
 8001dd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001dd8:	4936      	ldr	r1, [pc, #216]	; (8001eb4 <HAL_I2C_Master_Transmit+0x1a4>)
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f7ff fe22 	bl	8001a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001de0:	4605      	mov	r5, r0
 8001de2:	b9a0      	cbnz	r0, 8001e0e <HAL_I2C_Master_Transmit+0xfe>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	9003      	str	r0, [sp, #12]
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	9203      	str	r2, [sp, #12]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	9303      	str	r3, [sp, #12]
 8001df0:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001df2:	e04f      	b.n	8001e94 <HAL_I2C_Master_Transmit+0x184>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001df4:	11eb      	asrs	r3, r5, #7
 8001df6:	f003 0306 	and.w	r3, r3, #6
 8001dfa:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001dfe:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e00:	492d      	ldr	r1, [pc, #180]	; (8001eb8 <HAL_I2C_Master_Transmit+0x1a8>)
 8001e02:	4633      	mov	r3, r6
 8001e04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001e06:	4620      	mov	r0, r4
 8001e08:	f7ff fe0c 	bl	8001a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e0c:	b148      	cbz	r0, 8001e22 <HAL_I2C_Master_Transmit+0x112>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	d107      	bne.n	8001e2a <HAL_I2C_Master_Transmit+0x11a>
        __HAL_UNLOCK(hi2c);
 8001e1a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001e1e:	2501      	movs	r5, #1
 8001e20:	e784      	b.n	8001d2c <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	b2ed      	uxtb	r5, r5
 8001e26:	611d      	str	r5, [r3, #16]
 8001e28:	e7d4      	b.n	8001dd4 <HAL_I2C_Master_Transmit+0xc4>
        __HAL_UNLOCK(hi2c);
 8001e2a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001e2e:	2503      	movs	r5, #3
 8001e30:	e77c      	b.n	8001d2c <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e32:	4632      	mov	r2, r6
 8001e34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001e36:	4620      	mov	r0, r4
 8001e38:	f7ff fe62 	bl	8001b00 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e3c:	b140      	cbz	r0, 8001e50 <HAL_I2C_Master_Transmit+0x140>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d1f4      	bne.n	8001e2e <HAL_I2C_Master_Transmit+0x11e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e44:	6822      	ldr	r2, [r4, #0]
 8001e46:	6813      	ldr	r3, [r2, #0]
 8001e48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e7e6      	b.n	8001e1e <HAL_I2C_Master_Transmit+0x10e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001e50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e52:	6820      	ldr	r0, [r4, #0]
 8001e54:	1c4b      	adds	r3, r1, #1
 8001e56:	6263      	str	r3, [r4, #36]	; 0x24
 8001e58:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001e5a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001e5c:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8001e5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001e66:	1e53      	subs	r3, r2, #1
 8001e68:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0U))
 8001e6a:	6943      	ldr	r3, [r0, #20]
 8001e6c:	075b      	lsls	r3, r3, #29
 8001e6e:	d50a      	bpl.n	8001e86 <HAL_I2C_Master_Transmit+0x176>
 8001e70:	b14f      	cbz	r7, 8001e86 <HAL_I2C_Master_Transmit+0x176>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001e72:	1c8b      	adds	r3, r1, #2
 8001e74:	6263      	str	r3, [r4, #36]	; 0x24
 8001e76:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001e78:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001e7a:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8001e7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001e7e:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e86:	4632      	mov	r2, r6
 8001e88:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f7ff fe8b 	bl	8001ba6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e90:	2800      	cmp	r0, #0
 8001e92:	d1d4      	bne.n	8001e3e <HAL_I2C_Master_Transmit+0x12e>
    while(hi2c->XferSize > 0U)
 8001e94:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1cb      	bne.n	8001e32 <HAL_I2C_Master_Transmit+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e9a:	6821      	ldr	r1, [r4, #0]
 8001e9c:	680a      	ldr	r2, [r1, #0]
 8001e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ea2:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ea4:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8001ea6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001eaa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001eb2:	e73b      	b.n	8001d2c <HAL_I2C_Master_Transmit+0x1c>
 8001eb4:	00010002 	.word	0x00010002
 8001eb8:	00010008 	.word	0x00010008

08001ebc <HAL_I2C_Master_Receive>:
{
 8001ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ec0:	4604      	mov	r4, r0
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	4698      	mov	r8, r3
 8001ec6:	460d      	mov	r5, r1
 8001ec8:	4691      	mov	r9, r2
 8001eca:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001ecc:	f7ff f8d6 	bl	800107c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001ed0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8001ed4:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001ed6:	2b20      	cmp	r3, #32
 8001ed8:	d004      	beq.n	8001ee4 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY; 
 8001eda:	2502      	movs	r5, #2
}
 8001edc:	4628      	mov	r0, r5
 8001ede:	b009      	add	sp, #36	; 0x24
 8001ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ee4:	9000      	str	r0, [sp, #0]
 8001ee6:	2319      	movs	r3, #25
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 8001eee:	4620      	mov	r0, r4
 8001ef0:	f7ff fdd8 	bl	8001aa4 <I2C_WaitOnFlagUntilTimeout>
 8001ef4:	2800      	cmp	r0, #0
 8001ef6:	d1f0      	bne.n	8001eda <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001ef8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d0ec      	beq.n	8001eda <HAL_I2C_Master_Receive+0x1e>
 8001f00:	2301      	movs	r3, #1
 8001f02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f06:	6823      	ldr	r3, [r4, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001f0c:	bf5e      	ittt	pl
 8001f0e:	681a      	ldrpl	r2, [r3, #0]
 8001f10:	f042 0201 	orrpl.w	r2, r2, #1
 8001f14:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f1c:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f1e:	2222      	movs	r2, #34	; 0x22
 8001f20:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f24:	2210      	movs	r2, #16
 8001f26:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f2e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001f32:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f36:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001f38:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001f3a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001f3e:	8522      	strh	r2, [r4, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f46:	601a      	str	r2, [r3, #0]
  if((hi2c->XferOptions == I2C_FIRST_AND_LAST_FRAME) || (hi2c->XferOptions == I2C_FIRST_FRAME)  || (hi2c->XferOptions == I2C_NO_OPTION_FRAME))
 8001f48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f4a:	2a04      	cmp	r2, #4
 8001f4c:	d006      	beq.n	8001f5c <HAL_I2C_Master_Receive+0xa0>
 8001f4e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f50:	2a01      	cmp	r2, #1
 8001f52:	d003      	beq.n	8001f5c <HAL_I2C_Master_Receive+0xa0>
 8001f54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f56:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001f5a:	d104      	bne.n	8001f66 <HAL_I2C_Master_Receive+0xaa>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e002      	b.n	8001f6c <HAL_I2C_Master_Receive+0xb0>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001f66:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001f68:	2a11      	cmp	r2, #17
 8001f6a:	d0f7      	beq.n	8001f5c <HAL_I2C_Master_Receive+0xa0>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f6c:	9600      	str	r6, [sp, #0]
 8001f6e:	463b      	mov	r3, r7
 8001f70:	2200      	movs	r2, #0
 8001f72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f76:	4620      	mov	r0, r4
 8001f78:	f7ff fd94 	bl	8001aa4 <I2C_WaitOnFlagUntilTimeout>
 8001f7c:	2800      	cmp	r0, #0
 8001f7e:	d14a      	bne.n	8002016 <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f80:	6923      	ldr	r3, [r4, #16]
 8001f82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	d136      	bne.n	8001ff8 <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f8a:	f045 0501 	orr.w	r5, r5, #1
 8001f8e:	b2ed      	uxtb	r5, r5
 8001f90:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f92:	4633      	mov	r3, r6
 8001f94:	463a      	mov	r2, r7
 8001f96:	4982      	ldr	r1, [pc, #520]	; (80021a0 <HAL_I2C_Master_Receive+0x2e4>)
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f7ff fd43 	bl	8001a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f9e:	4605      	mov	r5, r0
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	d137      	bne.n	8002014 <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 8001fa4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001fa6:	6823      	ldr	r3, [r4, #0]
 8001fa8:	2a00      	cmp	r2, #0
 8001faa:	d066      	beq.n	800207a <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 8001fac:	2a01      	cmp	r2, #1
 8001fae:	d177      	bne.n	80020a0 <HAL_I2C_Master_Receive+0x1e4>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fb6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb8:	9504      	str	r5, [sp, #16]
 8001fba:	695a      	ldr	r2, [r3, #20]
 8001fbc:	9204      	str	r2, [sp, #16]
 8001fbe:	699a      	ldr	r2, [r3, #24]
 8001fc0:	9204      	str	r2, [sp, #16]
 8001fc2:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fca:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fcc:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 80021a8 <HAL_I2C_Master_Receive+0x2ec>
    while(hi2c->XferSize > 0U)
 8001fd0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d05b      	beq.n	800208e <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	f200 80c3 	bhi.w	8002162 <HAL_I2C_Master_Receive+0x2a6>
        if(hi2c->XferSize == 1U)
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d17a      	bne.n	80020d6 <HAL_I2C_Master_Receive+0x21a>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001fe0:	4632      	mov	r2, r6
 8001fe2:	4639      	mov	r1, r7
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f7ff fdb1 	bl	8001b4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fea:	2800      	cmp	r0, #0
 8001fec:	f000 8090 	beq.w	8002110 <HAL_I2C_Master_Receive+0x254>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001ff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	d116      	bne.n	8002024 <HAL_I2C_Master_Receive+0x168>
 8001ff6:	e03e      	b.n	8002076 <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ff8:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001ffc:	f008 0806 	and.w	r8, r8, #6
 8002000:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8002004:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002006:	4967      	ldr	r1, [pc, #412]	; (80021a4 <HAL_I2C_Master_Receive+0x2e8>)
 8002008:	4633      	mov	r3, r6
 800200a:	463a      	mov	r2, r7
 800200c:	4620      	mov	r0, r4
 800200e:	f7ff fd09 	bl	8001a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002012:	b148      	cbz	r0, 8002028 <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002014:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002018:	2b04      	cmp	r3, #4
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	d128      	bne.n	8002072 <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 8002020:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8002024:	2501      	movs	r5, #1
 8002026:	e759      	b.n	8001edc <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	b2ed      	uxtb	r5, r5
 800202c:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800202e:	463a      	mov	r2, r7
 8002030:	4633      	mov	r3, r6
 8002032:	495b      	ldr	r1, [pc, #364]	; (80021a0 <HAL_I2C_Master_Receive+0x2e4>)
 8002034:	4620      	mov	r0, r4
 8002036:	f7ff fcf5 	bl	8001a24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800203a:	4602      	mov	r2, r0
 800203c:	2800      	cmp	r0, #0
 800203e:	d1e9      	bne.n	8002014 <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	9007      	str	r0, [sp, #28]
 8002044:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002046:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002048:	9107      	str	r1, [sp, #28]
 800204a:	6999      	ldr	r1, [r3, #24]
 800204c:	9107      	str	r1, [sp, #28]
 800204e:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002050:	6819      	ldr	r1, [r3, #0]
 8002052:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002056:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002058:	9600      	str	r6, [sp, #0]
 800205a:	463b      	mov	r3, r7
 800205c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002060:	f7ff fd20 	bl	8001aa4 <I2C_WaitOnFlagUntilTimeout>
 8002064:	2800      	cmp	r0, #0
 8002066:	d1d6      	bne.n	8002016 <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002068:	6822      	ldr	r2, [r4, #0]
 800206a:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 800206e:	6113      	str	r3, [r2, #16]
 8002070:	e78f      	b.n	8001f92 <HAL_I2C_Master_Receive+0xd6>
        __HAL_UNLOCK(hi2c);
 8002072:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 8002076:	2503      	movs	r5, #3
 8002078:	e730      	b.n	8001edc <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800207a:	9503      	str	r5, [sp, #12]
 800207c:	695a      	ldr	r2, [r3, #20]
 800207e:	9203      	str	r2, [sp, #12]
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	9203      	str	r2, [sp, #12]
 8002084:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800208c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800208e:	2320      	movs	r3, #32
 8002090:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002094:	2300      	movs	r3, #0
 8002096:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800209a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800209e:	e71d      	b.n	8001edc <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 80020a0:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020a2:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 80020a4:	d10d      	bne.n	80020c2 <HAL_I2C_Master_Receive+0x206>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020aa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020b2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020b4:	9505      	str	r5, [sp, #20]
 80020b6:	695a      	ldr	r2, [r3, #20]
 80020b8:	9205      	str	r2, [sp, #20]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	9305      	str	r3, [sp, #20]
 80020be:	9b05      	ldr	r3, [sp, #20]
 80020c0:	e784      	b.n	8001fcc <HAL_I2C_Master_Receive+0x110>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020c6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c8:	9506      	str	r5, [sp, #24]
 80020ca:	695a      	ldr	r2, [r3, #20]
 80020cc:	9206      	str	r2, [sp, #24]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	9306      	str	r3, [sp, #24]
 80020d2:	9b06      	ldr	r3, [sp, #24]
 80020d4:	e77a      	b.n	8001fcc <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 80020d6:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020d8:	9600      	str	r6, [sp, #0]
 80020da:	463b      	mov	r3, r7
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	4641      	mov	r1, r8
 80020e2:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 80020e4:	d122      	bne.n	800212c <HAL_I2C_Master_Receive+0x270>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020e6:	f7ff fcdd 	bl	8001aa4 <I2C_WaitOnFlagUntilTimeout>
 80020ea:	2800      	cmp	r0, #0
 80020ec:	d1c3      	bne.n	8002076 <HAL_I2C_Master_Receive+0x1ba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f6:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	1c51      	adds	r1, r2, #1
 80020fe:	6261      	str	r1, [r4, #36]	; 0x24
 8002100:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8002102:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002104:	3b01      	subs	r3, #1
 8002106:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002108:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800210a:	3b01      	subs	r3, #1
 800210c:	b29b      	uxth	r3, r3
 800210e:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	6262      	str	r2, [r4, #36]	; 0x24
 8002116:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002118:	6912      	ldr	r2, [r2, #16]
 800211a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800211c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800211e:	3b01      	subs	r3, #1
 8002120:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002122:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002124:	3b01      	subs	r3, #1
 8002126:	b29b      	uxth	r3, r3
 8002128:	8563      	strh	r3, [r4, #42]	; 0x2a
 800212a:	e751      	b.n	8001fd0 <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800212c:	f7ff fcba 	bl	8001aa4 <I2C_WaitOnFlagUntilTimeout>
 8002130:	4602      	mov	r2, r0
 8002132:	2800      	cmp	r0, #0
 8002134:	d19f      	bne.n	8002076 <HAL_I2C_Master_Receive+0x1ba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	6819      	ldr	r1, [r3, #0]
 800213a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800213e:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002140:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	1c48      	adds	r0, r1, #1
 8002146:	6260      	str	r0, [r4, #36]	; 0x24
 8002148:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 800214a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800214c:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 800214e:	3b01      	subs	r3, #1
 8002150:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002152:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002154:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8002156:	3b01      	subs	r3, #1
 8002158:	b29b      	uxth	r3, r3
 800215a:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800215c:	4620      	mov	r0, r4
 800215e:	463b      	mov	r3, r7
 8002160:	e7c1      	b.n	80020e6 <HAL_I2C_Master_Receive+0x22a>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002162:	4632      	mov	r2, r6
 8002164:	4639      	mov	r1, r7
 8002166:	4620      	mov	r0, r4
 8002168:	f7ff fcf0 	bl	8001b4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800216c:	2800      	cmp	r0, #0
 800216e:	f47f af3f 	bne.w	8001ff0 <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	6262      	str	r2, [r4, #36]	; 0x24
 8002178:	6822      	ldr	r2, [r4, #0]
 800217a:	6912      	ldr	r2, [r2, #16]
 800217c:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800217e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002180:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8002182:	3b01      	subs	r3, #1
 8002184:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002186:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002188:	3b01      	subs	r3, #1
 800218a:	b29b      	uxth	r3, r3
 800218c:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800218e:	6953      	ldr	r3, [r2, #20]
 8002190:	075b      	lsls	r3, r3, #29
 8002192:	f57f af1d 	bpl.w	8001fd0 <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002198:	1c59      	adds	r1, r3, #1
 800219a:	6261      	str	r1, [r4, #36]	; 0x24
 800219c:	e7bc      	b.n	8002118 <HAL_I2C_Master_Receive+0x25c>
 800219e:	bf00      	nop
 80021a0:	00010002 	.word	0x00010002
 80021a4:	00010008 	.word	0x00010008
 80021a8:	00010004 	.word	0x00010004

080021ac <HAL_I2C_IsDeviceReady>:
{
 80021ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021b0:	4604      	mov	r4, r0
 80021b2:	461f      	mov	r7, r3
 80021b4:	468a      	mov	sl, r1
 80021b6:	4691      	mov	r9, r2
  tickstart = HAL_GetTick();
 80021b8:	f7fe ff60 	bl	800107c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80021bc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80021c0:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d003      	beq.n	80021ce <HAL_I2C_IsDeviceReady+0x22>
    return HAL_BUSY;
 80021c6:	2002      	movs	r0, #2
}
 80021c8:	b004      	add	sp, #16
 80021ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ce:	9000      	str	r0, [sp, #0]
 80021d0:	2319      	movs	r3, #25
 80021d2:	2201      	movs	r2, #1
 80021d4:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 80021d8:	4620      	mov	r0, r4
 80021da:	f7ff fc63 	bl	8001aa4 <I2C_WaitOnFlagUntilTimeout>
 80021de:	2800      	cmp	r0, #0
 80021e0:	d1f1      	bne.n	80021c6 <HAL_I2C_IsDeviceReady+0x1a>
    __HAL_LOCK(hi2c);
 80021e2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d0ed      	beq.n	80021c6 <HAL_I2C_IsDeviceReady+0x1a>
 80021ea:	2301      	movs	r3, #1
 80021ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021f0:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f2:	2500      	movs	r5, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021f4:	681a      	ldr	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021f6:	f00a 0afe 	and.w	sl, sl, #254	; 0xfe
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021fa:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80021fc:	bf5e      	ittt	pl
 80021fe:	681a      	ldrpl	r2, [r3, #0]
 8002200:	f042 0201 	orrpl.w	r2, r2, #1
 8002204:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800220c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800220e:	2324      	movs	r3, #36	; 0x24
 8002210:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002214:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <HAL_I2C_IsDeviceReady+0x144>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002216:	6425      	str	r5, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002218:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800221a:	6822      	ldr	r2, [r4, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800221c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002220:	6813      	ldr	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002222:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002228:	6013      	str	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800222a:	9600      	str	r6, [sp, #0]
 800222c:	463b      	mov	r3, r7
 800222e:	2200      	movs	r2, #0
 8002230:	f7ff fc38 	bl	8001aa4 <I2C_WaitOnFlagUntilTimeout>
 8002234:	b108      	cbz	r0, 800223a <HAL_I2C_IsDeviceReady+0x8e>
        return HAL_TIMEOUT;
 8002236:	2003      	movs	r0, #3
 8002238:	e7c6      	b.n	80021c8 <HAL_I2C_IsDeviceReady+0x1c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800223a:	6823      	ldr	r3, [r4, #0]
            hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800223c:	f04f 08a0 	mov.w	r8, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002240:	f8c3 a010 	str.w	sl, [r3, #16]
      tickstart = HAL_GetTick();
 8002244:	f7fe ff1a 	bl	800107c <HAL_GetTick>
 8002248:	4606      	mov	r6, r0
      while((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == RESET) && \
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	0790      	lsls	r0, r2, #30
 8002250:	d526      	bpl.n	80022a0 <HAL_I2C_IsDeviceReady+0xf4>
      hi2c->State = HAL_I2C_STATE_READY;
 8002252:	f04f 0820 	mov.w	r8, #32
 8002256:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	0791      	lsls	r1, r2, #30
 800225e:	d52d      	bpl.n	80022bc <HAL_I2C_IsDeviceReady+0x110>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002260:	681a      	ldr	r2, [r3, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002262:	f04f 1102 	mov.w	r1, #131074	; 0x20002
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800226c:	2200      	movs	r2, #0
 800226e:	9203      	str	r2, [sp, #12]
 8002270:	695a      	ldr	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002272:	4620      	mov	r0, r4
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002274:	9203      	str	r2, [sp, #12]
 8002276:	699b      	ldr	r3, [r3, #24]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002278:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800227a:	9303      	str	r3, [sp, #12]
 800227c:	9b03      	ldr	r3, [sp, #12]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800227e:	9600      	str	r6, [sp, #0]
 8002280:	2319      	movs	r3, #25
 8002282:	f7ff fc0f 	bl	8001aa4 <I2C_WaitOnFlagUntilTimeout>
 8002286:	2800      	cmp	r0, #0
 8002288:	d1d5      	bne.n	8002236 <HAL_I2C_IsDeviceReady+0x8a>
        hi2c->State = HAL_I2C_STATE_READY;
 800228a:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800228e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8002292:	e799      	b.n	80021c8 <HAL_I2C_IsDeviceReady+0x1c>
          if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002294:	f7fe fef2 	bl	800107c <HAL_GetTick>
 8002298:	1b80      	subs	r0, r0, r6
 800229a:	4287      	cmp	r7, r0
 800229c:	d30b      	bcc.n	80022b6 <HAL_I2C_IsDeviceReady+0x10a>
 800229e:	e7d4      	b.n	800224a <HAL_I2C_IsDeviceReady+0x9e>
            (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && \
 80022a0:	695a      	ldr	r2, [r3, #20]
      while((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == RESET) && \
 80022a2:	0552      	lsls	r2, r2, #21
 80022a4:	d4d5      	bmi.n	8002252 <HAL_I2C_IsDeviceReady+0xa6>
            (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 80022a6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
            (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && \
 80022aa:	2aa0      	cmp	r2, #160	; 0xa0
 80022ac:	d0d1      	beq.n	8002252 <HAL_I2C_IsDeviceReady+0xa6>
        if(Timeout != HAL_MAX_DELAY)
 80022ae:	1c7a      	adds	r2, r7, #1
 80022b0:	d0cc      	beq.n	800224c <HAL_I2C_IsDeviceReady+0xa0>
          if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80022b2:	2f00      	cmp	r7, #0
 80022b4:	d1ee      	bne.n	8002294 <HAL_I2C_IsDeviceReady+0xe8>
            hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80022b6:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
 80022ba:	e7c6      	b.n	800224a <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022bc:	681a      	ldr	r2, [r3, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022be:	f04f 1102 	mov.w	r1, #131074	; 0x20002
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022cc:	4620      	mov	r0, r4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ce:	615a      	str	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022d0:	9600      	str	r6, [sp, #0]
 80022d2:	2319      	movs	r3, #25
 80022d4:	2201      	movs	r2, #1
 80022d6:	f7ff fbe5 	bl	8001aa4 <I2C_WaitOnFlagUntilTimeout>
 80022da:	2800      	cmp	r0, #0
 80022dc:	d1ab      	bne.n	8002236 <HAL_I2C_IsDeviceReady+0x8a>
 80022de:	3501      	adds	r5, #1
    }while(I2C_Trials++ < Trials);
 80022e0:	45a9      	cmp	r9, r5
 80022e2:	d89a      	bhi.n	800221a <HAL_I2C_IsDeviceReady+0x6e>
    __HAL_UNLOCK(hi2c);
 80022e4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80022e8:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    return HAL_ERROR;
 80022ec:	2001      	movs	r0, #1
 80022ee:	e76b      	b.n	80021c8 <HAL_I2C_IsDeviceReady+0x1c>
 80022f0:	ffff0000 	.word	0xffff0000

080022f4 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80022f4:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 80022f6:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80022fe:	d00c      	beq.n	800231a <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 8002300:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8002302:	491a      	ldr	r1, [pc, #104]	; (800236c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8002304:	680b      	ldr	r3, [r1, #0]
 8002306:	f023 0301 	bic.w	r3, r3, #1
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800230e:	6808      	ldr	r0, [r1, #0]
 8002310:	f000 0001 	and.w	r0, r0, #1
 8002314:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8002316:	b002      	add	sp, #8
 8002318:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800231a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800231c:	4914      	ldr	r1, [pc, #80]	; (8002370 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800231e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002322:	d00f      	beq.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002324:	680a      	ldr	r2, [r1, #0]
 8002326:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800232a:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800232e:	d1e7      	bne.n	8002300 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8002330:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8002334:	d1e4      	bne.n	8002300 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 8002336:	4a0d      	ldr	r2, [pc, #52]	; (800236c <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8002338:	6813      	ldr	r3, [r2, #0]
 800233a:	f043 0304 	orr.w	r3, r3, #4
 800233e:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8002340:	2201      	movs	r2, #1
 8002342:	e7de      	b.n	8002302 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002346:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800234a:	625a      	str	r2, [r3, #36]	; 0x24
 800234c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800234e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002352:	9201      	str	r2, [sp, #4]
 8002354:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002356:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002358:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800235a:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800235e:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8002362:	6259      	str	r1, [r3, #36]	; 0x24
 8002364:	e7e1      	b.n	800232a <RCC_SetFlashLatencyFromMSIRange+0x36>
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	40023c00 	.word	0x40023c00
 8002370:	40007000 	.word	0x40007000

08002374 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002374:	6803      	ldr	r3, [r0, #0]
{
 8002376:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237a:	07d9      	lsls	r1, r3, #31
{
 800237c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237e:	d46a      	bmi.n	8002456 <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002380:	6823      	ldr	r3, [r4, #0]
 8002382:	079a      	lsls	r2, r3, #30
 8002384:	f100 80e6 	bmi.w	8002554 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	06de      	lsls	r6, r3, #27
 800238c:	d555      	bpl.n	800243a <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800238e:	4dc1      	ldr	r5, [pc, #772]	; (8002694 <HAL_RCC_OscConfig+0x320>)
 8002390:	68ab      	ldr	r3, [r5, #8]
 8002392:	f013 0f0c 	tst.w	r3, #12
 8002396:	f040 8183 	bne.w	80026a0 <HAL_RCC_OscConfig+0x32c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800239e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023a2:	6829      	ldr	r1, [r5, #0]
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	fab3 f383 	clz	r3, r3
 80023ac:	2201      	movs	r2, #1
 80023ae:	f003 031f 	and.w	r3, r3, #31
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	420b      	tst	r3, r1
 80023b8:	d002      	beq.n	80023c0 <HAL_RCC_OscConfig+0x4c>
 80023ba:	69a3      	ldr	r3, [r4, #24]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d06e      	beq.n	800249e <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023c0:	4db4      	ldr	r5, [pc, #720]	; (8002694 <HAL_RCC_OscConfig+0x320>)
 80023c2:	6a20      	ldr	r0, [r4, #32]
 80023c4:	686b      	ldr	r3, [r5, #4]
 80023c6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80023ca:	4298      	cmp	r0, r3
 80023cc:	f240 814a 	bls.w	8002664 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023d0:	f7ff ff90 	bl	80022f4 <RCC_SetFlashLatencyFromMSIRange>
 80023d4:	2800      	cmp	r0, #0
 80023d6:	d162      	bne.n	800249e <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023d8:	686b      	ldr	r3, [r5, #4]
 80023da:	6a22      	ldr	r2, [r4, #32]
 80023dc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80023e0:	4313      	orrs	r3, r2
 80023e2:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023e4:	6869      	ldr	r1, [r5, #4]
 80023e6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	fab3 f283 	clz	r2, r3
 80023f2:	69e3      	ldr	r3, [r4, #28]
 80023f4:	4093      	lsls	r3, r2
 80023f6:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 80023fa:	4313      	orrs	r3, r2
 80023fc:	606b      	str	r3, [r5, #4]
 80023fe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002402:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8002406:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800240a:	4ba2      	ldr	r3, [pc, #648]	; (8002694 <HAL_RCC_OscConfig+0x320>)
 800240c:	21f0      	movs	r1, #240	; 0xf0
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	fa91 f1a1 	rbit	r1, r1
 8002414:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8002418:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800241a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800241e:	40c3      	lsrs	r3, r0
 8002420:	1c58      	adds	r0, r3, #1
 8002422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8002426:	40ca      	lsrs	r2, r1
 8002428:	499b      	ldr	r1, [pc, #620]	; (8002698 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800242a:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800242c:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 800242e:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8002430:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8002432:	4a9a      	ldr	r2, [pc, #616]	; (800269c <HAL_RCC_OscConfig+0x328>)
 8002434:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8002436:	f7fe fdf9 	bl	800102c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800243a:	6823      	ldr	r3, [r4, #0]
 800243c:	071d      	lsls	r5, r3, #28
 800243e:	f100 8191 	bmi.w	8002764 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002442:	6823      	ldr	r3, [r4, #0]
 8002444:	0758      	lsls	r0, r3, #29
 8002446:	f100 81d3 	bmi.w	80027f0 <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800244a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800244c:	2a00      	cmp	r2, #0
 800244e:	f040 8257 	bne.w	8002900 <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 8002452:	2000      	movs	r0, #0
 8002454:	e024      	b.n	80024a0 <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002456:	4b8f      	ldr	r3, [pc, #572]	; (8002694 <HAL_RCC_OscConfig+0x320>)
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	f002 020c 	and.w	r2, r2, #12
 800245e:	2a08      	cmp	r2, #8
 8002460:	d007      	beq.n	8002472 <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	f002 020c 	and.w	r2, r2, #12
 8002468:	2a0c      	cmp	r2, #12
 800246a:	d11c      	bne.n	80024a6 <HAL_RCC_OscConfig+0x132>
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	03db      	lsls	r3, r3, #15
 8002470:	d519      	bpl.n	80024a6 <HAL_RCC_OscConfig+0x132>
 8002472:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002476:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247a:	4a86      	ldr	r2, [pc, #536]	; (8002694 <HAL_RCC_OscConfig+0x320>)
 800247c:	6811      	ldr	r1, [r2, #0]
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	2201      	movs	r2, #1
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	420b      	tst	r3, r1
 8002492:	f43f af75 	beq.w	8002380 <HAL_RCC_OscConfig+0xc>
 8002496:	6863      	ldr	r3, [r4, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f47f af71 	bne.w	8002380 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800249e:	2001      	movs	r0, #1
}
 80024a0:	b003      	add	sp, #12
 80024a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a6:	6863      	ldr	r3, [r4, #4]
 80024a8:	4d7a      	ldr	r5, [pc, #488]	; (8002694 <HAL_RCC_OscConfig+0x320>)
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d120      	bne.n	80024f0 <HAL_RCC_OscConfig+0x17c>
 80024ae:	682b      	ldr	r3, [r5, #0]
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80024b6:	f7fe fde1 	bl	800107c <HAL_GetTick>
 80024ba:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80024be:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c0:	2601      	movs	r6, #1
 80024c2:	4f74      	ldr	r7, [pc, #464]	; (8002694 <HAL_RCC_OscConfig+0x320>)
 80024c4:	fa95 f3a5 	rbit	r3, r5
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	fa95 f3a5 	rbit	r3, r5
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	fa06 f303 	lsl.w	r3, r6, r3
 80024da:	4213      	tst	r3, r2
 80024dc:	f47f af50 	bne.w	8002380 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e0:	f7fe fdcc 	bl	800107c <HAL_GetTick>
 80024e4:	eba0 0008 	sub.w	r0, r0, r8
 80024e8:	2864      	cmp	r0, #100	; 0x64
 80024ea:	d9eb      	bls.n	80024c4 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 80024ec:	2003      	movs	r0, #3
 80024ee:	e7d7      	b.n	80024a0 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f0:	bb13      	cbnz	r3, 8002538 <HAL_RCC_OscConfig+0x1c4>
 80024f2:	682b      	ldr	r3, [r5, #0]
 80024f4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80024f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024fc:	602b      	str	r3, [r5, #0]
 80024fe:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002500:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002506:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002508:	f7fe fdb8 	bl	800107c <HAL_GetTick>
 800250c:	4680      	mov	r8, r0
 800250e:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002512:	682a      	ldr	r2, [r5, #0]
 8002514:	fa96 f3a6 	rbit	r3, r6
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	fa07 f303 	lsl.w	r3, r7, r3
 8002524:	4213      	tst	r3, r2
 8002526:	f43f af2b 	beq.w	8002380 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800252a:	f7fe fda7 	bl	800107c <HAL_GetTick>
 800252e:	eba0 0008 	sub.w	r0, r0, r8
 8002532:	2864      	cmp	r0, #100	; 0x64
 8002534:	d9eb      	bls.n	800250e <HAL_RCC_OscConfig+0x19a>
 8002536:	e7d9      	b.n	80024ec <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002538:	2b05      	cmp	r3, #5
 800253a:	682b      	ldr	r3, [r5, #0]
 800253c:	d103      	bne.n	8002546 <HAL_RCC_OscConfig+0x1d2>
 800253e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002542:	602b      	str	r3, [r5, #0]
 8002544:	e7b3      	b.n	80024ae <HAL_RCC_OscConfig+0x13a>
 8002546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254a:	602b      	str	r3, [r5, #0]
 800254c:	682b      	ldr	r3, [r5, #0]
 800254e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002552:	e7af      	b.n	80024b4 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002554:	4b4f      	ldr	r3, [pc, #316]	; (8002694 <HAL_RCC_OscConfig+0x320>)
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	f002 020c 	and.w	r2, r2, #12
 800255c:	2a04      	cmp	r2, #4
 800255e:	d007      	beq.n	8002570 <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	f002 020c 	and.w	r2, r2, #12
 8002566:	2a0c      	cmp	r2, #12
 8002568:	d124      	bne.n	80025b4 <HAL_RCC_OscConfig+0x240>
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	03df      	lsls	r7, r3, #15
 800256e:	d421      	bmi.n	80025b4 <HAL_RCC_OscConfig+0x240>
 8002570:	2302      	movs	r3, #2
 8002572:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002576:	4a47      	ldr	r2, [pc, #284]	; (8002694 <HAL_RCC_OscConfig+0x320>)
 8002578:	6810      	ldr	r0, [r2, #0]
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	2101      	movs	r1, #1
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	fa01 f303 	lsl.w	r3, r1, r3
 800258c:	4203      	tst	r3, r0
 800258e:	4613      	mov	r3, r2
 8002590:	d002      	beq.n	8002598 <HAL_RCC_OscConfig+0x224>
 8002592:	68e2      	ldr	r2, [r4, #12]
 8002594:	428a      	cmp	r2, r1
 8002596:	d182      	bne.n	800249e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002598:	6858      	ldr	r0, [r3, #4]
 800259a:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 800259e:	fa92 f2a2 	rbit	r2, r2
 80025a2:	fab2 f182 	clz	r1, r2
 80025a6:	6922      	ldr	r2, [r4, #16]
 80025a8:	408a      	lsls	r2, r1
 80025aa:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b2:	e6e9      	b.n	8002388 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025b4:	68e2      	ldr	r2, [r4, #12]
 80025b6:	2501      	movs	r5, #1
 80025b8:	b382      	cbz	r2, 800261c <HAL_RCC_OscConfig+0x2a8>
 80025ba:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025c6:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80025ce:	f7fe fd55 	bl	800107c <HAL_GetTick>
 80025d2:	2702      	movs	r7, #2
 80025d4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d6:	4e2f      	ldr	r6, [pc, #188]	; (8002694 <HAL_RCC_OscConfig+0x320>)
 80025d8:	fa97 f3a7 	rbit	r3, r7
 80025dc:	6832      	ldr	r2, [r6, #0]
 80025de:	fa97 f3a7 	rbit	r3, r7
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	fa05 f303 	lsl.w	r3, r5, r3
 80025ee:	4213      	tst	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f2:	6871      	ldr	r1, [r6, #4]
 80025f4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	fab3 f283 	clz	r2, r3
 8002600:	6923      	ldr	r3, [r4, #16]
 8002602:	4093      	lsls	r3, r2
 8002604:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 8002608:	4313      	orrs	r3, r2
 800260a:	6073      	str	r3, [r6, #4]
 800260c:	e6bc      	b.n	8002388 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260e:	f7fe fd35 	bl	800107c <HAL_GetTick>
 8002612:	eba0 0008 	sub.w	r0, r0, r8
 8002616:	2802      	cmp	r0, #2
 8002618:	d9de      	bls.n	80025d8 <HAL_RCC_OscConfig+0x264>
 800261a:	e767      	b.n	80024ec <HAL_RCC_OscConfig+0x178>
 800261c:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8002620:	fab3 f383 	clz	r3, r3
 8002624:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002628:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002630:	f7fe fd24 	bl	800107c <HAL_GetTick>
 8002634:	2602      	movs	r6, #2
 8002636:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002638:	4f16      	ldr	r7, [pc, #88]	; (8002694 <HAL_RCC_OscConfig+0x320>)
 800263a:	fa96 f3a6 	rbit	r3, r6
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	fa96 f3a6 	rbit	r3, r6
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	fa05 f303 	lsl.w	r3, r5, r3
 8002650:	4213      	tst	r3, r2
 8002652:	f43f ae99 	beq.w	8002388 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002656:	f7fe fd11 	bl	800107c <HAL_GetTick>
 800265a:	eba0 0008 	sub.w	r0, r0, r8
 800265e:	2802      	cmp	r0, #2
 8002660:	d9eb      	bls.n	800263a <HAL_RCC_OscConfig+0x2c6>
 8002662:	e743      	b.n	80024ec <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002664:	686b      	ldr	r3, [r5, #4]
 8002666:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800266a:	4303      	orrs	r3, r0
 800266c:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800266e:	6869      	ldr	r1, [r5, #4]
 8002670:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	fab3 f283 	clz	r2, r3
 800267c:	69e3      	ldr	r3, [r4, #28]
 800267e:	4093      	lsls	r3, r2
 8002680:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8002684:	4313      	orrs	r3, r2
 8002686:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002688:	f7ff fe34 	bl	80022f4 <RCC_SetFlashLatencyFromMSIRange>
 800268c:	2800      	cmp	r0, #0
 800268e:	f43f aeb6 	beq.w	80023fe <HAL_RCC_OscConfig+0x8a>
 8002692:	e704      	b.n	800249e <HAL_RCC_OscConfig+0x12a>
 8002694:	40023800 	.word	0x40023800
 8002698:	08005c10 	.word	0x08005c10
 800269c:	20000010 	.word	0x20000010
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026a0:	69a2      	ldr	r2, [r4, #24]
 80026a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026a6:	2a00      	cmp	r2, #0
 80026a8:	d037      	beq.n	800271a <HAL_RCC_OscConfig+0x3a6>
 80026aa:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	2601      	movs	r6, #1
 80026b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026b8:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80026c0:	f7fe fcdc 	bl	800107c <HAL_GetTick>
 80026c4:	f44f 7700 	mov.w	r7, #512	; 0x200
 80026c8:	4680      	mov	r8, r0
 80026ca:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80026ce:	682a      	ldr	r2, [r5, #0]
 80026d0:	fa97 f3a7 	rbit	r3, r7
 80026d4:	fab3 f383 	clz	r3, r3
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	fa06 f303 	lsl.w	r3, r6, r3
 80026e0:	4213      	tst	r3, r2
 80026e2:	d013      	beq.n	800270c <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026e4:	686b      	ldr	r3, [r5, #4]
 80026e6:	6a22      	ldr	r2, [r4, #32]
 80026e8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80026ec:	4313      	orrs	r3, r2
 80026ee:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026f0:	6869      	ldr	r1, [r5, #4]
 80026f2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	fab3 f283 	clz	r2, r3
 80026fe:	69e3      	ldr	r3, [r4, #28]
 8002700:	4093      	lsls	r3, r2
 8002702:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8002706:	4313      	orrs	r3, r2
 8002708:	606b      	str	r3, [r5, #4]
 800270a:	e696      	b.n	800243a <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800270c:	f7fe fcb6 	bl	800107c <HAL_GetTick>
 8002710:	eba0 0008 	sub.w	r0, r0, r8
 8002714:	2802      	cmp	r0, #2
 8002716:	d9d8      	bls.n	80026ca <HAL_RCC_OscConfig+0x356>
 8002718:	e6e8      	b.n	80024ec <HAL_RCC_OscConfig+0x178>
 800271a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002726:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800272e:	f7fe fca5 	bl	800107c <HAL_GetTick>
 8002732:	f44f 7600 	mov.w	r6, #512	; 0x200
 8002736:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8002738:	2701      	movs	r7, #1
 800273a:	fa96 f3a6 	rbit	r3, r6
 800273e:	682a      	ldr	r2, [r5, #0]
 8002740:	fa96 f3a6 	rbit	r3, r6
 8002744:	fab3 f383 	clz	r3, r3
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	fa07 f303 	lsl.w	r3, r7, r3
 8002750:	4213      	tst	r3, r2
 8002752:	f43f ae72 	beq.w	800243a <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002756:	f7fe fc91 	bl	800107c <HAL_GetTick>
 800275a:	eba0 0008 	sub.w	r0, r0, r8
 800275e:	2802      	cmp	r0, #2
 8002760:	d9eb      	bls.n	800273a <HAL_RCC_OscConfig+0x3c6>
 8002762:	e6c3      	b.n	80024ec <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002764:	6962      	ldr	r2, [r4, #20]
 8002766:	2501      	movs	r5, #1
 8002768:	49a9      	ldr	r1, [pc, #676]	; (8002a10 <HAL_RCC_OscConfig+0x69c>)
 800276a:	b302      	cbz	r2, 80027ae <HAL_RCC_OscConfig+0x43a>
 800276c:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	440b      	add	r3, r1
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 800277a:	f7fe fc7f 	bl	800107c <HAL_GetTick>
 800277e:	2602      	movs	r6, #2
 8002780:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002782:	4fa4      	ldr	r7, [pc, #656]	; (8002a14 <HAL_RCC_OscConfig+0x6a0>)
 8002784:	fa96 f3a6 	rbit	r3, r6
 8002788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800278a:	fa96 f3a6 	rbit	r3, r6
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	fa05 f303 	lsl.w	r3, r5, r3
 800279a:	4213      	tst	r3, r2
 800279c:	f47f ae51 	bne.w	8002442 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a0:	f7fe fc6c 	bl	800107c <HAL_GetTick>
 80027a4:	eba0 0008 	sub.w	r0, r0, r8
 80027a8:	2802      	cmp	r0, #2
 80027aa:	d9eb      	bls.n	8002784 <HAL_RCC_OscConfig+0x410>
 80027ac:	e69e      	b.n	80024ec <HAL_RCC_OscConfig+0x178>
 80027ae:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	440b      	add	r3, r1
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80027bc:	f7fe fc5e 	bl	800107c <HAL_GetTick>
 80027c0:	2602      	movs	r6, #2
 80027c2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c4:	4f93      	ldr	r7, [pc, #588]	; (8002a14 <HAL_RCC_OscConfig+0x6a0>)
 80027c6:	fa96 f3a6 	rbit	r3, r6
 80027ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027cc:	fa96 f3a6 	rbit	r3, r6
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	fa05 f303 	lsl.w	r3, r5, r3
 80027dc:	4213      	tst	r3, r2
 80027de:	f43f ae30 	beq.w	8002442 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e2:	f7fe fc4b 	bl	800107c <HAL_GetTick>
 80027e6:	eba0 0008 	sub.w	r0, r0, r8
 80027ea:	2802      	cmp	r0, #2
 80027ec:	d9eb      	bls.n	80027c6 <HAL_RCC_OscConfig+0x452>
 80027ee:	e67d      	b.n	80024ec <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f0:	4b88      	ldr	r3, [pc, #544]	; (8002a14 <HAL_RCC_OscConfig+0x6a0>)
 80027f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027f4:	00d1      	lsls	r1, r2, #3
 80027f6:	d434      	bmi.n	8002862 <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 80027f8:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002800:	625a      	str	r2, [r3, #36]	; 0x24
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280c:	4d82      	ldr	r5, [pc, #520]	; (8002a18 <HAL_RCC_OscConfig+0x6a4>)
 800280e:	682b      	ldr	r3, [r5, #0]
 8002810:	05da      	lsls	r2, r3, #23
 8002812:	d528      	bpl.n	8002866 <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002814:	68a3      	ldr	r3, [r4, #8]
 8002816:	4d7f      	ldr	r5, [pc, #508]	; (8002a14 <HAL_RCC_OscConfig+0x6a0>)
 8002818:	2b01      	cmp	r3, #1
 800281a:	d134      	bne.n	8002886 <HAL_RCC_OscConfig+0x512>
 800281c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800281e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002822:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002824:	f7fe fc2a 	bl	800107c <HAL_GetTick>
 8002828:	f44f 7500 	mov.w	r5, #512	; 0x200
 800282c:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282e:	2701      	movs	r7, #1
 8002830:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8002a14 <HAL_RCC_OscConfig+0x6a0>
 8002834:	fa95 f3a5 	rbit	r3, r5
 8002838:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 800283c:	fa95 f3a5 	rbit	r3, r5
 8002840:	fab3 f383 	clz	r3, r3
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	fa07 f303 	lsl.w	r3, r7, r3
 800284c:	4213      	tst	r3, r2
 800284e:	d04e      	beq.n	80028ee <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 8002850:	2e00      	cmp	r6, #0
 8002852:	f43f adfa 	beq.w	800244a <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002856:	4a6f      	ldr	r2, [pc, #444]	; (8002a14 <HAL_RCC_OscConfig+0x6a0>)
 8002858:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800285a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285e:	6253      	str	r3, [r2, #36]	; 0x24
 8002860:	e5f3      	b.n	800244a <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 8002862:	2600      	movs	r6, #0
 8002864:	e7d2      	b.n	800280c <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002866:	682b      	ldr	r3, [r5, #0]
 8002868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800286e:	f7fe fc05 	bl	800107c <HAL_GetTick>
 8002872:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002874:	682b      	ldr	r3, [r5, #0]
 8002876:	05db      	lsls	r3, r3, #23
 8002878:	d4cc      	bmi.n	8002814 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287a:	f7fe fbff 	bl	800107c <HAL_GetTick>
 800287e:	1bc0      	subs	r0, r0, r7
 8002880:	2864      	cmp	r0, #100	; 0x64
 8002882:	d9f7      	bls.n	8002874 <HAL_RCC_OscConfig+0x500>
 8002884:	e632      	b.n	80024ec <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002886:	bb23      	cbnz	r3, 80028d2 <HAL_RCC_OscConfig+0x55e>
 8002888:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800288a:	f44f 7700 	mov.w	r7, #512	; 0x200
 800288e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002892:	636b      	str	r3, [r5, #52]	; 0x34
 8002894:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002896:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800289e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80028a0:	f7fe fbec 	bl	800107c <HAL_GetTick>
 80028a4:	4681      	mov	r9, r0
 80028a6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028aa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80028ac:	fa97 f3a7 	rbit	r3, r7
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	fa08 f303 	lsl.w	r3, r8, r3
 80028bc:	4213      	tst	r3, r2
 80028be:	d0c7      	beq.n	8002850 <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c0:	f7fe fbdc 	bl	800107c <HAL_GetTick>
 80028c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80028c8:	eba0 0009 	sub.w	r0, r0, r9
 80028cc:	4298      	cmp	r0, r3
 80028ce:	d9ea      	bls.n	80028a6 <HAL_RCC_OscConfig+0x532>
 80028d0:	e60c      	b.n	80024ec <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d2:	2b05      	cmp	r3, #5
 80028d4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80028d6:	d103      	bne.n	80028e0 <HAL_RCC_OscConfig+0x56c>
 80028d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028dc:	636b      	str	r3, [r5, #52]	; 0x34
 80028de:	e79d      	b.n	800281c <HAL_RCC_OscConfig+0x4a8>
 80028e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028e4:	636b      	str	r3, [r5, #52]	; 0x34
 80028e6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80028e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028ec:	e799      	b.n	8002822 <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ee:	f7fe fbc5 	bl	800107c <HAL_GetTick>
 80028f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80028f6:	eba0 0009 	sub.w	r0, r0, r9
 80028fa:	4298      	cmp	r0, r3
 80028fc:	d99a      	bls.n	8002834 <HAL_RCC_OscConfig+0x4c0>
 80028fe:	e5f5      	b.n	80024ec <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002900:	4d44      	ldr	r5, [pc, #272]	; (8002a14 <HAL_RCC_OscConfig+0x6a0>)
 8002902:	68ab      	ldr	r3, [r5, #8]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b0c      	cmp	r3, #12
 800290a:	f43f adc8 	beq.w	800249e <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800290e:	2a02      	cmp	r2, #2
 8002910:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002914:	d156      	bne.n	80029c4 <HAL_RCC_OscConfig+0x650>
 8002916:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	2200      	movs	r2, #0
 8002920:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002924:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800292c:	f7fe fba6 	bl	800107c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002930:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 8002932:	4680      	mov	r8, r0
 8002934:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002938:	2501      	movs	r5, #1
 800293a:	fa97 f3a7 	rbit	r3, r7
 800293e:	6832      	ldr	r2, [r6, #0]
 8002940:	fa97 f3a7 	rbit	r3, r7
 8002944:	fab3 f383 	clz	r3, r3
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	fa05 f303 	lsl.w	r3, r5, r3
 8002950:	4213      	tst	r3, r2
 8002952:	d130      	bne.n	80029b6 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002954:	68b2      	ldr	r2, [r6, #8]
 8002956:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002958:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800295a:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 800295e:	430b      	orrs	r3, r1
 8002960:	4313      	orrs	r3, r2
 8002962:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002964:	4313      	orrs	r3, r2
 8002966:	60b3      	str	r3, [r6, #8]
 8002968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800296c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002978:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8002980:	f7fe fb7c 	bl	800107c <HAL_GetTick>
 8002984:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8002988:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800298a:	2501      	movs	r5, #1
 800298c:	4e21      	ldr	r6, [pc, #132]	; (8002a14 <HAL_RCC_OscConfig+0x6a0>)
 800298e:	fa94 f3a4 	rbit	r3, r4
 8002992:	6832      	ldr	r2, [r6, #0]
 8002994:	fa94 f3a4 	rbit	r3, r4
 8002998:	fab3 f383 	clz	r3, r3
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	fa05 f303 	lsl.w	r3, r5, r3
 80029a4:	4213      	tst	r3, r2
 80029a6:	f47f ad54 	bne.w	8002452 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029aa:	f7fe fb67 	bl	800107c <HAL_GetTick>
 80029ae:	1bc0      	subs	r0, r0, r7
 80029b0:	2802      	cmp	r0, #2
 80029b2:	d9ec      	bls.n	800298e <HAL_RCC_OscConfig+0x61a>
 80029b4:	e59a      	b.n	80024ec <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b6:	f7fe fb61 	bl	800107c <HAL_GetTick>
 80029ba:	eba0 0008 	sub.w	r0, r0, r8
 80029be:	2802      	cmp	r0, #2
 80029c0:	d9bb      	bls.n	800293a <HAL_RCC_OscConfig+0x5c6>
 80029c2:	e593      	b.n	80024ec <HAL_RCC_OscConfig+0x178>
 80029c4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	2200      	movs	r2, #0
 80029ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029d2:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029da:	f7fe fb4f 	bl	800107c <HAL_GetTick>
 80029de:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80029e2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e4:	2601      	movs	r6, #1
 80029e6:	fa94 f3a4 	rbit	r3, r4
 80029ea:	682a      	ldr	r2, [r5, #0]
 80029ec:	fa94 f3a4 	rbit	r3, r4
 80029f0:	fab3 f383 	clz	r3, r3
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	fa06 f303 	lsl.w	r3, r6, r3
 80029fc:	4213      	tst	r3, r2
 80029fe:	f43f ad28 	beq.w	8002452 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a02:	f7fe fb3b 	bl	800107c <HAL_GetTick>
 8002a06:	1bc0      	subs	r0, r0, r7
 8002a08:	2802      	cmp	r0, #2
 8002a0a:	d9ec      	bls.n	80029e6 <HAL_RCC_OscConfig+0x672>
 8002a0c:	e56e      	b.n	80024ec <HAL_RCC_OscConfig+0x178>
 8002a0e:	bf00      	nop
 8002a10:	1091c1a0 	.word	0x1091c1a0
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40007000 	.word	0x40007000

08002a1c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002a1c:	491e      	ldr	r1, [pc, #120]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8002a1e:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8002a20:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8002a22:	f003 020c 	and.w	r2, r3, #12
 8002a26:	2a08      	cmp	r2, #8
 8002a28:	d005      	beq.n	8002a36 <HAL_RCC_GetSysClockFreq+0x1a>
 8002a2a:	2a0c      	cmp	r2, #12
 8002a2c:	d005      	beq.n	8002a3a <HAL_RCC_GetSysClockFreq+0x1e>
 8002a2e:	2a04      	cmp	r2, #4
 8002a30:	d122      	bne.n	8002a78 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 8002a32:	481a      	ldr	r0, [pc, #104]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x80>)
}
 8002a34:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8002a36:	481a      	ldr	r0, [pc, #104]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x84>)
 8002a38:	bd10      	pop	{r4, pc}
 8002a3a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a3e:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002a42:	fab2 f282 	clz	r2, r2
 8002a46:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8002a4a:	fa20 f202 	lsr.w	r2, r0, r2
 8002a4e:	4815      	ldr	r0, [pc, #84]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x88>)
 8002a50:	5c84      	ldrb	r4, [r0, r2]
 8002a52:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8002a56:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8002a5a:	fab0 f280 	clz	r2, r0
 8002a5e:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a62:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8002a64:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a66:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8002a68:	bf4c      	ite	mi
 8002a6a:	4b0d      	ldrmi	r3, [pc, #52]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8002a6c:	4b0b      	ldrpl	r3, [pc, #44]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8002a6e:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 8002a70:	4363      	muls	r3, r4
 8002a72:	fbb3 f0f0 	udiv	r0, r3, r0
 8002a76:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8002a78:	6848      	ldr	r0, [r1, #4]
 8002a7a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	fab3 f383 	clz	r3, r3
 8002a86:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8002a8a:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8002a8c:	1c43      	adds	r3, r0, #1
 8002a8e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002a92:	4098      	lsls	r0, r3
 8002a94:	bd10      	pop	{r4, pc}
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	00f42400 	.word	0x00f42400
 8002aa0:	007a1200 	.word	0x007a1200
 8002aa4:	08005c28 	.word	0x08005c28

08002aa8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002aa8:	4b6a      	ldr	r3, [pc, #424]	; (8002c54 <HAL_RCC_ClockConfig+0x1ac>)
{
 8002aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002aae:	681a      	ldr	r2, [r3, #0]
{
 8002ab0:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ab2:	f002 0201 	and.w	r2, r2, #1
 8002ab6:	428a      	cmp	r2, r1
{
 8002ab8:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002aba:	d330      	bcc.n	8002b1e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002abc:	6832      	ldr	r2, [r6, #0]
 8002abe:	0794      	lsls	r4, r2, #30
 8002ac0:	d440      	bmi.n	8002b44 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac2:	07d0      	lsls	r0, r2, #31
 8002ac4:	d446      	bmi.n	8002b54 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ac6:	4b63      	ldr	r3, [pc, #396]	; (8002c54 <HAL_RCC_ClockConfig+0x1ac>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	f002 0201 	and.w	r2, r2, #1
 8002ace:	4295      	cmp	r5, r2
 8002ad0:	f0c0 80ae 	bcc.w	8002c30 <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	6832      	ldr	r2, [r6, #0]
 8002ad6:	0751      	lsls	r1, r2, #29
 8002ad8:	f100 80b3 	bmi.w	8002c42 <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002adc:	0713      	lsls	r3, r2, #28
 8002ade:	d507      	bpl.n	8002af0 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae0:	4a5d      	ldr	r2, [pc, #372]	; (8002c58 <HAL_RCC_ClockConfig+0x1b0>)
 8002ae2:	6931      	ldr	r1, [r6, #16]
 8002ae4:	6893      	ldr	r3, [r2, #8]
 8002ae6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002aea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002aee:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002af0:	f7ff ff94 	bl	8002a1c <HAL_RCC_GetSysClockFreq>
 8002af4:	4b58      	ldr	r3, [pc, #352]	; (8002c58 <HAL_RCC_ClockConfig+0x1b0>)
 8002af6:	22f0      	movs	r2, #240	; 0xf0
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	fa92 f2a2 	rbit	r2, r2
 8002afe:	fab2 f282 	clz	r2, r2
 8002b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b06:	40d3      	lsrs	r3, r2
 8002b08:	4a54      	ldr	r2, [pc, #336]	; (8002c5c <HAL_RCC_ClockConfig+0x1b4>)
 8002b0a:	5cd3      	ldrb	r3, [r2, r3]
 8002b0c:	40d8      	lsrs	r0, r3
 8002b0e:	4b54      	ldr	r3, [pc, #336]	; (8002c60 <HAL_RCC_ClockConfig+0x1b8>)
 8002b10:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7fe fa8a 	bl	800102c <HAL_InitTick>
  return HAL_OK;
 8002b18:	2000      	movs	r0, #0
}
 8002b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	2901      	cmp	r1, #1
 8002b20:	bf02      	ittt	eq
 8002b22:	681a      	ldreq	r2, [r3, #0]
 8002b24:	f042 0204 	orreq.w	r2, r2, #4
 8002b28:	601a      	streq	r2, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	f022 0201 	bic.w	r2, r2, #1
 8002b30:	430a      	orrs	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	4299      	cmp	r1, r3
 8002b3c:	d0be      	beq.n	8002abc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8002b3e:	2001      	movs	r0, #1
 8002b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b44:	4944      	ldr	r1, [pc, #272]	; (8002c58 <HAL_RCC_ClockConfig+0x1b0>)
 8002b46:	68b0      	ldr	r0, [r6, #8]
 8002b48:	688b      	ldr	r3, [r1, #8]
 8002b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b4e:	4303      	orrs	r3, r0
 8002b50:	608b      	str	r3, [r1, #8]
 8002b52:	e7b6      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b54:	6872      	ldr	r2, [r6, #4]
 8002b56:	4940      	ldr	r1, [pc, #256]	; (8002c58 <HAL_RCC_ClockConfig+0x1b0>)
 8002b58:	2a02      	cmp	r2, #2
 8002b5a:	d10f      	bne.n	8002b7c <HAL_RCC_ClockConfig+0xd4>
 8002b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b60:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8002b64:	6808      	ldr	r0, [r1, #0]
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	2101      	movs	r1, #1
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	fa01 f303 	lsl.w	r3, r1, r3
 8002b78:	4203      	tst	r3, r0
 8002b7a:	e013      	b.n	8002ba4 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b7c:	2a03      	cmp	r2, #3
 8002b7e:	d102      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xde>
 8002b80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b84:	e7ec      	b.n	8002b60 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b86:	2a01      	cmp	r2, #1
 8002b88:	d129      	bne.n	8002bde <HAL_RCC_ClockConfig+0x136>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b90:	6809      	ldr	r1, [r1, #0]
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	f003 031f 	and.w	r3, r3, #31
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8002ba4:	d0cb      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba6:	4c2c      	ldr	r4, [pc, #176]	; (8002c58 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bac:	68a3      	ldr	r3, [r4, #8]
 8002bae:	f023 0303 	bic.w	r3, r3, #3
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8002bb6:	f7fe fa61 	bl	800107c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bba:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002bbc:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d110      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bc2:	68a3      	ldr	r3, [r4, #8]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	f43f af7c 	beq.w	8002ac6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bce:	f7fe fa55 	bl	800107c <HAL_GetTick>
 8002bd2:	1bc0      	subs	r0, r0, r7
 8002bd4:	4540      	cmp	r0, r8
 8002bd6:	d9f4      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8002bd8:	2003      	movs	r0, #3
 8002bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002be2:	e7bd      	b.n	8002b60 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d10b      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be8:	68a3      	ldr	r3, [r4, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b0c      	cmp	r3, #12
 8002bf0:	f43f af69 	beq.w	8002ac6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf4:	f7fe fa42 	bl	800107c <HAL_GetTick>
 8002bf8:	1bc0      	subs	r0, r0, r7
 8002bfa:	4540      	cmp	r0, r8
 8002bfc:	d9f4      	bls.n	8002be8 <HAL_RCC_ClockConfig+0x140>
 8002bfe:	e7eb      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d110      	bne.n	8002c26 <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c04:	68a3      	ldr	r3, [r4, #8]
 8002c06:	f003 030c 	and.w	r3, r3, #12
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	f43f af5b 	beq.w	8002ac6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c10:	f7fe fa34 	bl	800107c <HAL_GetTick>
 8002c14:	1bc0      	subs	r0, r0, r7
 8002c16:	4540      	cmp	r0, r8
 8002c18:	d9f4      	bls.n	8002c04 <HAL_RCC_ClockConfig+0x15c>
 8002c1a:	e7dd      	b.n	8002bd8 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1c:	f7fe fa2e 	bl	800107c <HAL_GetTick>
 8002c20:	1bc0      	subs	r0, r0, r7
 8002c22:	4540      	cmp	r0, r8
 8002c24:	d8d8      	bhi.n	8002bd8 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c26:	68a3      	ldr	r3, [r4, #8]
 8002c28:	f013 0f0c 	tst.w	r3, #12
 8002c2c:	d1f6      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x174>
 8002c2e:	e74a      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	07da      	lsls	r2, r3, #31
 8002c3c:	f53f af7f 	bmi.w	8002b3e <HAL_RCC_ClockConfig+0x96>
 8002c40:	e748      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c42:	4905      	ldr	r1, [pc, #20]	; (8002c58 <HAL_RCC_ClockConfig+0x1b0>)
 8002c44:	68f0      	ldr	r0, [r6, #12]
 8002c46:	688b      	ldr	r3, [r1, #8]
 8002c48:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c4c:	4303      	orrs	r3, r0
 8002c4e:	608b      	str	r3, [r1, #8]
 8002c50:	e744      	b.n	8002adc <HAL_RCC_ClockConfig+0x34>
 8002c52:	bf00      	nop
 8002c54:	40023c00 	.word	0x40023c00
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	08005c10 	.word	0x08005c10
 8002c60:	20000010 	.word	0x20000010

08002c64 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c64:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c66:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	fa92 f2a2 	rbit	r2, r2
 8002c70:	fab2 f282 	clz	r2, r2
 8002c74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c78:	40d3      	lsrs	r3, r2
 8002c7a:	4a04      	ldr	r2, [pc, #16]	; (8002c8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c7c:	5cd3      	ldrb	r3, [r2, r3]
 8002c7e:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002c80:	6810      	ldr	r0, [r2, #0]
}    
 8002c82:	40d8      	lsrs	r0, r3
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	08005c20 	.word	0x08005c20
 8002c90:	20000010 	.word	0x20000010

08002c94 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c96:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	fa92 f2a2 	rbit	r2, r2
 8002ca0:	fab2 f282 	clz	r2, r2
 8002ca4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002ca8:	40d3      	lsrs	r3, r2
 8002caa:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cac:	5cd3      	ldrb	r3, [r2, r3]
 8002cae:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8002cb0:	6810      	ldr	r0, [r2, #0]
} 
 8002cb2:	40d8      	lsrs	r0, r3
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	08005c20 	.word	0x08005c20
 8002cc0:	20000010 	.word	0x20000010

08002cc4 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002cc4:	6803      	ldr	r3, [r0, #0]
{
 8002cc6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002cca:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8002ccc:	0798      	lsls	r0, r3, #30
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x10>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  
  return HAL_OK;
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	e055      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd4:	4b4f      	ldr	r3, [pc, #316]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cd8:	00d1      	lsls	r1, r2, #3
 8002cda:	d43f      	bmi.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x98>
      pwrclkchanged = SET;
 8002cdc:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cec:	9301      	str	r3, [sp, #4]
 8002cee:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf0:	4e49      	ldr	r6, [pc, #292]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002cf2:	6833      	ldr	r3, [r6, #0]
 8002cf4:	05da      	lsls	r2, r3, #23
 8002cf6:	d533      	bpl.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002cf8:	4b46      	ldr	r3, [pc, #280]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x150>)
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002cfa:	6862      	ldr	r2, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002cfc:	6819      	ldr	r1, [r3, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002cfe:	f002 40c0 	and.w	r0, r2, #1610612736	; 0x60000000
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002d02:	f001 41c0 	and.w	r1, r1, #1610612736	; 0x60000000
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002d06:	4281      	cmp	r1, r0
 8002d08:	d104      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x50>
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002d0a:	68a0      	ldr	r0, [r4, #8]
 8002d0c:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
 8002d10:	4281      	cmp	r1, r0
 8002d12:	d007      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x60>
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002d14:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8002d18:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8002d1c:	d102      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002d1e:	6819      	ldr	r1, [r3, #0]
 8002d20:	0388      	lsls	r0, r1, #14
 8002d22:	d475      	bmi.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002d26:	f413 3340 	ands.w	r3, r3, #196608	; 0x30000
 8002d2a:	d12c      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d2c:	6860      	ldr	r0, [r4, #4]
 8002d2e:	4b39      	ldr	r3, [pc, #228]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002d30:	f400 3140 	and.w	r1, r0, #196608	; 0x30000
 8002d34:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8002d38:	d106      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
 8002d40:	f022 42c0 	bic.w	r2, r2, #1610612736	; 0x60000000
 8002d44:	4302      	orrs	r2, r0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d4a:	4311      	orrs	r1, r2
 8002d4c:	6359      	str	r1, [r3, #52]	; 0x34
    if(pwrclkchanged == SET)
 8002d4e:	2d00      	cmp	r5, #0
 8002d50:	d0be      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d54:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
 8002d5a:	e7b9      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xc>
    FlagStatus       pwrclkchanged = RESET;
 8002d5c:	2500      	movs	r5, #0
 8002d5e:	e7c7      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d60:	6833      	ldr	r3, [r6, #0]
 8002d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d66:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002d68:	f7fe f988 	bl	800107c <HAL_GetTick>
 8002d6c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	6833      	ldr	r3, [r6, #0]
 8002d70:	05db      	lsls	r3, r3, #23
 8002d72:	d4c1      	bmi.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d74:	f7fe f982 	bl	800107c <HAL_GetTick>
 8002d78:	1bc0      	subs	r0, r0, r7
 8002d7a:	2864      	cmp	r0, #100	; 0x64
 8002d7c:	d9f7      	bls.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xaa>
          return HAL_TIMEOUT;
 8002d7e:	2003      	movs	r0, #3
}
 8002d80:	b003      	add	sp, #12
 8002d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002d86:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d002      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d8e:	6822      	ldr	r2, [r4, #0]
 8002d90:	07d1      	lsls	r1, r2, #31
 8002d92:	d407      	bmi.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002d94:	68a2      	ldr	r2, [r4, #8]
 8002d96:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d0c6      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x68>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002d9e:	6823      	ldr	r3, [r4, #0]
 8002da0:	079a      	lsls	r2, r3, #30
 8002da2:	d5c3      	bpl.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x68>
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002da4:	4e1b      	ldr	r6, [pc, #108]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002da6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002daa:	6b71      	ldr	r1, [r6, #52]	; 0x34
 8002dac:	f421 3040 	bic.w	r0, r1, #196608	; 0x30000
 8002db0:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8002db4:	fab2 f282 	clz	r2, r2
 8002db8:	2701      	movs	r7, #1
 8002dba:	f8df e060 	ldr.w	lr, [pc, #96]	; 8002e1c <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002dbe:	4472      	add	r2, lr
 8002dc0:	0092      	lsls	r2, r2, #2
 8002dc2:	6017      	str	r7, [r2, #0]
 8002dc4:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	2200      	movs	r2, #0
 8002dce:	4473      	add	r3, lr
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002dd4:	05cb      	lsls	r3, r1, #23
      RCC->CSR = temp_reg;
 8002dd6:	6370      	str	r0, [r6, #52]	; 0x34
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002dd8:	d5a8      	bpl.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        tickstart = HAL_GetTick();
 8002dda:	f7fe f94f 	bl	800107c <HAL_GetTick>
 8002dde:	f44f 7800 	mov.w	r8, #512	; 0x200
 8002de2:	4681      	mov	r9, r0
 8002de4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de8:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8002dea:	fa98 f3a8 	rbit	r3, r8
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	f003 031f 	and.w	r3, r3, #31
 8002df6:	fa07 f303 	lsl.w	r3, r7, r3
 8002dfa:	4213      	tst	r3, r2
 8002dfc:	d196      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x68>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f7fe f93d 	bl	800107c <HAL_GetTick>
 8002e02:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e06:	eba0 0009 	sub.w	r0, r0, r9
 8002e0a:	4298      	cmp	r0, r3
 8002e0c:	d9ea      	bls.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8002e0e:	e7b6      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xba>
        return HAL_ERROR; 
 8002e10:	2001      	movs	r0, #1
 8002e12:	e7b5      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40007000 	.word	0x40007000
 8002e1c:	1091c1a0 	.word	0x1091c1a0

08002e20 <RTC_EnterInitMode>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002e20:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e22:	6803      	ldr	r3, [r0, #0]
{
 8002e24:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	0652      	lsls	r2, r2, #25
 8002e2a:	d501      	bpl.n	8002e30 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002e30:	f04f 32ff 	mov.w	r2, #4294967295
 8002e34:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002e36:	f7fe f921 	bl	800107c <HAL_GetTick>
 8002e3a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	065b      	lsls	r3, r3, #25
 8002e42:	d4f3      	bmi.n	8002e2c <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002e44:	f7fe f91a 	bl	800107c <HAL_GetTick>
 8002e48:	1b40      	subs	r0, r0, r5
 8002e4a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002e4e:	d9f5      	bls.n	8002e3c <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8002e50:	2003      	movs	r0, #3
}
 8002e52:	bd38      	pop	{r3, r4, r5, pc}

08002e54 <HAL_RTC_Init>:
{
 8002e54:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002e56:	4604      	mov	r4, r0
 8002e58:	b1b0      	cbz	r0, 8002e88 <HAL_RTC_Init+0x34>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002e5a:	7f43      	ldrb	r3, [r0, #29]
 8002e5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e60:	b913      	cbnz	r3, 8002e68 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8002e62:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002e64:	f002 f87a 	bl	8004f5c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002e68:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e6a:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002e6c:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e6e:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e70:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e72:	625a      	str	r2, [r3, #36]	; 0x24
 8002e74:	2253      	movs	r2, #83	; 0x53
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e78:	f7ff ffd2 	bl	8002e20 <RTC_EnterInitMode>
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	b128      	cbz	r0, 8002e8c <HAL_RTC_Init+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002e80:	22ff      	movs	r2, #255	; 0xff
 8002e82:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e84:	2304      	movs	r3, #4
 8002e86:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8002e88:	2001      	movs	r0, #1
}
 8002e8a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e8c:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e8e:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e90:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8002e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e98:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e9a:	6862      	ldr	r2, [r4, #4]
 8002e9c:	6899      	ldr	r1, [r3, #8]
 8002e9e:	432a      	orrs	r2, r5
 8002ea0:	6965      	ldr	r5, [r4, #20]
 8002ea2:	432a      	orrs	r2, r5
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002ea8:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002eaa:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002eac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002eb4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8002eb6:	68da      	ldr	r2, [r3, #12]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002eb8:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8002eba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ebe:	60da      	str	r2, [r3, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ec2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ec6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002ece:	22ff      	movs	r2, #255	; 0xff
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8002ed6:	bd38      	pop	{r3, r4, r5, pc}

08002ed8 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8002ed8:	2300      	movs	r3, #0
  
  while(Value >= 10)
 8002eda:	2809      	cmp	r0, #9
 8002edc:	d803      	bhi.n	8002ee6 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8002ede:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8002ee2:	b2c0      	uxtb	r0, r0
 8002ee4:	4770      	bx	lr
    Value -= 10;
 8002ee6:	380a      	subs	r0, #10
    bcdhigh++;
 8002ee8:	3301      	adds	r3, #1
    Value -= 10;
 8002eea:	b2c0      	uxtb	r0, r0
 8002eec:	e7f5      	b.n	8002eda <RTC_ByteToBcd2+0x2>

08002eee <HAL_RTC_SetTime>:
{
 8002eee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002ef0:	7f03      	ldrb	r3, [r0, #28]
{
 8002ef2:	4606      	mov	r6, r0
  __HAL_LOCK(hrtc);
 8002ef4:	2b01      	cmp	r3, #1
{
 8002ef6:	460f      	mov	r7, r1
 8002ef8:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8002efc:	d05e      	beq.n	8002fbc <HAL_RTC_SetTime+0xce>
 8002efe:	2301      	movs	r3, #1
 8002f00:	7733      	strb	r3, [r6, #28]
 8002f02:	6833      	ldr	r3, [r6, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f04:	7770      	strb	r0, [r6, #29]
 8002f06:	7808      	ldrb	r0, [r1, #0]
 8002f08:	784d      	ldrb	r5, [r1, #1]
 8002f0a:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002f0c:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8002f0e:	bb3a      	cbnz	r2, 8002f60 <HAL_RTC_SetTime+0x72>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002f10:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00;
 8002f14:	bf08      	it	eq
 8002f16:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002f18:	f7ff ffde 	bl	8002ed8 <RTC_ByteToBcd2>
 8002f1c:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002f1e:	4628      	mov	r0, r5
 8002f20:	f7ff ffda 	bl	8002ed8 <RTC_ByteToBcd2>
 8002f24:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002f26:	4620      	mov	r0, r4
 8002f28:	f7ff ffd6 	bl	8002ed8 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002f2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002f32:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8002f36:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f3a:	22ca      	movs	r2, #202	; 0xca
 8002f3c:	6833      	ldr	r3, [r6, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f3e:	4630      	mov	r0, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f40:	625a      	str	r2, [r3, #36]	; 0x24
 8002f42:	2253      	movs	r2, #83	; 0x53
 8002f44:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f46:	f7ff ff6b 	bl	8002e20 <RTC_EnterInitMode>
 8002f4a:	6833      	ldr	r3, [r6, #0]
 8002f4c:	4605      	mov	r5, r0
 8002f4e:	b1a0      	cbz	r0, 8002f7a <HAL_RTC_SetTime+0x8c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002f50:	22ff      	movs	r2, #255	; 0xff
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f54:	2304      	movs	r3, #4
 8002f56:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8002f58:	2300      	movs	r3, #0
 8002f5a:	7733      	strb	r3, [r6, #28]
      return HAL_ERROR;
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002f60:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002f64:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00;
 8002f68:	bf08      	it	eq
 8002f6a:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002f6c:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002f70:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8002f72:	78cc      	ldrb	r4, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002f74:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8002f78:	e7df      	b.n	8002f3a <HAL_RTC_SetTime+0x4c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002f7a:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8002f7e:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8002f82:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002f84:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002f86:	6938      	ldr	r0, [r7, #16]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002f88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f8c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	6899      	ldr	r1, [r3, #8]
 8002f92:	4302      	orrs	r2, r0
 8002f94:	430a      	orrs	r2, r1
 8002f96:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002f98:	68da      	ldr	r2, [r3, #12]
    if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f9a:	4630      	mov	r0, r6
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fa0:	60da      	str	r2, [r3, #12]
    if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fa2:	f000 f8b7 	bl	8003114 <HAL_RTC_WaitForSynchro>
 8002fa6:	22ff      	movs	r2, #255	; 0xff
 8002fa8:	6833      	ldr	r3, [r6, #0]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24
    if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fac:	b118      	cbz	r0, 8002fb6 <HAL_RTC_SetTime+0xc8>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002fae:	2304      	movs	r3, #4
      __HAL_UNLOCK(hrtc);
 8002fb0:	7735      	strb	r5, [r6, #28]
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002fb2:	7773      	strb	r3, [r6, #29]
 8002fb4:	e7d2      	b.n	8002f5c <HAL_RTC_SetTime+0x6e>
   hrtc->State = HAL_RTC_STATE_READY;
 8002fb6:	2301      	movs	r3, #1
   __HAL_UNLOCK(hrtc); 
 8002fb8:	7730      	strb	r0, [r6, #28]
   hrtc->State = HAL_RTC_STATE_READY;
 8002fba:	7773      	strb	r3, [r6, #29]
}
 8002fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002fbe <HAL_RTC_SetDate>:
{
 8002fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8002fc0:	7f03      	ldrb	r3, [r0, #28]
{
 8002fc2:	4605      	mov	r5, r0
 __HAL_LOCK(hrtc);
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	f04f 0002 	mov.w	r0, #2
 8002fca:	d050      	beq.n	800306e <HAL_RTC_SetDate+0xb0>
 8002fcc:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002fce:	7768      	strb	r0, [r5, #29]
 __HAL_LOCK(hrtc);
 8002fd0:	772b      	strb	r3, [r5, #28]
 8002fd2:	784b      	ldrb	r3, [r1, #1]
 8002fd4:	78c8      	ldrb	r0, [r1, #3]
 8002fd6:	788e      	ldrb	r6, [r1, #2]
 8002fd8:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8002fda:	2a00      	cmp	r2, #0
 8002fdc:	d140      	bne.n	8003060 <HAL_RTC_SetDate+0xa2>
 8002fde:	06da      	lsls	r2, r3, #27
 8002fe0:	d503      	bpl.n	8002fea <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8002fe2:	f023 0310 	bic.w	r3, r3, #16
 8002fe6:	330a      	adds	r3, #10
 8002fe8:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002fea:	f7ff ff75 	bl	8002ed8 <RTC_ByteToBcd2>
 8002fee:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002ff0:	7848      	ldrb	r0, [r1, #1]
 8002ff2:	f7ff ff71 	bl	8002ed8 <RTC_ByteToBcd2>
 8002ff6:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002ff8:	4630      	mov	r0, r6
 8002ffa:	f7ff ff6d 	bl	8002ed8 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002ffe:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8003002:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8003006:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800300a:	22ca      	movs	r2, #202	; 0xca
 800300c:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800300e:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003010:	625a      	str	r2, [r3, #36]	; 0x24
 8003012:	2253      	movs	r2, #83	; 0x53
 8003014:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003016:	f7ff ff03 	bl	8002e20 <RTC_EnterInitMode>
 800301a:	682b      	ldr	r3, [r5, #0]
 800301c:	4606      	mov	r6, r0
 800301e:	b138      	cbz	r0, 8003030 <HAL_RTC_SetDate+0x72>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8003020:	22ff      	movs	r2, #255	; 0xff
 8003022:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003024:	2304      	movs	r3, #4
 8003026:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8003028:	2300      	movs	r3, #0
 800302a:	772b      	strb	r3, [r5, #28]
      return HAL_ERROR;
 800302c:	2001      	movs	r0, #1
 800302e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003030:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8003034:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8003038:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800303a:	68da      	ldr	r2, [r3, #12]
    if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800303c:	4628      	mov	r0, r5
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800303e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003042:	60da      	str	r2, [r3, #12]
    if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003044:	f000 f866 	bl	8003114 <HAL_RTC_WaitForSynchro>
 8003048:	22ff      	movs	r2, #255	; 0xff
 800304a:	682b      	ldr	r3, [r5, #0]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800304c:	625a      	str	r2, [r3, #36]	; 0x24
    if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800304e:	b118      	cbz	r0, 8003058 <HAL_RTC_SetDate+0x9a>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003050:	2304      	movs	r3, #4
      __HAL_UNLOCK(hrtc);
 8003052:	772e      	strb	r6, [r5, #28]
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003054:	776b      	strb	r3, [r5, #29]
 8003056:	e7e9      	b.n	800302c <HAL_RTC_SetDate+0x6e>
    hrtc->State = HAL_RTC_STATE_READY ;
 8003058:	2301      	movs	r3, #1
    __HAL_UNLOCK(hrtc);
 800305a:	7728      	strb	r0, [r5, #28]
    hrtc->State = HAL_RTC_STATE_READY ;
 800305c:	776b      	strb	r3, [r5, #29]
    return HAL_OK;    
 800305e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                  (((uint32_t)sDate->Month) << 8) | \
 8003060:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003062:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 8003066:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003068:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 800306c:	e7cd      	b.n	800300a <HAL_RTC_SetDate+0x4c>
}
 800306e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003070 <RTC_Bcd2ToByte>:
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 8003070:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003072:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8003074:	f000 000f 	and.w	r0, r0, #15
 8003078:	fb02 0003 	mla	r0, r2, r3, r0
}
 800307c:	b2c0      	uxtb	r0, r0
 800307e:	4770      	bx	lr

08003080 <HAL_RTC_GetDate>:
{
 8003080:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8003082:	6803      	ldr	r3, [r0, #0]
 8003084:	685c      	ldr	r4, [r3, #4]
 8003086:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
 800308a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800308e:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8003090:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003094:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8003098:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800309c:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800309e:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80030a0:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80030a2:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80030a4:	b952      	cbnz	r2, 80030bc <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80030a6:	f7ff ffe3 	bl	8003070 <RTC_Bcd2ToByte>
 80030aa:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80030ac:	4628      	mov	r0, r5
 80030ae:	f7ff ffdf 	bl	8003070 <RTC_Bcd2ToByte>
 80030b2:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 80030b4:	4620      	mov	r0, r4
 80030b6:	f7ff ffdb 	bl	8003070 <RTC_Bcd2ToByte>
 80030ba:	7088      	strb	r0, [r1, #2]
}
 80030bc:	2000      	movs	r0, #0
 80030be:	bd38      	pop	{r3, r4, r5, pc}

080030c0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80030c0:	b538      	push	{r3, r4, r5, lr}
 80030c2:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX) 
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 80030c4:	6803      	ldr	r3, [r0, #0]
 80030c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80030c8:	b289      	uxth	r1, r1
 80030ca:	6061      	str	r1, [r4, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80030cc:	6919      	ldr	r1, [r3, #16]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80030ce:	681d      	ldr	r5, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80030d0:	f3c1 010e 	ubfx	r1, r1, #0, #15
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80030d4:	f005 337f 	and.w	r3, r5, #2139062143	; 0x7f7f7f7f
 80030d8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80030dc:	60a1      	str	r1, [r4, #8]
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80030de:	0c19      	lsrs	r1, r3, #16
 80030e0:	f001 003f 	and.w	r0, r1, #63	; 0x3f
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80030e4:	f3c3 2306 	ubfx	r3, r3, #8, #7
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80030e8:	f005 057f 	and.w	r5, r5, #127	; 0x7f
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 80030ec:	f001 0140 	and.w	r1, r1, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80030f0:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80030f2:	7063      	strb	r3, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80030f4:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 80030f6:	70e1      	strb	r1, [r4, #3]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80030f8:	b952      	cbnz	r2, 8003110 <HAL_RTC_GetTime+0x50>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80030fa:	f7ff ffb9 	bl	8003070 <RTC_Bcd2ToByte>
 80030fe:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003100:	7860      	ldrb	r0, [r4, #1]
 8003102:	f7ff ffb5 	bl	8003070 <RTC_Bcd2ToByte>
 8003106:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8003108:	78a0      	ldrb	r0, [r4, #2]
 800310a:	f7ff ffb1 	bl	8003070 <RTC_Bcd2ToByte>
 800310e:	70a0      	strb	r0, [r4, #2]
  }
  
  return HAL_OK;
}
 8003110:	2000      	movs	r0, #0
 8003112:	bd38      	pop	{r3, r4, r5, pc}

08003114 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003114:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)   
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003116:	6803      	ldr	r3, [r0, #0]
{
 8003118:	4604      	mov	r4, r0
  if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	0692      	lsls	r2, r2, #26
 800311e:	d501      	bpl.n	8003124 <HAL_RTC_WaitForSynchro+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }

  return HAL_OK;
 8003120:	2000      	movs	r0, #0
 8003122:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800312a:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 800312c:	f7fd ffa6 	bl	800107c <HAL_GetTick>
 8003130:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	069b      	lsls	r3, r3, #26
 8003138:	d4f2      	bmi.n	8003120 <HAL_RTC_WaitForSynchro+0xc>
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 800313a:	f7fd ff9f 	bl	800107c <HAL_GetTick>
 800313e:	1b40      	subs	r0, r0, r5
 8003140:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003144:	d9f5      	bls.n	8003132 <HAL_RTC_WaitForSynchro+0x1e>
        return HAL_TIMEOUT;
 8003146:	2003      	movs	r0, #3
}
 8003148:	bd38      	pop	{r3, r4, r5, pc}
	...

0800314c <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800314c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003150:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003152:	6805      	ldr	r5, [r0, #0]
 8003154:	68c2      	ldr	r2, [r0, #12]
 8003156:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003158:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800315a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800315e:	4313      	orrs	r3, r2
 8003160:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003162:	6883      	ldr	r3, [r0, #8]
 8003164:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 8003166:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003168:	4303      	orrs	r3, r0
 800316a:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 800316e:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003172:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 8003174:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003178:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800317a:	4313      	orrs	r3, r2
 800317c:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800317e:	696b      	ldr	r3, [r5, #20]
 8003180:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8003184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003188:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800318a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800318e:	616b      	str	r3, [r5, #20]
 8003190:	4b7e      	ldr	r3, [pc, #504]	; (800338c <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003192:	d17f      	bne.n	8003294 <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8003194:	429d      	cmp	r5, r3
 8003196:	f04f 0419 	mov.w	r4, #25
 800319a:	d147      	bne.n	800322c <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800319c:	f7ff fd7a 	bl	8002c94 <HAL_RCC_GetPCLK2Freq>
 80031a0:	fb04 f300 	mul.w	r3, r4, r0
 80031a4:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80031a8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80031ac:	007f      	lsls	r7, r7, #1
 80031ae:	fbb3 f3f7 	udiv	r3, r3, r7
 80031b2:	fbb3 f3f8 	udiv	r3, r3, r8
 80031b6:	011f      	lsls	r7, r3, #4
 80031b8:	f7ff fd6c 	bl	8002c94 <HAL_RCC_GetPCLK2Freq>
 80031bc:	4360      	muls	r0, r4
 80031be:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fbb0 f6f3 	udiv	r6, r0, r3
 80031c8:	f7ff fd64 	bl	8002c94 <HAL_RCC_GetPCLK2Freq>
 80031cc:	4360      	muls	r0, r4
 80031ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d8:	fbb3 f3f8 	udiv	r3, r3, r8
 80031dc:	fb08 6313 	mls	r3, r8, r3, r6
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	3332      	adds	r3, #50	; 0x32
 80031e4:	fbb3 f3f8 	udiv	r3, r3, r8
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 80031ee:	f7ff fd51 	bl	8002c94 <HAL_RCC_GetPCLK2Freq>
 80031f2:	4360      	muls	r0, r4
 80031f4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80031f8:	0052      	lsls	r2, r2, #1
 80031fa:	fbb0 faf2 	udiv	sl, r0, r2
 80031fe:	f7ff fd49 	bl	8002c94 <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003202:	4360      	muls	r0, r4
 8003204:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	fbb0 f3f3 	udiv	r3, r0, r3
 800320e:	fbb3 f3f8 	udiv	r3, r3, r8
 8003212:	fb08 a313 	mls	r3, r8, r3, sl
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	3332      	adds	r3, #50	; 0x32
 800321a:	fbb3 f3f8 	udiv	r3, r3, r8
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003224:	4433      	add	r3, r6
 8003226:	60ab      	str	r3, [r5, #8]
 8003228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800322c:	f7ff fd1a 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 8003230:	fb04 f300 	mul.w	r3, r4, r0
 8003234:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8003238:	f04f 0864 	mov.w	r8, #100	; 0x64
 800323c:	007f      	lsls	r7, r7, #1
 800323e:	fbb3 f3f7 	udiv	r3, r3, r7
 8003242:	fbb3 f3f8 	udiv	r3, r3, r8
 8003246:	011f      	lsls	r7, r3, #4
 8003248:	f7ff fd0c 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 800324c:	4360      	muls	r0, r4
 800324e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	fbb0 f6f3 	udiv	r6, r0, r3
 8003258:	f7ff fd04 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 800325c:	4360      	muls	r0, r4
 800325e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	fbb0 f3f3 	udiv	r3, r0, r3
 8003268:	fbb3 f3f8 	udiv	r3, r3, r8
 800326c:	fb08 6313 	mls	r3, r8, r3, r6
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	3332      	adds	r3, #50	; 0x32
 8003274:	fbb3 f3f8 	udiv	r3, r3, r8
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 800327e:	f7ff fcf1 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 8003282:	4360      	muls	r0, r4
 8003284:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8003288:	0052      	lsls	r2, r2, #1
 800328a:	fbb0 faf2 	udiv	sl, r0, r2
 800328e:	f7ff fce9 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 8003292:	e7b6      	b.n	8003202 <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 8003294:	429d      	cmp	r5, r3
 8003296:	f04f 0419 	mov.w	r4, #25
 800329a:	d143      	bne.n	8003324 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800329c:	f7ff fcfa 	bl	8002c94 <HAL_RCC_GetPCLK2Freq>
 80032a0:	fb04 f300 	mul.w	r3, r4, r0
 80032a4:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80032a8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80032ac:	00b6      	lsls	r6, r6, #2
 80032ae:	fbb3 f3f6 	udiv	r3, r3, r6
 80032b2:	fbb3 f3f8 	udiv	r3, r3, r8
 80032b6:	011e      	lsls	r6, r3, #4
 80032b8:	f7ff fcec 	bl	8002c94 <HAL_RCC_GetPCLK2Freq>
 80032bc:	4360      	muls	r0, r4
 80032be:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	fbb0 f7f3 	udiv	r7, r0, r3
 80032c8:	f7ff fce4 	bl	8002c94 <HAL_RCC_GetPCLK2Freq>
 80032cc:	4360      	muls	r0, r4
 80032ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d8:	fbb3 f3f8 	udiv	r3, r3, r8
 80032dc:	fb08 7313 	mls	r3, r8, r3, r7
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	3332      	adds	r3, #50	; 0x32
 80032e4:	fbb3 f3f8 	udiv	r3, r3, r8
 80032e8:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80032ec:	f7ff fcd2 	bl	8002c94 <HAL_RCC_GetPCLK2Freq>
 80032f0:	4360      	muls	r0, r4
 80032f2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80032f6:	0092      	lsls	r2, r2, #2
 80032f8:	fbb0 faf2 	udiv	sl, r0, r2
 80032fc:	f7ff fcca 	bl	8002c94 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003300:	4360      	muls	r0, r4
 8003302:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	fbb0 f3f3 	udiv	r3, r0, r3
 800330c:	fbb3 f3f8 	udiv	r3, r3, r8
 8003310:	fb08 a313 	mls	r3, r8, r3, sl
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	3332      	adds	r3, #50	; 0x32
 8003318:	fbb3 f3f8 	udiv	r3, r3, r8
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	433b      	orrs	r3, r7
 8003322:	e77f      	b.n	8003224 <UART_SetConfig+0xd8>
 8003324:	f7ff fc9e 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 8003328:	fb04 f300 	mul.w	r3, r4, r0
 800332c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8003330:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003334:	00b6      	lsls	r6, r6, #2
 8003336:	fbb3 f3f6 	udiv	r3, r3, r6
 800333a:	fbb3 f3f8 	udiv	r3, r3, r8
 800333e:	011e      	lsls	r6, r3, #4
 8003340:	f7ff fc90 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 8003344:	4360      	muls	r0, r4
 8003346:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	fbb0 f7f3 	udiv	r7, r0, r3
 8003350:	f7ff fc88 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 8003354:	4360      	muls	r0, r4
 8003356:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003360:	fbb3 f3f8 	udiv	r3, r3, r8
 8003364:	fb08 7313 	mls	r3, r8, r3, r7
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	3332      	adds	r3, #50	; 0x32
 800336c:	fbb3 f3f8 	udiv	r3, r3, r8
 8003370:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8003374:	f7ff fc76 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 8003378:	4360      	muls	r0, r4
 800337a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800337e:	0092      	lsls	r2, r2, #2
 8003380:	fbb0 faf2 	udiv	sl, r0, r2
 8003384:	f7ff fc6e 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 8003388:	e7ba      	b.n	8003300 <UART_SetConfig+0x1b4>
 800338a:	bf00      	nop
 800338c:	40013800 	.word	0x40013800

08003390 <UART_WaitOnFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 8003390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003392:	4604      	mov	r4, r0
 8003394:	460e      	mov	r6, r1
 8003396:	4615      	mov	r5, r2
  tickstart = HAL_GetTick();
 8003398:	f7fd fe70 	bl	800107c <HAL_GetTick>
 800339c:	4607      	mov	r7, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 800339e:	6822      	ldr	r2, [r4, #0]
 80033a0:	6813      	ldr	r3, [r2, #0]
 80033a2:	ea36 0303 	bics.w	r3, r6, r3
 80033a6:	d101      	bne.n	80033ac <UART_WaitOnFlagUntilTimeout.constprop.1+0x1c>
  return HAL_OK;
 80033a8:	2000      	movs	r0, #0
}
 80033aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 80033ac:	1c6b      	adds	r3, r5, #1
 80033ae:	d0f7      	beq.n	80033a0 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80033b0:	b9c5      	cbnz	r5, 80033e4 <UART_WaitOnFlagUntilTimeout.constprop.1+0x54>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033b2:	6823      	ldr	r3, [r4, #0]
          return HAL_TIMEOUT;
 80033b4:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033bc:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	f022 0220 	bic.w	r2, r2, #32
 80033c4:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033cc:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033ce:	695a      	ldr	r2, [r3, #20]
 80033d0:	f022 0201 	bic.w	r2, r2, #1
 80033d4:	615a      	str	r2, [r3, #20]
          huart->State= HAL_UART_STATE_READY;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
          __HAL_UNLOCK(huart);
 80033dc:	2300      	movs	r3, #0
 80033de:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80033e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80033e4:	f7fd fe4a 	bl	800107c <HAL_GetTick>
 80033e8:	1bc0      	subs	r0, r0, r7
 80033ea:	4285      	cmp	r5, r0
 80033ec:	d2d7      	bcs.n	800339e <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 80033ee:	e7e0      	b.n	80033b2 <UART_WaitOnFlagUntilTimeout.constprop.1+0x22>

080033f0 <HAL_UART_Init>:
{
 80033f0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80033f2:	4604      	mov	r4, r0
 80033f4:	b330      	cbz	r0, 8003444 <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 80033f6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80033fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033fe:	b91b      	cbnz	r3, 8003408 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003400:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003404:	f001 fe92 	bl	800512c <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 8003408:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 800340a:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 800340c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003410:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003412:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003414:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003418:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800341a:	f7ff fe97 	bl	800314c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800341e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003420:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800342a:	695a      	ldr	r2, [r3, #20]
 800342c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003430:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003438:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 800343a:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 800343e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003442:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003444:	2001      	movs	r0, #1
}
 8003446:	bd10      	pop	{r4, pc}

08003448 <HAL_UART_Transmit>:
{
 8003448:	b570      	push	{r4, r5, r6, lr}
 800344a:	460d      	mov	r5, r1
  tmp_state = huart->State;
 800344c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
{
 8003450:	4604      	mov	r4, r0
  tmp_state = huart->State;
 8003452:	b2c9      	uxtb	r1, r1
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8003454:	2901      	cmp	r1, #1
{
 8003456:	461e      	mov	r6, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 8003458:	d001      	beq.n	800345e <HAL_UART_Transmit+0x16>
 800345a:	2922      	cmp	r1, #34	; 0x22
 800345c:	d14d      	bne.n	80034fa <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0))
 800345e:	2d00      	cmp	r5, #0
 8003460:	d049      	beq.n	80034f6 <HAL_UART_Transmit+0xae>
 8003462:	2a00      	cmp	r2, #0
 8003464:	d047      	beq.n	80034f6 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8003466:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800346a:	2b01      	cmp	r3, #1
 800346c:	d045      	beq.n	80034fa <HAL_UART_Transmit+0xb2>
 800346e:	2301      	movs	r3, #1
 8003470:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	2300      	movs	r3, #0
 8003476:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8003478:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 800347c:	84a2      	strh	r2, [r4, #36]	; 0x24
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 800347e:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8003480:	bf0c      	ite	eq
 8003482:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 8003484:	2312      	movne	r3, #18
    huart->TxXferCount = Size;
 8003486:	84e2      	strh	r2, [r4, #38]	; 0x26
      huart->State = HAL_UART_STATE_BUSY_TX;
 8003488:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    while(huart->TxXferCount > 0)
 800348c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800348e:	b98a      	cbnz	r2, 80034b4 <HAL_UART_Transmit+0x6c>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8003490:	4632      	mov	r2, r6
 8003492:	2140      	movs	r1, #64	; 0x40
 8003494:	4620      	mov	r0, r4
 8003496:	f7ff ff7b 	bl	8003390 <UART_WaitOnFlagUntilTimeout.constprop.1>
 800349a:	b9c0      	cbnz	r0, 80034ce <HAL_UART_Transmit+0x86>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800349c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80034a0:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 80034a2:	bf0c      	ite	eq
 80034a4:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 80034a6:	2301      	movne	r3, #1
 80034a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80034ac:	2300      	movs	r3, #0
 80034ae:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 80034b2:	bd70      	pop	{r4, r5, r6, pc}
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034b4:	68a3      	ldr	r3, [r4, #8]
      huart->TxXferCount--;
 80034b6:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->TxXferCount--;
 80034bc:	84e2      	strh	r2, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80034be:	f04f 0180 	mov.w	r1, #128	; 0x80
 80034c2:	4632      	mov	r2, r6
 80034c4:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034c6:	d10d      	bne.n	80034e4 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80034c8:	f7ff ff62 	bl	8003390 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80034cc:	b108      	cbz	r0, 80034d2 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80034ce:	2003      	movs	r0, #3
 80034d0:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80034d2:	882b      	ldrh	r3, [r5, #0]
 80034d4:	6822      	ldr	r2, [r4, #0]
 80034d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034da:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80034dc:	6923      	ldr	r3, [r4, #16]
 80034de:	b943      	cbnz	r3, 80034f2 <HAL_UART_Transmit+0xaa>
          pData +=2;
 80034e0:	3502      	adds	r5, #2
 80034e2:	e7d3      	b.n	800348c <HAL_UART_Transmit+0x44>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80034e4:	f7ff ff54 	bl	8003390 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80034e8:	2800      	cmp	r0, #0
 80034ea:	d1f0      	bne.n	80034ce <HAL_UART_Transmit+0x86>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	782a      	ldrb	r2, [r5, #0]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	3501      	adds	r5, #1
 80034f4:	e7ca      	b.n	800348c <HAL_UART_Transmit+0x44>
      return  HAL_ERROR;
 80034f6:	2001      	movs	r0, #1
 80034f8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80034fa:	2002      	movs	r0, #2
}
 80034fc:	bd70      	pop	{r4, r5, r6, pc}

080034fe <HAL_UART_Receive_IT>:
  tmp_state = huart->State;
 80034fe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003502:	b2db      	uxtb	r3, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 8003504:	2b01      	cmp	r3, #1
 8003506:	d001      	beq.n	800350c <HAL_UART_Receive_IT+0xe>
 8003508:	2b12      	cmp	r3, #18
 800350a:	d128      	bne.n	800355e <HAL_UART_Receive_IT+0x60>
    if((pData == NULL ) || (Size == 0))
 800350c:	b329      	cbz	r1, 800355a <HAL_UART_Receive_IT+0x5c>
 800350e:	b322      	cbz	r2, 800355a <HAL_UART_Receive_IT+0x5c>
    __HAL_LOCK(huart);
 8003510:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003514:	2b01      	cmp	r3, #1
 8003516:	d022      	beq.n	800355e <HAL_UART_Receive_IT+0x60>
 8003518:	2301      	movs	r3, #1
 800351a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351e:	2300      	movs	r3, #0
 8003520:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxXferSize = Size;
 8003522:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003524:	85c2      	strh	r2, [r0, #46]	; 0x2e
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8003526:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800352a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 800352e:	2a12      	cmp	r2, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8003530:	bf0c      	ite	eq
 8003532:	2232      	moveq	r2, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8003534:	2222      	movne	r2, #34	; 0x22
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003536:	6803      	ldr	r3, [r0, #0]
      huart->State = HAL_UART_STATE_BUSY_RX;
 8003538:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800353c:	68da      	ldr	r2, [r3, #12]
    huart->pRxBuffPtr = pData;
 800353e:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003544:	60da      	str	r2, [r3, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003546:	695a      	ldr	r2, [r3, #20]
    return HAL_OK;
 8003548:	2000      	movs	r0, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	f042 0220 	orr.w	r2, r2, #32
 8003556:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8003558:	4770      	bx	lr
      return HAL_ERROR;
 800355a:	2001      	movs	r0, #1
 800355c:	4770      	bx	lr
    return HAL_BUSY;
 800355e:	2002      	movs	r0, #2
}
 8003560:	4770      	bx	lr

08003562 <HAL_UART_TxCpltCallback>:
 8003562:	4770      	bx	lr

08003564 <HAL_UART_ErrorCallback>:
{
 8003564:	4770      	bx	lr

08003566 <HAL_UART_IRQHandler>:
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8003566:	6802      	ldr	r2, [r0, #0]
{
 8003568:	b513      	push	{r0, r1, r4, lr}
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 800356a:	6811      	ldr	r1, [r2, #0]
{
 800356c:	4604      	mov	r4, r0
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800356e:	07c9      	lsls	r1, r1, #31
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8003570:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003572:	d505      	bpl.n	8003580 <HAL_UART_IRQHandler+0x1a>
 8003574:	05db      	lsls	r3, r3, #23
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003576:	bf42      	ittt	mi
 8003578:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 800357a:	f043 0301 	orrmi.w	r3, r3, #1
 800357e:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8003580:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8003582:	6953      	ldr	r3, [r2, #20]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003584:	0788      	lsls	r0, r1, #30
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8003586:	f003 0301 	and.w	r3, r3, #1
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800358a:	d504      	bpl.n	8003596 <HAL_UART_IRQHandler+0x30>
 800358c:	b11b      	cbz	r3, 8003596 <HAL_UART_IRQHandler+0x30>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 800358e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003590:	f041 0104 	orr.w	r1, r1, #4
 8003594:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8003596:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8003598:	0749      	lsls	r1, r1, #29
 800359a:	d504      	bpl.n	80035a6 <HAL_UART_IRQHandler+0x40>
 800359c:	b11b      	cbz	r3, 80035a6 <HAL_UART_IRQHandler+0x40>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 800359e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80035a0:	f041 0102 	orr.w	r1, r1, #2
 80035a4:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80035a6:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80035a8:	0708      	lsls	r0, r1, #28
 80035aa:	d504      	bpl.n	80035b6 <HAL_UART_IRQHandler+0x50>
 80035ac:	b11b      	cbz	r3, 80035b6 <HAL_UART_IRQHandler+0x50>
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80035b0:	f043 0308 	orr.w	r3, r3, #8
 80035b4:	63e3      	str	r3, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 80035b6:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 80035b8:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80035ba:	0689      	lsls	r1, r1, #26
 80035bc:	d533      	bpl.n	8003626 <HAL_UART_IRQHandler+0xc0>
 80035be:	0698      	lsls	r0, r3, #26
 80035c0:	d531      	bpl.n	8003626 <HAL_UART_IRQHandler+0xc0>
  tmp_state = huart->State; 
 80035c2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 80035c6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80035ca:	2b22      	cmp	r3, #34	; 0x22
 80035cc:	d12b      	bne.n	8003626 <HAL_UART_IRQHandler+0xc0>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035ce:	68a3      	ldr	r3, [r4, #8]
 80035d0:	6921      	ldr	r1, [r4, #16]
 80035d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80035d8:	d176      	bne.n	80036c8 <HAL_UART_IRQHandler+0x162>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035da:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80035dc:	2900      	cmp	r1, #0
 80035de:	d16f      	bne.n	80036c0 <HAL_UART_IRQHandler+0x15a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035e4:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1;
 80035e8:	62a3      	str	r3, [r4, #40]	; 0x28
    if(--huart->RxXferCount == 0)
 80035ea:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80035f2:	b9c3      	cbnz	r3, 8003626 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035f4:	6823      	ldr	r3, [r4, #0]
      HAL_UART_RxCpltCallback(huart);
 80035f6:	4620      	mov	r0, r4
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	f022 0220 	bic.w	r2, r2, #32
 80035fe:	60da      	str	r2, [r3, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8003600:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003604:	2a32      	cmp	r2, #50	; 0x32
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003606:	bf17      	itett	ne
 8003608:	68da      	ldrne	r2, [r3, #12]
        huart->State = HAL_UART_STATE_BUSY_TX;
 800360a:	2312      	moveq	r3, #18
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800360c:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 8003610:	60da      	strne	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003612:	bf1f      	itttt	ne
 8003614:	695a      	ldrne	r2, [r3, #20]
 8003616:	f022 0201 	bicne.w	r2, r2, #1
 800361a:	615a      	strne	r2, [r3, #20]
        huart->State = HAL_UART_STATE_READY;
 800361c:	2301      	movne	r3, #1
 800361e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 8003622:	f001 fbff 	bl	8004e24 <HAL_UART_RxCpltCallback>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 800362a:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800362c:	0609      	lsls	r1, r1, #24
 800362e:	d522      	bpl.n	8003676 <HAL_UART_IRQHandler+0x110>
 8003630:	0610      	lsls	r0, r2, #24
 8003632:	d520      	bpl.n	8003676 <HAL_UART_IRQHandler+0x110>
  tmp_state = huart->State;
 8003634:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8003638:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800363c:	2a12      	cmp	r2, #18
 800363e:	d11a      	bne.n	8003676 <HAL_UART_IRQHandler+0x110>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003640:	68a2      	ldr	r2, [r4, #8]
 8003642:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003646:	6a22      	ldr	r2, [r4, #32]
 8003648:	d14c      	bne.n	80036e4 <HAL_UART_IRQHandler+0x17e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800364a:	8811      	ldrh	r1, [r2, #0]
 800364c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003650:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003652:	6921      	ldr	r1, [r4, #16]
 8003654:	2900      	cmp	r1, #0
 8003656:	d143      	bne.n	80036e0 <HAL_UART_IRQHandler+0x17a>
        huart->pTxBuffPtr += 2;
 8003658:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1;
 800365a:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0)
 800365c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800365e:	3a01      	subs	r2, #1
 8003660:	b292      	uxth	r2, r2
 8003662:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003664:	b93a      	cbnz	r2, 8003676 <HAL_UART_IRQHandler+0x110>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800366c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003674:	60da      	str	r2, [r3, #12]
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8003676:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8003678:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800367a:	0649      	lsls	r1, r1, #25
 800367c:	d510      	bpl.n	80036a0 <HAL_UART_IRQHandler+0x13a>
 800367e:	0652      	lsls	r2, r2, #25
 8003680:	d50e      	bpl.n	80036a0 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003682:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003684:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800368a:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800368c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003690:	2b32      	cmp	r3, #50	; 0x32
    huart->State = HAL_UART_STATE_BUSY_RX;
 8003692:	bf0c      	ite	eq
 8003694:	2322      	moveq	r3, #34	; 0x22
    huart->State = HAL_UART_STATE_READY;
 8003696:	2301      	movne	r3, #1
 8003698:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800369c:	f7ff ff61 	bl	8003562 <HAL_UART_TxCpltCallback>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80036a2:	b15b      	cbz	r3, 80036bc <HAL_UART_IRQHandler+0x156>
    __HAL_UART_CLEAR_PEFLAG(huart);
 80036a4:	6823      	ldr	r3, [r4, #0]
    HAL_UART_ErrorCallback(huart);
 80036a6:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_PEFLAG(huart);
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	9201      	str	r2, [sp, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	9301      	str	r3, [sp, #4]
 80036b0:	9b01      	ldr	r3, [sp, #4]
    huart->State = HAL_UART_STATE_READY;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 80036b8:	f7ff ff54 	bl	8003564 <HAL_UART_ErrorCallback>
}
 80036bc:	b002      	add	sp, #8
 80036be:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	f823 2b01 	strh.w	r2, [r3], #1
 80036c6:	e78f      	b.n	80035e8 <HAL_UART_IRQHandler+0x82>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80036c8:	b921      	cbnz	r1, 80036d4 <HAL_UART_IRQHandler+0x16e>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036ca:	1c59      	adds	r1, r3, #1
 80036cc:	6852      	ldr	r2, [r2, #4]
 80036ce:	62a1      	str	r1, [r4, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036d0:	701a      	strb	r2, [r3, #0]
 80036d2:	e78a      	b.n	80035ea <HAL_UART_IRQHandler+0x84>
 80036d4:	6852      	ldr	r2, [r2, #4]
 80036d6:	1c59      	adds	r1, r3, #1
 80036d8:	62a1      	str	r1, [r4, #40]	; 0x28
 80036da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036de:	e7f7      	b.n	80036d0 <HAL_UART_IRQHandler+0x16a>
        huart->pTxBuffPtr += 1;
 80036e0:	3201      	adds	r2, #1
 80036e2:	e7ba      	b.n	800365a <HAL_UART_IRQHandler+0xf4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036e4:	1c51      	adds	r1, r2, #1
 80036e6:	6221      	str	r1, [r4, #32]
 80036e8:	7812      	ldrb	r2, [r2, #0]
 80036ea:	605a      	str	r2, [r3, #4]
 80036ec:	e7b6      	b.n	800365c <HAL_UART_IRQHandler+0xf6>
	...

080036f0 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80036f0:	b530      	push	{r4, r5, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 80036f2:	2400      	movs	r4, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80036f4:	481c      	ldr	r0, [pc, #112]	; (8003768 <MX_ADC_Init+0x78>)
 80036f6:	4b1d      	ldr	r3, [pc, #116]	; (800376c <MX_ADC_Init+0x7c>)
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
  hadc.Init.ContinuousConvMode = ENABLE;
 80036f8:	2501      	movs	r5, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80036fa:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80036fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003702:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003708:	6143      	str	r3, [r0, #20]
  hadc.Init.NbrOfConversion = 2;
 800370a:	2302      	movs	r3, #2
 800370c:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800370e:	2310      	movs	r3, #16
{
 8003710:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8003712:	9401      	str	r4, [sp, #4]
 8003714:	9402      	str	r4, [sp, #8]
 8003716:	9403      	str	r4, [sp, #12]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003718:	6084      	str	r4, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800371a:	60c4      	str	r4, [r0, #12]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 800371c:	6184      	str	r4, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800371e:	61c4      	str	r4, [r0, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8003720:	6204      	str	r4, [r0, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003722:	6245      	str	r5, [r0, #36]	; 0x24
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003724:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003726:	6343      	str	r3, [r0, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003728:	6384      	str	r4, [r0, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 800372a:	63c5      	str	r5, [r0, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800372c:	f7fd fcba 	bl	80010a4 <HAL_ADC_Init>
 8003730:	b108      	cbz	r0, 8003736 <MX_ADC_Init+0x46>
  {
    Error_Handler();
 8003732:	f001 fbcb 	bl	8004ecc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 8003736:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003738:	a901      	add	r1, sp, #4
 800373a:	480b      	ldr	r0, [pc, #44]	; (8003768 <MX_ADC_Init+0x78>)
  sConfig.Channel = ADC_CHANNEL_0;
 800373c:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800373e:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 8003740:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003742:	f7fd fdb3 	bl	80012ac <HAL_ADC_ConfigChannel>
 8003746:	b108      	cbz	r0, 800374c <MX_ADC_Init+0x5c>
  {
    Error_Handler();
 8003748:	f001 fbc0 	bl	8004ecc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800374c:	2301      	movs	r3, #1
 800374e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003750:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003752:	a901      	add	r1, sp, #4
 8003754:	4804      	ldr	r0, [pc, #16]	; (8003768 <MX_ADC_Init+0x78>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003756:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003758:	f7fd fda8 	bl	80012ac <HAL_ADC_ConfigChannel>
 800375c:	b108      	cbz	r0, 8003762 <MX_ADC_Init+0x72>
  {
    Error_Handler();
 800375e:	f001 fbb5 	bl	8004ecc <Error_Handler>
  }

}
 8003762:	b005      	add	sp, #20
 8003764:	bd30      	pop	{r4, r5, pc}
 8003766:	bf00      	nop
 8003768:	200000ec 	.word	0x200000ec
 800376c:	40012400 	.word	0x40012400

08003770 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003770:	b530      	push	{r4, r5, lr}
 8003772:	4605      	mov	r5, r0
 8003774:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003776:	2214      	movs	r2, #20
 8003778:	2100      	movs	r1, #0
 800377a:	a803      	add	r0, sp, #12
 800377c:	f001 fdaa 	bl	80052d4 <memset>
  if(adcHandle->Instance==ADC1)
 8003780:	682a      	ldr	r2, [r5, #0]
 8003782:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <HAL_ADC_MspInit+0x88>)
 8003784:	429a      	cmp	r2, r3
 8003786:	d134      	bne.n	80037f2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003788:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 800378c:	6a1a      	ldr	r2, [r3, #32]
    PA1     ------> ADC_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800378e:	481b      	ldr	r0, [pc, #108]	; (80037fc <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003794:	621a      	str	r2, [r3, #32]
 8003796:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003798:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC1_CLK_ENABLE();
 800379a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800379e:	9201      	str	r2, [sp, #4]
 80037a0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a2:	69da      	ldr	r2, [r3, #28]

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80037a4:	4c16      	ldr	r4, [pc, #88]	; (8003800 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	61da      	str	r2, [r3, #28]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	9302      	str	r3, [sp, #8]
 80037b4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037b6:	2303      	movs	r3, #3
 80037b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037ba:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037bc:	f7fe f856 	bl	800186c <HAL_GPIO_Init>
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80037c0:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 80037c2:	4b10      	ldr	r3, [pc, #64]	; (8003804 <HAL_ADC_MspInit+0x94>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80037c4:	60e2      	str	r2, [r4, #12]
    hdma_adc.Instance = DMA1_Channel1;
 80037c6:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037c8:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037cc:	2300      	movs	r3, #0
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037ce:	6122      	str	r2, [r4, #16]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037d0:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80037d2:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc.Init.Mode = DMA_NORMAL;
 80037d8:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 80037da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80037de:	4620      	mov	r0, r4
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037e0:	6162      	str	r2, [r4, #20]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 80037e2:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80037e4:	f7fd ff5e 	bl	80016a4 <HAL_DMA_Init>
 80037e8:	b108      	cbz	r0, 80037ee <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 80037ea:	f001 fb6f 	bl	8004ecc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80037ee:	646c      	str	r4, [r5, #68]	; 0x44
 80037f0:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80037f2:	b009      	add	sp, #36	; 0x24
 80037f4:	bd30      	pop	{r4, r5, pc}
 80037f6:	bf00      	nop
 80037f8:	40012400 	.word	0x40012400
 80037fc:	40020000 	.word	0x40020000
 8003800:	200000a8 	.word	0x200000a8
 8003804:	40026008 	.word	0x40026008

08003808 <BH1750_SetMtreg.part.0>:
		return BH1750_OK;

	return BH1750_ERROR;
}

BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
 8003808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	if(Mtreg <= 32 || Mtreg > 254) return BH1750_ERROR;

	Bh1750_Mtreg = Mtreg;
 800380a:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <BH1750_SetMtreg.part.0+0x3c>)
	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
	tmp[1] = (0x60 | (Mtreg & 0x1F));

	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 800380c:	aa03      	add	r2, sp, #12
	Bh1750_Mtreg = Mtreg;
 800380e:	7018      	strb	r0, [r3, #0]
	tmp[0] = (0x40 | (Mtreg >> 5));
 8003810:	0943      	lsrs	r3, r0, #5
 8003812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003816:	f88d 300c 	strb.w	r3, [sp, #12]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 800381a:	230a      	movs	r3, #10
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 800381c:	f000 001f 	and.w	r0, r0, #31
 8003820:	f040 0060 	orr.w	r0, r0, #96	; 0x60
 8003824:	f88d 000d 	strb.w	r0, [sp, #13]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 8003828:	4807      	ldr	r0, [pc, #28]	; (8003848 <BH1750_SetMtreg.part.0+0x40>)
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2146      	movs	r1, #70	; 0x46
 800382e:	2302      	movs	r3, #2
 8003830:	6800      	ldr	r0, [r0, #0]
 8003832:	f7fe fa6d 	bl	8001d10 <HAL_I2C_Master_Transmit>
		return BH1750_OK;

	return BH1750_ERROR;
}
 8003836:	3000      	adds	r0, #0
 8003838:	bf18      	it	ne
 800383a:	2001      	movne	r0, #1
 800383c:	b005      	add	sp, #20
 800383e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003842:	bf00      	nop
 8003844:	20000148 	.word	0x20000148
 8003848:	20000144 	.word	0x20000144

0800384c <BH1750_Reset>:
{
 800384c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t tmp = 0x07;
 800384e:	2307      	movs	r3, #7
 8003850:	aa04      	add	r2, sp, #16
 8003852:	f802 3d01 	strb.w	r3, [r2, #-1]!
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8003856:	230a      	movs	r3, #10
 8003858:	4806      	ldr	r0, [pc, #24]	; (8003874 <BH1750_Reset+0x28>)
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	2146      	movs	r1, #70	; 0x46
 800385e:	2301      	movs	r3, #1
 8003860:	6800      	ldr	r0, [r0, #0]
 8003862:	f7fe fa55 	bl	8001d10 <HAL_I2C_Master_Transmit>
}
 8003866:	3000      	adds	r0, #0
 8003868:	bf18      	it	ne
 800386a:	2001      	movne	r0, #1
 800386c:	b005      	add	sp, #20
 800386e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003872:	bf00      	nop
 8003874:	20000144 	.word	0x20000144

08003878 <BH1750_Init>:
{
 8003878:	b508      	push	{r3, lr}
	bh1750_i2c = hi2c;
 800387a:	4b07      	ldr	r3, [pc, #28]	; (8003898 <BH1750_Init+0x20>)
 800387c:	6018      	str	r0, [r3, #0]
	if(BH1750_OK == BH1750_Reset())
 800387e:	f7ff ffe5 	bl	800384c <BH1750_Reset>
 8003882:	b930      	cbnz	r0, 8003892 <BH1750_Init+0x1a>
 8003884:	2045      	movs	r0, #69	; 0x45
 8003886:	f7ff ffbf 	bl	8003808 <BH1750_SetMtreg.part.0>
			return BH1750_OK;
 800388a:	3000      	adds	r0, #0
 800388c:	bf18      	it	ne
 800388e:	2001      	movne	r0, #1
 8003890:	bd08      	pop	{r3, pc}
	return BH1750_ERROR;
 8003892:	2001      	movs	r0, #1
}
 8003894:	bd08      	pop	{r3, pc}
 8003896:	bf00      	nop
 8003898:	20000144 	.word	0x20000144

0800389c <BH1750_PowerState>:
{
 800389c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	PowerOn = (PowerOn? 1:0);
 800389e:	3000      	adds	r0, #0
 80038a0:	bf18      	it	ne
 80038a2:	2001      	movne	r0, #1
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &PowerOn, 1, 10))
 80038a4:	230a      	movs	r3, #10
	PowerOn = (PowerOn? 1:0);
 80038a6:	aa04      	add	r2, sp, #16
 80038a8:	f802 0d01 	strb.w	r0, [r2, #-1]!
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &PowerOn, 1, 10))
 80038ac:	4806      	ldr	r0, [pc, #24]	; (80038c8 <BH1750_PowerState+0x2c>)
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	2146      	movs	r1, #70	; 0x46
 80038b2:	2301      	movs	r3, #1
 80038b4:	6800      	ldr	r0, [r0, #0]
 80038b6:	f7fe fa2b 	bl	8001d10 <HAL_I2C_Master_Transmit>
}
 80038ba:	3000      	adds	r0, #0
 80038bc:	bf18      	it	ne
 80038be:	2001      	movne	r0, #1
 80038c0:	b005      	add	sp, #20
 80038c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80038c6:	bf00      	nop
 80038c8:	20000144 	.word	0x20000144

080038cc <BH1750_SetMode>:
{
 80038cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 80038ce:	0903      	lsrs	r3, r0, #4
{
 80038d0:	f88d 000f 	strb.w	r0, [sp, #15]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 80038d4:	d015      	beq.n	8003902 <BH1750_SetMode+0x36>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 80038d6:	f000 030f 	and.w	r3, r0, #15
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d811      	bhi.n	8003902 <BH1750_SetMode+0x36>
	Bh1750_Mode = Mode;
 80038de:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <BH1750_SetMode+0x3c>)
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 80038e0:	f10d 020f 	add.w	r2, sp, #15
	Bh1750_Mode = Mode;
 80038e4:	7018      	strb	r0, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 80038e6:	230a      	movs	r3, #10
 80038e8:	4808      	ldr	r0, [pc, #32]	; (800390c <BH1750_SetMode+0x40>)
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	2146      	movs	r1, #70	; 0x46
 80038ee:	2301      	movs	r3, #1
 80038f0:	6800      	ldr	r0, [r0, #0]
 80038f2:	f7fe fa0d 	bl	8001d10 <HAL_I2C_Master_Transmit>
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 80038f6:	3000      	adds	r0, #0
 80038f8:	bf18      	it	ne
 80038fa:	2001      	movne	r0, #1
}
 80038fc:	b005      	add	sp, #20
 80038fe:	f85d fb04 	ldr.w	pc, [sp], #4
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8003902:	2001      	movs	r0, #1
 8003904:	e7fa      	b.n	80038fc <BH1750_SetMode+0x30>
 8003906:	bf00      	nop
 8003908:	20000140 	.word	0x20000140
 800390c:	20000144 	.word	0x20000144

08003910 <BH1750_ReadLight>:
BH1750_STATUS BH1750_ReadLight(float *Result)
{
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 8003910:	230a      	movs	r3, #10
{
 8003912:	b530      	push	{r4, r5, lr}
 8003914:	4605      	mov	r5, r0
 8003916:	b085      	sub	sp, #20
	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 8003918:	481a      	ldr	r0, [pc, #104]	; (8003984 <BH1750_ReadLight+0x74>)
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	aa03      	add	r2, sp, #12
 800391e:	2302      	movs	r3, #2
 8003920:	2146      	movs	r1, #70	; 0x46
 8003922:	6800      	ldr	r0, [r0, #0]
 8003924:	f7fe faca 	bl	8001ebc <HAL_I2C_Master_Receive>
 8003928:	bb48      	cbnz	r0, 800397e <BH1750_ReadLight+0x6e>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 800392a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800392e:	ba40      	rev16	r0, r0
 8003930:	b280      	uxth	r0, r0
 8003932:	f7fd f9b1 	bl	8000c98 <__aeabi_i2f>

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8003936:	4b14      	ldr	r3, [pc, #80]	; (8003988 <BH1750_ReadLight+0x78>)
		result = (tmp[0] << 8) | (tmp[1]);
 8003938:	4604      	mov	r4, r0
		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 800393a:	7818      	ldrb	r0, [r3, #0]
 800393c:	2845      	cmp	r0, #69	; 0x45
 800393e:	d00a      	beq.n	8003956 <BH1750_ReadLight+0x46>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 8003940:	f7fd f9a6 	bl	8000c90 <__aeabi_ui2f>
 8003944:	4601      	mov	r1, r0
 8003946:	4811      	ldr	r0, [pc, #68]	; (800398c <BH1750_ReadLight+0x7c>)
 8003948:	f7fd faae 	bl	8000ea8 <__aeabi_fdiv>
 800394c:	4601      	mov	r1, r0
 800394e:	4620      	mov	r0, r4
 8003950:	f7fd f9f6 	bl	8000d40 <__aeabi_fmul>
 8003954:	4604      	mov	r4, r0
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 8003956:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <BH1750_ReadLight+0x80>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b21      	cmp	r3, #33	; 0x21
 800395c:	d001      	beq.n	8003962 <BH1750_ReadLight+0x52>
 800395e:	2b11      	cmp	r3, #17
 8003960:	d105      	bne.n	800396e <BH1750_ReadLight+0x5e>
		{
			result /= 2.0;
 8003962:	4620      	mov	r0, r4
 8003964:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003968:	f7fd f9ea 	bl	8000d40 <__aeabi_fmul>
 800396c:	4604      	mov	r4, r0
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 800396e:	4909      	ldr	r1, [pc, #36]	; (8003994 <BH1750_ReadLight+0x84>)
 8003970:	4620      	mov	r0, r4
 8003972:	f7fd fa99 	bl	8000ea8 <__aeabi_fdiv>
 8003976:	6028      	str	r0, [r5, #0]
		return BH1750_OK;
 8003978:	2000      	movs	r0, #0
	}
	return BH1750_ERROR;
}
 800397a:	b005      	add	sp, #20
 800397c:	bd30      	pop	{r4, r5, pc}
	return BH1750_ERROR;
 800397e:	2001      	movs	r0, #1
 8003980:	e7fb      	b.n	800397a <BH1750_ReadLight+0x6a>
 8003982:	bf00      	nop
 8003984:	20000144 	.word	0x20000144
 8003988:	20000148 	.word	0x20000148
 800398c:	428a0000 	.word	0x428a0000
 8003990:	20000140 	.word	0x20000140
 8003994:	3f99999a 	.word	0x3f99999a

08003998 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <MX_DMA_Init+0x2c>)
{
 800399a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800399c:	69da      	ldr	r2, [r3, #28]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800399e:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039a0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80039a4:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80039a6:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039a8:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80039aa:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80039b4:	f7fd fe20 	bl	80015f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80039b8:	200b      	movs	r0, #11
 80039ba:	f7fd fe51 	bl	8001660 <HAL_NVIC_EnableIRQ>

}
 80039be:	b003      	add	sp, #12
 80039c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80039c4:	40023800 	.word	0x40023800

080039c8 <filter_sred>:

#include "filter_sred.h"

unsigned short int	filter_sred(unsigned short int ADC_val, unsigned short int* buf, FILTER_REG* filter_reg){
	if (filter_reg->Reg.Flag){
 80039c8:	7813      	ldrb	r3, [r2, #0]
unsigned short int	filter_sred(unsigned short int ADC_val, unsigned short int* buf, FILTER_REG* filter_reg){
 80039ca:	b530      	push	{r4, r5, lr}
	if (filter_reg->Reg.Flag){
 80039cc:	f013 0401 	ands.w	r4, r3, #1
 80039d0:	6813      	ldr	r3, [r2, #0]
 80039d2:	d01d      	beq.n	8003a10 <filter_sred+0x48>
		filter_reg->Reg.Filter_sum-=buf[filter_reg->Reg.Index];
 80039d4:	8814      	ldrh	r4, [r2, #0]
 80039d6:	f3c4 0447 	ubfx	r4, r4, #1, #8
 80039da:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80039de:	ebc5 2553 	rsb	r5, r5, r3, lsr #9
		filter_reg->Reg.Filter_sum+=ADC_val;
 80039e2:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80039e6:	4405      	add	r5, r0
 80039e8:	f365 235f 	bfi	r3, r5, #9, #23
 80039ec:	6013      	str	r3, [r2, #0]
		buf[filter_reg->Reg.Index]=ADC_val;
 80039ee:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
		if (filter_reg->Reg.Index>=COUNT_FILTER-1){
 80039f2:	8813      	ldrh	r3, [r2, #0]
 80039f4:	f403 71ff 	and.w	r1, r3, #510	; 0x1fe
 80039f8:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
			filter_reg->Reg.Index=0;
		}
		else{
			filter_reg->Reg.Index++;
 80039fc:	bf16      	itet	ne
 80039fe:	3401      	addne	r4, #1
			filter_reg->Reg.Index=0;
 8003a00:	f36f 0348 	bfceq	r3, #1, #8
			filter_reg->Reg.Index++;
 8003a04:	f364 0348 	bfine	r3, r4, #1, #8
 8003a08:	8013      	strh	r3, [r2, #0]
		}
		else{
			filter_reg->Reg.Index++;
		}
	}
	return (filter_reg->Reg.Filter_sum/COUNT_FILTER);
 8003a0a:	6810      	ldr	r0, [r2, #0]
}
 8003a0c:	0c40      	lsrs	r0, r0, #17
 8003a0e:	bd30      	pop	{r4, r5, pc}
		filter_reg->Reg.Filter_sum+=ADC_val;
 8003a10:	eb00 2553 	add.w	r5, r0, r3, lsr #9
 8003a14:	f365 235f 	bfi	r3, r5, #9, #23
 8003a18:	6013      	str	r3, [r2, #0]
		buf[filter_reg->Reg.Index]=ADC_val;
 8003a1a:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8003a1e:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
		if (filter_reg->Reg.Index>=COUNT_FILTER-1){
 8003a22:	8811      	ldrh	r1, [r2, #0]
 8003a24:	f401 70ff 	and.w	r0, r1, #510	; 0x1fe
 8003a28:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
			filter_reg->Reg.Index=0;
 8003a2c:	bf05      	ittet	eq
 8003a2e:	f364 0148 	bfieq	r1, r4, #1, #8
 8003a32:	8011      	strheq	r1, [r2, #0]
			filter_reg->Reg.Index++;
 8003a34:	3301      	addne	r3, #1
			filter_reg->Reg.Flag=1;
 8003a36:	b2c9      	uxtbeq	r1, r1
 8003a38:	bf0b      	itete	eq
 8003a3a:	f041 0101 	orreq.w	r1, r1, #1
			filter_reg->Reg.Index++;
 8003a3e:	f363 0148 	bfine	r1, r3, #1, #8
			filter_reg->Reg.Flag=1;
 8003a42:	7011      	strbeq	r1, [r2, #0]
			filter_reg->Reg.Index++;
 8003a44:	8011      	strhne	r1, [r2, #0]
 8003a46:	e7e0      	b.n	8003a0a <filter_sred+0x42>

08003a48 <MX_GPIO_Init>:
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a48:	2214      	movs	r2, #20
{
 8003a4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a50:	eb0d 0002 	add.w	r0, sp, r2
 8003a54:	2100      	movs	r1, #0
 8003a56:	f001 fc3d 	bl	80052d4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a5a:	4b53      	ldr	r3, [pc, #332]	; (8003ba8 <MX_GPIO_Init+0x160>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ESTOP_2_0_Pin|ESTOP_2_1_Pin|MOTOR_3_EN_Pin|MOTOR_2_D_Pin 
 8003a5c:	4f53      	ldr	r7, [pc, #332]	; (8003bac <MX_GPIO_Init+0x164>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a5e:	69da      	ldr	r2, [r3, #28]
                          |MOTOR_2_EN_Pin|SIM_SLP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_1_EN_Pin|MOTOR_1_D_Pin|MOTOR_0_EN_Pin|MOTOR_0_D_Pin 
 8003a60:	4e53      	ldr	r6, [pc, #332]	; (8003bb0 <MX_GPIO_Init+0x168>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a62:	f042 0204 	orr.w	r2, r2, #4
 8003a66:	61da      	str	r2, [r3, #28]
 8003a68:	69da      	ldr	r2, [r3, #28]
                          |MOTOR_3_D_Pin|MOTOR_4_D_Pin|MOTOR_4_EN_Pin|SIM_PWR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, KEY_3V_BUS_Pin|ESTOP_3_0_Pin|ESTOP_3_1_Pin|BAT_KEY_2_Pin 
 8003a6a:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8003bb4 <MX_GPIO_Init+0x16c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a6e:	f002 0204 	and.w	r2, r2, #4
 8003a72:	9200      	str	r2, [sp, #0]
 8003a74:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a76:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOC, ESTOP_2_0_Pin|ESTOP_2_1_Pin|MOTOR_3_EN_Pin|MOTOR_2_D_Pin 
 8003a78:	4638      	mov	r0, r7
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a7a:	f042 0220 	orr.w	r2, r2, #32
 8003a7e:	61da      	str	r2, [r3, #28]
 8003a80:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOC, ESTOP_2_0_Pin|ESTOP_2_1_Pin|MOTOR_3_EN_Pin|MOTOR_2_D_Pin 
 8003a82:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a86:	f002 0220 	and.w	r2, r2, #32
 8003a8a:	9201      	str	r2, [sp, #4]
 8003a8c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8e:	69da      	ldr	r2, [r3, #28]
                          |BAT_KEY_1_Pin|MOTOR_5_D_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_5_EN_GPIO_Port, MOTOR_5_EN_Pin, GPIO_PIN_RESET);
 8003a90:	f8df a124 	ldr.w	sl, [pc, #292]	; 8003bb8 <MX_GPIO_Init+0x170>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a94:	f042 0201 	orr.w	r2, r2, #1
 8003a98:	61da      	str	r2, [r3, #28]
 8003a9a:	69da      	ldr	r2, [r3, #28]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9e:	f002 0201 	and.w	r2, r2, #1
 8003aa2:	9202      	str	r2, [sp, #8]
 8003aa4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aa6:	69da      	ldr	r2, [r3, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ESTOP_0_0_Pin|ESTOP_0_1_Pin|ESTOP_1_0_Pin|ESTOP_1_1_Pin;
 8003aa8:	f04f 09f0 	mov.w	r9, #240	; 0xf0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aac:	f042 0202 	orr.w	r2, r2, #2
 8003ab0:	61da      	str	r2, [r3, #28]
 8003ab2:	69da      	ldr	r2, [r3, #28]

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin */
  GPIO_InitStruct.Pin = ESTOP_2_0_Pin|ESTOP_2_1_Pin|MOTOR_3_EN_Pin|MOTOR_2_D_Pin 
                          |MOTOR_2_EN_Pin|SIM_SLP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ab4:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab6:	f002 0202 	and.w	r2, r2, #2
 8003aba:	9203      	str	r2, [sp, #12]
 8003abc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003abe:	69da      	ldr	r2, [r3, #28]
 8003ac0:	f042 0208 	orr.w	r2, r2, #8
 8003ac4:	61da      	str	r2, [r3, #28]
 8003ac6:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(GPIOC, ESTOP_2_0_Pin|ESTOP_2_1_Pin|MOTOR_3_EN_Pin|MOTOR_2_D_Pin 
 8003ac8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	9304      	str	r3, [sp, #16]
 8003ad0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, ESTOP_2_0_Pin|ESTOP_2_1_Pin|MOTOR_3_EN_Pin|MOTOR_2_D_Pin 
 8003ad2:	f7fd ff8d 	bl	80019f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MOTOR_1_EN_Pin|MOTOR_1_D_Pin|MOTOR_0_EN_Pin|MOTOR_0_D_Pin 
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f24f 4107 	movw	r1, #62471	; 0xf407
 8003ade:	f7fd ff87 	bl	80019f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, KEY_3V_BUS_Pin|ESTOP_3_0_Pin|ESTOP_3_1_Pin|BAT_KEY_2_Pin 
 8003ae2:	4640      	mov	r0, r8
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 8003aea:	f7fd ff81 	bl	80019f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOTOR_5_EN_GPIO_Port, MOTOR_5_EN_Pin, GPIO_PIN_RESET);
 8003aee:	2200      	movs	r2, #0
 8003af0:	4650      	mov	r0, sl
 8003af2:	2104      	movs	r1, #4
 8003af4:	f7fd ff7c 	bl	80019f0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003afc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003afe:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b00:	a905      	add	r1, sp, #20
 8003b02:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b04:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b06:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b08:	f7fd feb0 	bl	800186c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_7_Pin|BUTTON_4_Pin|BUTTON_5_Pin 
 8003b0c:	f641 030f 	movw	r3, #6159	; 0x180f
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b10:	a905      	add	r1, sp, #20
 8003b12:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_7_Pin|BUTTON_4_Pin|BUTTON_5_Pin 
 8003b14:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b16:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b18:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b1a:	f7fd fea7 	bl	800186c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b1e:	a905      	add	r1, sp, #20
 8003b20:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = ESTOP_0_0_Pin|ESTOP_0_1_Pin|ESTOP_1_0_Pin|ESTOP_1_1_Pin;
 8003b22:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b26:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b28:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b2a:	f7fd fe9f 	bl	800186c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ESTOP_2_0_Pin|ESTOP_2_1_Pin|MOTOR_3_EN_Pin|MOTOR_2_D_Pin 
 8003b2e:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b32:	a905      	add	r1, sp, #20
 8003b34:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = ESTOP_2_0_Pin|ESTOP_2_1_Pin|MOTOR_3_EN_Pin|MOTOR_2_D_Pin 
 8003b36:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b38:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b3e:	f7fd fe95 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_1_EN_Pin|MOTOR_1_D_Pin|MOTOR_3_D_Pin|MOTOR_4_D_Pin 
 8003b42:	f24f 0303 	movw	r3, #61443	; 0xf003
                          |MOTOR_4_EN_Pin|SIM_PWR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b46:	a905      	add	r1, sp, #20
 8003b48:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = MOTOR_1_EN_Pin|MOTOR_1_D_Pin|MOTOR_3_D_Pin|MOTOR_4_D_Pin 
 8003b4a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b4c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b50:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b52:	f7fd fe8b 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_0_EN_Pin|MOTOR_0_D_Pin;
 8003b56:	f240 4304 	movw	r3, #1028	; 0x404
 8003b5a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b5c:	2302      	movs	r3, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b5e:	a905      	add	r1, sp, #20
 8003b60:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b62:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b64:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b66:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b68:	f7fd fe80 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = KEY_3V_BUS_Pin|ESTOP_3_0_Pin|ESTOP_3_1_Pin|BAT_KEY_2_Pin 
 8003b6c:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
                          |BAT_KEY_1_Pin|MOTOR_5_D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b70:	a905      	add	r1, sp, #20
 8003b72:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = KEY_3V_BUS_Pin|ESTOP_3_0_Pin|ESTOP_3_1_Pin|BAT_KEY_2_Pin 
 8003b74:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b76:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b78:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b7c:	f7fd fe76 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_5_EN_Pin;
 8003b80:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MOTOR_5_EN_GPIO_Port, &GPIO_InitStruct);
 8003b82:	a905      	add	r1, sp, #20
 8003b84:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = MOTOR_5_EN_Pin;
 8003b86:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b88:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(MOTOR_5_EN_GPIO_Port, &GPIO_InitStruct);
 8003b8e:	f7fd fe6d 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_2_Pin|BUTTON_0_Pin|BUTTON_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b92:	a905      	add	r1, sp, #20
 8003b94:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_2_Pin|BUTTON_0_Pin|BUTTON_1_Pin;
 8003b96:	f8cd 9014 	str.w	r9, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b9a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b9e:	f7fd fe65 	bl	800186c <HAL_GPIO_Init>

}
 8003ba2:	b00a      	add	sp, #40	; 0x28
 8003ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	40020800 	.word	0x40020800
 8003bb0:	40020400 	.word	0x40020400
 8003bb4:	40020000 	.word	0x40020000
 8003bb8:	40020c00 	.word	0x40020c00

08003bbc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003bbc:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8003bbe:	480c      	ldr	r0, [pc, #48]	; (8003bf0 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <MX_I2C1_Init+0x38>)
 8003bc2:	f8df e034 	ldr.w	lr, [pc, #52]	; 8003bf8 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 8003bca:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003bce:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bd0:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003bd2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003bd4:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bd6:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003bd8:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bda:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bdc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003bde:	f7fe f809 	bl	8001bf4 <HAL_I2C_Init>
 8003be2:	b118      	cbz	r0, 8003bec <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8003be4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003be8:	f001 b970 	b.w	8004ecc <Error_Handler>
 8003bec:	bd08      	pop	{r3, pc}
 8003bee:	bf00      	nop
 8003bf0:	2000014c 	.word	0x2000014c
 8003bf4:	40005400 	.word	0x40005400
 8003bf8:	00061a80 	.word	0x00061a80

08003bfc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003bfc:	b510      	push	{r4, lr}
 8003bfe:	4604      	mov	r4, r0
 8003c00:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c02:	2214      	movs	r2, #20
 8003c04:	2100      	movs	r1, #0
 8003c06:	a803      	add	r0, sp, #12
 8003c08:	f001 fb64 	bl	80052d4 <memset>
  if(i2cHandle->Instance==I2C1)
 8003c0c:	6822      	ldr	r2, [r4, #0]
 8003c0e:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <HAL_I2C_MspInit+0x60>)
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d121      	bne.n	8003c58 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c14:	4c12      	ldr	r4, [pc, #72]	; (8003c60 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c16:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c18:	69e3      	ldr	r3, [r4, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c1a:	4812      	ldr	r0, [pc, #72]	; (8003c64 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c1c:	f043 0302 	orr.w	r3, r3, #2
 8003c20:	61e3      	str	r3, [r4, #28]
 8003c22:	69e3      	ldr	r3, [r4, #28]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c30:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c32:	2312      	movs	r3, #18
 8003c34:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c36:	2301      	movs	r3, #1
 8003c38:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c3e:	2304      	movs	r3, #4
 8003c40:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c42:	f7fd fe13 	bl	800186c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c4c:	6263      	str	r3, [r4, #36]	; 0x24
 8003c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c54:	9302      	str	r3, [sp, #8]
 8003c56:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003c58:	b008      	add	sp, #32
 8003c5a:	bd10      	pop	{r4, pc}
 8003c5c:	40005400 	.word	0x40005400
 8003c60:	40023800 	.word	0x40023800
 8003c64:	40020400 	.word	0x40020400

08003c68 <getDateTime>:
	memset(_buffer, 0, sizeof(uint8_t) * size);
	return _buffer;
}

void getDateTime()
{
 8003c68:	b510      	push	{r4, lr}
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8003c6a:	4c15      	ldr	r4, [pc, #84]	; (8003cc0 <getDateTime+0x58>)
{
 8003c6c:	b086      	sub	sp, #24
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8003c6e:	a901      	add	r1, sp, #4
 8003c70:	2200      	movs	r2, #0
 8003c72:	4620      	mov	r0, r4
 8003c74:	f7ff fa24 	bl	80030c0 <HAL_RTC_GetTime>

	c_hour = time.Hours;
 8003c78:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003c7c:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <getDateTime+0x5c>)
	c_min = time.Minutes;
	c_sec = time.Seconds;

	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003c7e:	4669      	mov	r1, sp
	c_hour = time.Hours;
 8003c80:	701a      	strb	r2, [r3, #0]
	c_min = time.Minutes;
 8003c82:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <getDateTime+0x60>)
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003c88:	4620      	mov	r0, r4
	c_min = time.Minutes;
 8003c8a:	701a      	strb	r2, [r3, #0]
	c_sec = time.Seconds;
 8003c8c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8003c90:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <getDateTime+0x64>)
 8003c92:	701a      	strb	r2, [r3, #0]
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003c94:	2200      	movs	r2, #0
 8003c96:	f7ff f9f3 	bl	8003080 <HAL_RTC_GetDate>

	c_dow = date.WeekDay;
 8003c9a:	f89d 2000 	ldrb.w	r2, [sp]
 8003c9e:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <getDateTime+0x68>)
 8003ca0:	701a      	strb	r2, [r3, #0]
	c_year = date.Year;
 8003ca2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <getDateTime+0x6c>)
 8003ca8:	701a      	strb	r2, [r3, #0]
	c_month = date.Month;
 8003caa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8003cae:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <getDateTime+0x70>)
 8003cb0:	701a      	strb	r2, [r3, #0]
	c_day =  date.Date;
 8003cb2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8003cb6:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <getDateTime+0x74>)
 8003cb8:	701a      	strb	r2, [r3, #0]
}
 8003cba:	b006      	add	sp, #24
 8003cbc:	bd10      	pop	{r4, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20000700 	.word	0x20000700
 8003cc4:	200006c9 	.word	0x200006c9
 8003cc8:	200003d5 	.word	0x200003d5
 8003ccc:	200006f5 	.word	0x200006f5
 8003cd0:	200006de 	.word	0x200006de
 8003cd4:	200003b5 	.word	0x200003b5
 8003cd8:	200003b7 	.word	0x200003b7
 8003cdc:	200001ac 	.word	0x200001ac

08003ce0 <RTC_Set>:

_Bool RTC_Set(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec, uint8_t dow)
{
 8003ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ce2:	4607      	mov	r7, r0
 8003ce4:	460e      	mov	r6, r1
 8003ce6:	4615      	mov	r5, r2
 8003ce8:	b087      	sub	sp, #28
    HAL_StatusTypeDef res;
    RTC_TimeTypeDef time;
    RTC_DateTypeDef date;

    memset(&time, 0, sizeof(time));
 8003cea:	2214      	movs	r2, #20
 8003cec:	2100      	movs	r1, #0
 8003cee:	a801      	add	r0, sp, #4
{
 8003cf0:	461c      	mov	r4, r3
    memset(&time, 0, sizeof(time));
 8003cf2:	f001 faef 	bl	80052d4 <memset>
    memset(&date, 0, sizeof(date));

    date.WeekDay = dow;
 8003cf6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    date.Year = year;
    date.Month = month;
    date.Date = day;

    res = HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	4669      	mov	r1, sp
 8003cfe:	4811      	ldr	r0, [pc, #68]	; (8003d44 <RTC_Set+0x64>)
    date.WeekDay = dow;
 8003d00:	f88d 3000 	strb.w	r3, [sp]
    date.Year = year;
 8003d04:	f88d 7003 	strb.w	r7, [sp, #3]
    date.Month = month;
 8003d08:	f88d 6001 	strb.w	r6, [sp, #1]
    date.Date = day;
 8003d0c:	f88d 5002 	strb.w	r5, [sp, #2]
    res = HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003d10:	f7ff f955 	bl	8002fbe <HAL_RTC_SetDate>
    if(res != HAL_OK) {
 8003d14:	4602      	mov	r2, r0
 8003d16:	b990      	cbnz	r0, 8003d3e <RTC_Set+0x5e>
        return 1;
    }

    time.Hours = hour;
    time.Minutes = min;
 8003d18:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    time.Seconds = sec;

    res = HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8003d1c:	a901      	add	r1, sp, #4
    time.Minutes = min;
 8003d1e:	f88d 3005 	strb.w	r3, [sp, #5]
    time.Seconds = sec;
 8003d22:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    res = HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8003d26:	4807      	ldr	r0, [pc, #28]	; (8003d44 <RTC_Set+0x64>)
    time.Hours = hour;
 8003d28:	f88d 4004 	strb.w	r4, [sp, #4]
    time.Seconds = sec;
 8003d2c:	f88d 3006 	strb.w	r3, [sp, #6]
    res = HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8003d30:	f7ff f8dd 	bl	8002eee <HAL_RTC_SetTime>
    if(res != HAL_OK) {
 8003d34:	3000      	adds	r0, #0
 8003d36:	bf18      	it	ne
 8003d38:	2001      	movne	r0, #1
        return 1;
    }
    return 0;
}
 8003d3a:	b007      	add	sp, #28
 8003d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return 1;
 8003d3e:	2001      	movs	r0, #1
 8003d40:	e7fb      	b.n	8003d3a <RTC_Set+0x5a>
 8003d42:	bf00      	nop
 8003d44:	20000700 	.word	0x20000700

08003d48 <batKey1Handler>:

void batKey1Handler()
{
	if(batKey1State == 1){
 8003d48:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <batKey1Handler+0x14>)
 8003d4a:	781a      	ldrb	r2, [r3, #0]
 8003d4c:	b102      	cbz	r2, 8003d50 <batKey1Handler+0x8>
		HAL_GPIO_WritePin(GPIOA, BAT_KEY_1_Pin, GPIO_PIN_SET);
 8003d4e:	2201      	movs	r2, #1
	} else if (batKey1State == 0) {
		HAL_GPIO_WritePin(GPIOA, BAT_KEY_1_Pin, GPIO_PIN_RESET);
 8003d50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d54:	4802      	ldr	r0, [pc, #8]	; (8003d60 <batKey1Handler+0x18>)
 8003d56:	f7fd be4b 	b.w	80019f0 <HAL_GPIO_WritePin>
 8003d5a:	bf00      	nop
 8003d5c:	200006ce 	.word	0x200006ce
 8003d60:	40020000 	.word	0x40020000

08003d64 <batKey2Handler>:
	}
}

void batKey2Handler()
{
	if(batKey2State == 1){
 8003d64:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <batKey2Handler+0x14>)
 8003d66:	781a      	ldrb	r2, [r3, #0]
 8003d68:	b102      	cbz	r2, 8003d6c <batKey2Handler+0x8>
		HAL_GPIO_WritePin(GPIOA, BAT_KEY_2_Pin, GPIO_PIN_SET);
 8003d6a:	2201      	movs	r2, #1
	} else if (batKey2State == 0) {
		HAL_GPIO_WritePin(GPIOA, BAT_KEY_2_Pin, GPIO_PIN_RESET);
 8003d6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d70:	4802      	ldr	r0, [pc, #8]	; (8003d7c <batKey2Handler+0x18>)
 8003d72:	f7fd be3d 	b.w	80019f0 <HAL_GPIO_WritePin>
 8003d76:	bf00      	nop
 8003d78:	200003b8 	.word	0x200003b8
 8003d7c:	40020000 	.word	0x40020000

08003d80 <key3VBusHandler>:
	}
}

void key3VBusHandler()
{
	if(key3VBusState == 1){
 8003d80:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <key3VBusHandler+0x14>)
 8003d82:	781a      	ldrb	r2, [r3, #0]
 8003d84:	b102      	cbz	r2, 8003d88 <key3VBusHandler+0x8>
		HAL_GPIO_WritePin(GPIOA, KEY_3V_BUS_Pin, GPIO_PIN_SET);
 8003d86:	2201      	movs	r2, #1
	} else if (key3VBusState == 0) {
		HAL_GPIO_WritePin(GPIOA, KEY_3V_BUS_Pin, GPIO_PIN_RESET);
 8003d88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d8c:	4802      	ldr	r0, [pc, #8]	; (8003d98 <key3VBusHandler+0x18>)
 8003d8e:	f7fd be2f 	b.w	80019f0 <HAL_GPIO_WritePin>
 8003d92:	bf00      	nop
 8003d94:	200003d4 	.word	0x200003d4
 8003d98:	40020000 	.word	0x40020000

08003d9c <adcRead>:
	}
}

void adcRead()
{
 8003d9c:	b570      	push	{r4, r5, r6, lr}
	HAL_ADC_Stop_DMA(&hadc);
 8003d9e:	4d0f      	ldr	r5, [pc, #60]	; (8003ddc <adcRead+0x40>)

	ADC11 = ADC_value[0];
 8003da0:	4c0f      	ldr	r4, [pc, #60]	; (8003de0 <adcRead+0x44>)
	HAL_ADC_Stop_DMA(&hadc);
 8003da2:	4628      	mov	r0, r5
 8003da4:	f7fd fbea 	bl	800157c <HAL_ADC_Stop_DMA>
	ADC11 = ADC_value[0];
 8003da8:	8820      	ldrh	r0, [r4, #0]
 8003daa:	4b0e      	ldr	r3, [pc, #56]	; (8003de4 <adcRead+0x48>)
	ADC12 = ADC_value[1];
 8003dac:	4e0e      	ldr	r6, [pc, #56]	; (8003de8 <adcRead+0x4c>)
	ADC11 = ADC_value[0];
 8003dae:	8018      	strh	r0, [r3, #0]
	ADC12 = ADC_value[1];
 8003db0:	8863      	ldrh	r3, [r4, #2]

	filter_11 = filter_sred(ADC11, buf_11, &F11);
 8003db2:	4a0e      	ldr	r2, [pc, #56]	; (8003dec <adcRead+0x50>)
 8003db4:	490e      	ldr	r1, [pc, #56]	; (8003df0 <adcRead+0x54>)
	ADC12 = ADC_value[1];
 8003db6:	8033      	strh	r3, [r6, #0]
	filter_11 = filter_sred(ADC11, buf_11, &F11);
 8003db8:	f7ff fe06 	bl	80039c8 <filter_sred>
 8003dbc:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <adcRead+0x58>)
	filter_12 = filter_sred(ADC12, buf_12, &F12);
 8003dbe:	4a0e      	ldr	r2, [pc, #56]	; (8003df8 <adcRead+0x5c>)
	filter_11 = filter_sred(ADC11, buf_11, &F11);
 8003dc0:	8018      	strh	r0, [r3, #0]
	filter_12 = filter_sred(ADC12, buf_12, &F12);
 8003dc2:	490e      	ldr	r1, [pc, #56]	; (8003dfc <adcRead+0x60>)
 8003dc4:	8830      	ldrh	r0, [r6, #0]
 8003dc6:	f7ff fdff 	bl	80039c8 <filter_sred>
 8003dca:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <adcRead+0x64>)

	HAL_ADC_Start_DMA(&hadc, (uint32_t *)&ADC_value, 2);
 8003dcc:	4621      	mov	r1, r4
	filter_12 = filter_sred(ADC12, buf_12, &F12);
 8003dce:	8018      	strh	r0, [r3, #0]
	HAL_ADC_Start_DMA(&hadc, (uint32_t *)&ADC_value, 2);
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	4628      	mov	r0, r5
}
 8003dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_ADC_Start_DMA(&hadc, (uint32_t *)&ADC_value, 2);
 8003dd8:	f7fd bb4e 	b.w	8001478 <HAL_ADC_Start_DMA>
 8003ddc:	200000ec 	.word	0x200000ec
 8003de0:	200003d6 	.word	0x200003d6
 8003de4:	200006dc 	.word	0x200006dc
 8003de8:	200003d0 	.word	0x200003d0
 8003dec:	200006ec 	.word	0x200006ec
 8003df0:	200001b4 	.word	0x200001b4
 8003df4:	200003be 	.word	0x200003be
 8003df8:	200001b0 	.word	0x200001b0
 8003dfc:	200004c0 	.word	0x200004c0
 8003e00:	200006f2 	.word	0x200006f2

08003e04 <readLs>:

void readLs()
{
 8003e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	troykaI2CHub_setBusChannel(0);
	BH1750_ReadLight(&ls_tl);
 8003e08:	4c2f      	ldr	r4, [pc, #188]	; (8003ec8 <readLs+0xc4>)
	troykaI2CHub_setBusChannel(0);
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	f001 f93c 	bl	8005088 <troykaI2CHub_setBusChannel>

	troykaI2CHub_setBusChannel(1);
	BH1750_ReadLight(&ls_tr);
 8003e10:	4d2e      	ldr	r5, [pc, #184]	; (8003ecc <readLs+0xc8>)
	BH1750_ReadLight(&ls_tl);
 8003e12:	4620      	mov	r0, r4
 8003e14:	f7ff fd7c 	bl	8003910 <BH1750_ReadLight>
	troykaI2CHub_setBusChannel(1);
 8003e18:	2001      	movs	r0, #1
 8003e1a:	f001 f935 	bl	8005088 <troykaI2CHub_setBusChannel>

	troykaI2CHub_setBusChannel(3);
	BH1750_ReadLight(&ls_bl);
 8003e1e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8003eec <readLs+0xe8>
	BH1750_ReadLight(&ls_tr);
 8003e22:	4628      	mov	r0, r5
 8003e24:	f7ff fd74 	bl	8003910 <BH1750_ReadLight>
	troykaI2CHub_setBusChannel(3);
 8003e28:	2003      	movs	r0, #3
 8003e2a:	f001 f92d 	bl	8005088 <troykaI2CHub_setBusChannel>

	troykaI2CHub_setBusChannel(4);
	BH1750_ReadLight(&ls_br);
 8003e2e:	4e28      	ldr	r6, [pc, #160]	; (8003ed0 <readLs+0xcc>)
	BH1750_ReadLight(&ls_bl);
 8003e30:	4640      	mov	r0, r8
 8003e32:	f7ff fd6d 	bl	8003910 <BH1750_ReadLight>
	troykaI2CHub_setBusChannel(4);
 8003e36:	2004      	movs	r0, #4
 8003e38:	f001 f926 	bl	8005088 <troykaI2CHub_setBusChannel>
	BH1750_ReadLight(&ls_br);
 8003e3c:	4630      	mov	r0, r6
 8003e3e:	f7ff fd67 	bl	8003910 <BH1750_ReadLight>

	avt = (ls_tl + ls_tr)/2;
 8003e42:	6824      	ldr	r4, [r4, #0]
 8003e44:	682f      	ldr	r7, [r5, #0]
 8003e46:	4620      	mov	r0, r4
 8003e48:	4639      	mov	r1, r7
 8003e4a:	f7fc fe71 	bl	8000b30 <__addsf3>
 8003e4e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003e52:	f7fc ff75 	bl	8000d40 <__aeabi_fmul>
 8003e56:	f7fd f8c3 	bl	8000fe0 <__aeabi_f2iz>
 8003e5a:	4b1e      	ldr	r3, [pc, #120]	; (8003ed4 <readLs+0xd0>)
	avb = (ls_bl + ls_br)/2;
 8003e5c:	f8d8 9000 	ldr.w	r9, [r8]
 8003e60:	f8d6 8000 	ldr.w	r8, [r6]
	avt = (ls_tl + ls_tr)/2;
 8003e64:	b205      	sxth	r5, r0
 8003e66:	801d      	strh	r5, [r3, #0]
	avb = (ls_bl + ls_br)/2;
 8003e68:	4641      	mov	r1, r8
 8003e6a:	4648      	mov	r0, r9
 8003e6c:	f7fc fe60 	bl	8000b30 <__addsf3>
 8003e70:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003e74:	f7fc ff64 	bl	8000d40 <__aeabi_fmul>
 8003e78:	f7fd f8b2 	bl	8000fe0 <__aeabi_f2iz>
 8003e7c:	4b16      	ldr	r3, [pc, #88]	; (8003ed8 <readLs+0xd4>)
 8003e7e:	b206      	sxth	r6, r0
 8003e80:	801e      	strh	r6, [r3, #0]
	avl = (ls_tl + ls_bl)/2;
 8003e82:	4649      	mov	r1, r9
 8003e84:	4620      	mov	r0, r4
 8003e86:	f7fc fe53 	bl	8000b30 <__addsf3>
 8003e8a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003e8e:	f7fc ff57 	bl	8000d40 <__aeabi_fmul>
 8003e92:	f7fd f8a5 	bl	8000fe0 <__aeabi_f2iz>
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <readLs+0xd8>)
 8003e98:	b204      	sxth	r4, r0
 8003e9a:	801c      	strh	r4, [r3, #0]
	avr = (ls_tr + ls_br)/2;
 8003e9c:	4641      	mov	r1, r8
 8003e9e:	4638      	mov	r0, r7
 8003ea0:	f7fc fe46 	bl	8000b30 <__addsf3>
 8003ea4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003ea8:	f7fc ff4a 	bl	8000d40 <__aeabi_fmul>
 8003eac:	f7fd f898 	bl	8000fe0 <__aeabi_f2iz>
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <readLs+0xdc>)
 8003eb2:	b200      	sxth	r0, r0
 8003eb4:	8018      	strh	r0, [r3, #0]

	dvert = avt - avb;
 8003eb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <readLs+0xe0>)
 8003eb8:	1bad      	subs	r5, r5, r6
 8003eba:	801d      	strh	r5, [r3, #0]
	dhorz = avl - avr;
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <readLs+0xe4>)
 8003ebe:	1a24      	subs	r4, r4, r0
 8003ec0:	801c      	strh	r4, [r3, #0]
 8003ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ec6:	bf00      	nop
 8003ec8:	200003c0 	.word	0x200003c0
 8003ecc:	200001a4 	.word	0x200001a4
 8003ed0:	200006d0 	.word	0x200006d0
 8003ed4:	2000044e 	.word	0x2000044e
 8003ed8:	200003bc 	.word	0x200003bc
 8003edc:	200003c4 	.word	0x200003c4
 8003ee0:	200003ba 	.word	0x200003ba
 8003ee4:	200001aa 	.word	0x200001aa
 8003ee8:	200006d4 	.word	0x200006d4
 8003eec:	200006d8 	.word	0x200006d8

08003ef0 <calculateVBat0>:
	troykaI2CHub_setBusChannel(4);
	BH1750_Reset();
}

void calculateVBat0()
{
 8003ef0:	b538      	push	{r3, r4, r5, lr}
	double r_divider, r1, r2;
	r1 = 1880.0;
	r2 = 2070.0;
	r_divider = r2 / (r1 + r2);

	vBat0 = VREF / 4095.0 * filter_11;
 8003ef2:	4b1d      	ldr	r3, [pc, #116]	; (8003f68 <calculateVBat0+0x78>)
 8003ef4:	8818      	ldrh	r0, [r3, #0]
 8003ef6:	f7fc fa9d 	bl	8000434 <__aeabi_i2d>
 8003efa:	a315      	add	r3, pc, #84	; (adr r3, 8003f50 <calculateVBat0+0x60>)
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	f7fc fafe 	bl	8000500 <__aeabi_dmul>
	vBat0 = vBat0 / r_divider;
 8003f04:	a314      	add	r3, pc, #80	; (adr r3, 8003f58 <calculateVBat0+0x68>)
 8003f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0a:	f7fc fc23 	bl	8000754 <__aeabi_ddiv>
 8003f0e:	4604      	mov	r4, r0
 8003f10:	460d      	mov	r5, r1
 8003f12:	4b16      	ldr	r3, [pc, #88]	; (8003f6c <calculateVBat0+0x7c>)
 8003f14:	e9c3 4500 	strd	r4, r5, [r3]

	if (vBat0 > 3.7f){
 8003f18:	a311      	add	r3, pc, #68	; (adr r3, 8003f60 <calculateVBat0+0x70>)
 8003f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1e:	f7fc fd7f 	bl	8000a20 <__aeabi_dcmpgt>
 8003f22:	b1a0      	cbz	r0, 8003f4e <calculateVBat0+0x5e>
		vDif0 = vBat0 - 3.7f;
 8003f24:	a30e      	add	r3, pc, #56	; (adr r3, 8003f60 <calculateVBat0+0x70>)
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	f7fc f933 	bl	8000198 <__aeabi_dsub>
 8003f32:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <calculateVBat0+0x80>)
		vBat0Percent = 100 * vDif0 / 0.5;
 8003f34:	2200      	movs	r2, #0
		vDif0 = vBat0 - 3.7f;
 8003f36:	e9c3 0100 	strd	r0, r1, [r3]
		vBat0Percent = 100 * vDif0 / 0.5;
 8003f3a:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <calculateVBat0+0x84>)
 8003f3c:	f7fc fae0 	bl	8000500 <__aeabi_dmul>
 8003f40:	460b      	mov	r3, r1
 8003f42:	4602      	mov	r2, r0
 8003f44:	f7fc f92a 	bl	800019c <__adddf3>
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <calculateVBat0+0x88>)
 8003f4a:	e9c3 0100 	strd	r0, r1, [r3]
 8003f4e:	bd38      	pop	{r3, r4, r5, pc}
 8003f50:	b90b90b9 	.word	0xb90b90b9
 8003f54:	3f4a5390 	.word	0x3f4a5390
 8003f58:	d539ae57 	.word	0xd539ae57
 8003f5c:	3fe0c505 	.word	0x3fe0c505
 8003f60:	a0000000 	.word	0xa0000000
 8003f64:	400d9999 	.word	0x400d9999
 8003f68:	200003be 	.word	0x200003be
 8003f6c:	200006c0 	.word	0x200006c0
 8003f70:	200003c8 	.word	0x200003c8
 8003f74:	40590000 	.word	0x40590000
 8003f78:	200003e0 	.word	0x200003e0
 8003f7c:	00000000 	.word	0x00000000

08003f80 <calculateVBat1>:
	}
}

void calculateVBat1()
{
 8003f80:	b538      	push	{r3, r4, r5, lr}
	double r_divider, r1, r2;
	r1 = 1890.0;
	r2 = 2090.0;
	r_divider = r2 / (r1 + r2);

	vBat1 = VREF / 4095.0 * filter_12;
 8003f82:	4b1d      	ldr	r3, [pc, #116]	; (8003ff8 <calculateVBat1+0x78>)
 8003f84:	8818      	ldrh	r0, [r3, #0]
 8003f86:	f7fc fa55 	bl	8000434 <__aeabi_i2d>
 8003f8a:	a315      	add	r3, pc, #84	; (adr r3, 8003fe0 <calculateVBat1+0x60>)
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	f7fc fab6 	bl	8000500 <__aeabi_dmul>
	vBat1 = vBat1 / r_divider;
 8003f94:	a314      	add	r3, pc, #80	; (adr r3, 8003fe8 <calculateVBat1+0x68>)
 8003f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9a:	f7fc fbdb 	bl	8000754 <__aeabi_ddiv>
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	460d      	mov	r5, r1
 8003fa2:	4b16      	ldr	r3, [pc, #88]	; (8003ffc <calculateVBat1+0x7c>)
 8003fa4:	e9c3 4500 	strd	r4, r5, [r3]

	if (vBat1 > 3.7f){
 8003fa8:	a311      	add	r3, pc, #68	; (adr r3, 8003ff0 <calculateVBat1+0x70>)
 8003faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fae:	f7fc fd37 	bl	8000a20 <__aeabi_dcmpgt>
 8003fb2:	b1a0      	cbz	r0, 8003fde <calculateVBat1+0x5e>
		vDif1 = vBat1 - 3.7f;
 8003fb4:	a30e      	add	r3, pc, #56	; (adr r3, 8003ff0 <calculateVBat1+0x70>)
 8003fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fba:	4620      	mov	r0, r4
 8003fbc:	4629      	mov	r1, r5
 8003fbe:	f7fc f8eb 	bl	8000198 <__aeabi_dsub>
 8003fc2:	4b0f      	ldr	r3, [pc, #60]	; (8004000 <calculateVBat1+0x80>)
		vBat1Percent = 100 * vDif1 / 0.5;
 8003fc4:	2200      	movs	r2, #0
		vDif1 = vBat1 - 3.7f;
 8003fc6:	e9c3 0100 	strd	r0, r1, [r3]
		vBat1Percent = 100 * vDif1 / 0.5;
 8003fca:	4b0e      	ldr	r3, [pc, #56]	; (8004004 <calculateVBat1+0x84>)
 8003fcc:	f7fc fa98 	bl	8000500 <__aeabi_dmul>
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	f7fc f8e2 	bl	800019c <__adddf3>
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <calculateVBat1+0x88>)
 8003fda:	e9c3 0100 	strd	r0, r1, [r3]
 8003fde:	bd38      	pop	{r3, r4, r5, pc}
 8003fe0:	b90b90b9 	.word	0xb90b90b9
 8003fe4:	3f4a5390 	.word	0x3f4a5390
 8003fe8:	42e4fc24 	.word	0x42e4fc24
 8003fec:	3fe0cdd4 	.word	0x3fe0cdd4
 8003ff0:	a0000000 	.word	0xa0000000
 8003ff4:	400d9999 	.word	0x400d9999
 8003ff8:	200006f2 	.word	0x200006f2
 8003ffc:	200004b8 	.word	0x200004b8
 8004000:	200006f8 	.word	0x200006f8
 8004004:	40590000 	.word	0x40590000
 8004008:	200006e0 	.word	0x200006e0

0800400c <I2C_Scan>:
	}
}

void I2C_Scan()
{
 800400c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800400e:	b097      	sub	sp, #92	; 0x5c
    char info[] = "SCANNING I2C BUS\r\n";
 8004010:	aa01      	add	r2, sp, #4
 8004012:	4615      	mov	r5, r2
 8004014:	4b20      	ldr	r3, [pc, #128]	; (8004098 <I2C_Scan+0x8c>)
 8004016:	f103 0610 	add.w	r6, r3, #16
 800401a:	4614      	mov	r4, r2
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	6859      	ldr	r1, [r3, #4]
 8004020:	3308      	adds	r3, #8
 8004022:	c403      	stmia	r4!, {r0, r1}
 8004024:	42b3      	cmp	r3, r6
 8004026:	4622      	mov	r2, r4
 8004028:	d1f7      	bne.n	800401a <I2C_Scan+0xe>
 800402a:	8819      	ldrh	r1, [r3, #0]
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	8021      	strh	r1, [r4, #0]
 8004030:	70a3      	strb	r3, [r4, #2]
    HAL_UART_Transmit(&huart2, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8004032:	4628      	mov	r0, r5
 8004034:	f7fc f8a4 	bl	8000180 <strlen>
 8004038:	4629      	mov	r1, r5
 800403a:	b282      	uxth	r2, r0
 800403c:	f04f 33ff 	mov.w	r3, #4294967295
 8004040:	4816      	ldr	r0, [pc, #88]	; (800409c <I2C_Scan+0x90>)
 8004042:	f7ff fa01 	bl	8003448 <HAL_UART_Transmit>
 8004046:	2400      	movs	r4, #0

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8004048:	4d15      	ldr	r5, [pc, #84]	; (80040a0 <I2C_Scan+0x94>)
        if(res == HAL_OK) {
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X ", i);
 800404a:	4e16      	ldr	r6, [pc, #88]	; (80040a4 <I2C_Scan+0x98>)
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800404c:	4f13      	ldr	r7, [pc, #76]	; (800409c <I2C_Scan+0x90>)
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 800404e:	0061      	lsls	r1, r4, #1
 8004050:	b289      	uxth	r1, r1
 8004052:	230a      	movs	r3, #10
 8004054:	2201      	movs	r2, #1
 8004056:	4628      	mov	r0, r5
 8004058:	f7fe f8a8 	bl	80021ac <HAL_I2C_IsDeviceReady>
        if(res == HAL_OK) {
 800405c:	b978      	cbnz	r0, 800407e <I2C_Scan+0x72>
            snprintf(msg, sizeof(msg), "0x%02X ", i);
 800405e:	4623      	mov	r3, r4
 8004060:	4632      	mov	r2, r6
 8004062:	2140      	movs	r1, #64	; 0x40
 8004064:	a806      	add	r0, sp, #24
 8004066:	f001 f9f7 	bl	8005458 <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800406a:	a806      	add	r0, sp, #24
 800406c:	f7fc f888 	bl	8000180 <strlen>
 8004070:	f04f 33ff 	mov.w	r3, #4294967295
 8004074:	b282      	uxth	r2, r0
 8004076:	a906      	add	r1, sp, #24
 8004078:	4638      	mov	r0, r7
 800407a:	f7ff f9e5 	bl	8003448 <HAL_UART_Transmit>
 800407e:	3401      	adds	r4, #1
    for(uint16_t i = 0; i < 128; i++) {
 8004080:	2c80      	cmp	r4, #128	; 0x80
 8004082:	d1e4      	bne.n	800404e <I2C_Scan+0x42>
        }
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8004084:	f04f 33ff 	mov.w	r3, #4294967295
 8004088:	2202      	movs	r2, #2
 800408a:	4907      	ldr	r1, [pc, #28]	; (80040a8 <I2C_Scan+0x9c>)
 800408c:	4803      	ldr	r0, [pc, #12]	; (800409c <I2C_Scan+0x90>)
 800408e:	f7ff f9db 	bl	8003448 <HAL_UART_Transmit>
}
 8004092:	b017      	add	sp, #92	; 0x5c
 8004094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004096:	bf00      	nop
 8004098:	08005bd0 	.word	0x08005bd0
 800409c:	20000768 	.word	0x20000768
 80040a0:	2000014c 	.word	0x2000014c
 80040a4:	08005bc8 	.word	0x08005bc8
 80040a8:	08005be0 	.word	0x08005be0

080040ac <leftFarmPositionControl>:

void leftFarmPositionControl()
{
	if (farm0 == open && farm0State == middle) {
 80040ac:	4b13      	ldr	r3, [pc, #76]	; (80040fc <leftFarmPositionControl+0x50>)
 80040ae:	7819      	ldrb	r1, [r3, #0]
 80040b0:	b959      	cbnz	r1, 80040ca <leftFarmPositionControl+0x1e>
 80040b2:	4a13      	ldr	r2, [pc, #76]	; (8004100 <leftFarmPositionControl+0x54>)
 80040b4:	7812      	ldrb	r2, [r2, #0]
 80040b6:	2a02      	cmp	r2, #2
 80040b8:	d116      	bne.n	80040e8 <leftFarmPositionControl+0x3c>
		motor0Cmd = cw;
	}
	if (farm0 == open && farm0State == bottom) {
		motor0Cmd = cw;
 80040ba:	4b12      	ldr	r3, [pc, #72]	; (8004104 <leftFarmPositionControl+0x58>)
 80040bc:	7019      	strb	r1, [r3, #0]
 80040be:	4770      	bx	lr
	}
	if (farm0 == open && farm0State == top) {
		motor0Cmd = stp;
 80040c0:	2102      	movs	r1, #2
 80040c2:	4a10      	ldr	r2, [pc, #64]	; (8004104 <leftFarmPositionControl+0x58>)
 80040c4:	7011      	strb	r1, [r2, #0]
		farm0 = opened;
 80040c6:	2201      	movs	r2, #1
 80040c8:	701a      	strb	r2, [r3, #0]
	}
	if (farm0 == close && farm0State == middle) {
 80040ca:	7819      	ldrb	r1, [r3, #0]
 80040cc:	2902      	cmp	r1, #2
 80040ce:	d114      	bne.n	80040fa <leftFarmPositionControl+0x4e>
 80040d0:	4a0b      	ldr	r2, [pc, #44]	; (8004100 <leftFarmPositionControl+0x54>)
 80040d2:	7812      	ldrb	r2, [r2, #0]
 80040d4:	2a02      	cmp	r2, #2
 80040d6:	d10c      	bne.n	80040f2 <leftFarmPositionControl+0x46>
		motor0Cmd = ccw;
	}
	if (farm0 == close && farm0State == top) {
		motor0Cmd = ccw;
 80040d8:	2201      	movs	r2, #1
 80040da:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <leftFarmPositionControl+0x58>)
	}
	if (farm0 == close && farm0State == bottom) {
		motor0Cmd = stp;
		farm0 = closed;
 80040dc:	701a      	strb	r2, [r3, #0]
	}
}
 80040de:	4770      	bx	lr
		motor0Cmd = stp;
 80040e0:	4a08      	ldr	r2, [pc, #32]	; (8004104 <leftFarmPositionControl+0x58>)
 80040e2:	7011      	strb	r1, [r2, #0]
		farm0 = closed;
 80040e4:	2203      	movs	r2, #3
 80040e6:	e7f9      	b.n	80040dc <leftFarmPositionControl+0x30>
	if (farm0 == open && farm0State == bottom) {
 80040e8:	2a01      	cmp	r2, #1
 80040ea:	d0e6      	beq.n	80040ba <leftFarmPositionControl+0xe>
	if (farm0 == open && farm0State == top) {
 80040ec:	2a00      	cmp	r2, #0
 80040ee:	d0e7      	beq.n	80040c0 <leftFarmPositionControl+0x14>
 80040f0:	4770      	bx	lr
	if (farm0 == close && farm0State == top) {
 80040f2:	2a00      	cmp	r2, #0
 80040f4:	d0f0      	beq.n	80040d8 <leftFarmPositionControl+0x2c>
	if (farm0 == close && farm0State == bottom) {
 80040f6:	2a01      	cmp	r2, #1
 80040f8:	d0f2      	beq.n	80040e0 <leftFarmPositionControl+0x34>
 80040fa:	4770      	bx	lr
 80040fc:	20000000 	.word	0x20000000
 8004100:	20000001 	.word	0x20000001
 8004104:	20000006 	.word	0x20000006

08004108 <rightFarmPositionControl>:

void rightFarmPositionControl()
{
	if (farm1 == open && farm1State == middle) {
 8004108:	4b13      	ldr	r3, [pc, #76]	; (8004158 <rightFarmPositionControl+0x50>)
 800410a:	7819      	ldrb	r1, [r3, #0]
 800410c:	b959      	cbnz	r1, 8004126 <rightFarmPositionControl+0x1e>
 800410e:	4a13      	ldr	r2, [pc, #76]	; (800415c <rightFarmPositionControl+0x54>)
 8004110:	7812      	ldrb	r2, [r2, #0]
 8004112:	2a02      	cmp	r2, #2
 8004114:	d116      	bne.n	8004144 <rightFarmPositionControl+0x3c>
		motor1Cmd = cw;
	}
	if (farm1 == open && farm1State == bottom) {
		motor1Cmd = cw;
 8004116:	4b12      	ldr	r3, [pc, #72]	; (8004160 <rightFarmPositionControl+0x58>)
 8004118:	7019      	strb	r1, [r3, #0]
 800411a:	4770      	bx	lr
	}
	if (farm1 == open && farm1State == top) {
		motor1Cmd = stp;
 800411c:	2102      	movs	r1, #2
 800411e:	4a10      	ldr	r2, [pc, #64]	; (8004160 <rightFarmPositionControl+0x58>)
 8004120:	7011      	strb	r1, [r2, #0]
		farm1 = opened;
 8004122:	2201      	movs	r2, #1
 8004124:	701a      	strb	r2, [r3, #0]
	}
	if (farm1 == close && farm1State == middle) {
 8004126:	7819      	ldrb	r1, [r3, #0]
 8004128:	2902      	cmp	r1, #2
 800412a:	d114      	bne.n	8004156 <rightFarmPositionControl+0x4e>
 800412c:	4a0b      	ldr	r2, [pc, #44]	; (800415c <rightFarmPositionControl+0x54>)
 800412e:	7812      	ldrb	r2, [r2, #0]
 8004130:	2a02      	cmp	r2, #2
 8004132:	d10c      	bne.n	800414e <rightFarmPositionControl+0x46>
		motor1Cmd = ccw;
	}
	if (farm1 == close && farm1State == top) {
		motor1Cmd = ccw;
 8004134:	2201      	movs	r2, #1
 8004136:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <rightFarmPositionControl+0x58>)
	}
	if (farm1 == close && farm1State == bottom) {
		motor1Cmd = stp;
		farm1 = closed;
 8004138:	701a      	strb	r2, [r3, #0]
	}
}
 800413a:	4770      	bx	lr
		motor1Cmd = stp;
 800413c:	4a08      	ldr	r2, [pc, #32]	; (8004160 <rightFarmPositionControl+0x58>)
 800413e:	7011      	strb	r1, [r2, #0]
		farm1 = closed;
 8004140:	2203      	movs	r2, #3
 8004142:	e7f9      	b.n	8004138 <rightFarmPositionControl+0x30>
	if (farm1 == open && farm1State == bottom) {
 8004144:	2a01      	cmp	r2, #1
 8004146:	d0e6      	beq.n	8004116 <rightFarmPositionControl+0xe>
	if (farm1 == open && farm1State == top) {
 8004148:	2a00      	cmp	r2, #0
 800414a:	d0e7      	beq.n	800411c <rightFarmPositionControl+0x14>
 800414c:	4770      	bx	lr
	if (farm1 == close && farm1State == top) {
 800414e:	2a00      	cmp	r2, #0
 8004150:	d0f0      	beq.n	8004134 <rightFarmPositionControl+0x2c>
	if (farm1 == close && farm1State == bottom) {
 8004152:	2a01      	cmp	r2, #1
 8004154:	d0f2      	beq.n	800413c <rightFarmPositionControl+0x34>
 8004156:	4770      	bx	lr
 8004158:	20000002 	.word	0x20000002
 800415c:	20000003 	.word	0x20000003
 8004160:	20000007 	.word	0x20000007

08004164 <liftPositionControl>:

void liftPositionControl()
{
	if (lift == open && lift0State == middle) {
 8004164:	4b13      	ldr	r3, [pc, #76]	; (80041b4 <liftPositionControl+0x50>)
 8004166:	781a      	ldrb	r2, [r3, #0]
 8004168:	b962      	cbnz	r2, 8004184 <liftPositionControl+0x20>
 800416a:	4a13      	ldr	r2, [pc, #76]	; (80041b8 <liftPositionControl+0x54>)
 800416c:	7812      	ldrb	r2, [r2, #0]
 800416e:	2a02      	cmp	r2, #2
 8004170:	d115      	bne.n	800419e <liftPositionControl+0x3a>
		motor5Cmd = ccw;
 8004172:	2201      	movs	r2, #1
	}
	if (lift == close && lift0State == middle) {
		motor5Cmd = cw;
	}
	if (lift == close && lift0State == top) {
		motor5Cmd = cw;
 8004174:	4b11      	ldr	r3, [pc, #68]	; (80041bc <liftPositionControl+0x58>)
	}
	if (lift == close && lift0State == bottom) {
		motor5Cmd = stp;
		lift = closed;
 8004176:	701a      	strb	r2, [r3, #0]
	}
}
 8004178:	4770      	bx	lr
		motor5Cmd = stp;
 800417a:	2102      	movs	r1, #2
 800417c:	4a0f      	ldr	r2, [pc, #60]	; (80041bc <liftPositionControl+0x58>)
 800417e:	7011      	strb	r1, [r2, #0]
		lift = opened;
 8004180:	2201      	movs	r2, #1
 8004182:	701a      	strb	r2, [r3, #0]
	if (lift == close && lift0State == middle) {
 8004184:	7819      	ldrb	r1, [r3, #0]
 8004186:	2902      	cmp	r1, #2
 8004188:	d112      	bne.n	80041b0 <liftPositionControl+0x4c>
 800418a:	4a0b      	ldr	r2, [pc, #44]	; (80041b8 <liftPositionControl+0x54>)
 800418c:	7812      	ldrb	r2, [r2, #0]
 800418e:	2a02      	cmp	r2, #2
 8004190:	d10a      	bne.n	80041a8 <liftPositionControl+0x44>
		motor5Cmd = cw;
 8004192:	2200      	movs	r2, #0
 8004194:	e7ee      	b.n	8004174 <liftPositionControl+0x10>
		motor5Cmd = stp;
 8004196:	4a09      	ldr	r2, [pc, #36]	; (80041bc <liftPositionControl+0x58>)
 8004198:	7011      	strb	r1, [r2, #0]
		lift = closed;
 800419a:	2203      	movs	r2, #3
 800419c:	e7eb      	b.n	8004176 <liftPositionControl+0x12>
	if (lift == open && lift0State == bottom) {
 800419e:	2a01      	cmp	r2, #1
 80041a0:	d0e8      	beq.n	8004174 <liftPositionControl+0x10>
	if (lift == open && lift0State == top) {
 80041a2:	2a00      	cmp	r2, #0
 80041a4:	d0e9      	beq.n	800417a <liftPositionControl+0x16>
 80041a6:	4770      	bx	lr
	if (lift == close && lift0State == top) {
 80041a8:	2a00      	cmp	r2, #0
 80041aa:	d0e3      	beq.n	8004174 <liftPositionControl+0x10>
	if (lift == close && lift0State == bottom) {
 80041ac:	2a01      	cmp	r2, #1
 80041ae:	d0f2      	beq.n	8004196 <liftPositionControl+0x32>
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20000004 	.word	0x20000004
 80041b8:	20000005 	.word	0x20000005
 80041bc:	2000000b 	.word	0x2000000b

080041c0 <refreshStateControl>:

void refreshStateControl()
{
	if (endstop30State == 1 && endstop31State == 1){
 80041c0:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <refreshStateControl+0x18>)
 80041c2:	781a      	ldrb	r2, [r3, #0]
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <refreshStateControl+0x1c>)
 80041c6:	b12a      	cbz	r2, 80041d4 <refreshStateControl+0x14>
 80041c8:	4a05      	ldr	r2, [pc, #20]	; (80041e0 <refreshStateControl+0x20>)
 80041ca:	7812      	ldrb	r2, [r2, #0]
 80041cc:	b112      	cbz	r2, 80041d4 <refreshStateControl+0x14>
		refreshState = 1;
 80041ce:	2201      	movs	r2, #1
	} else {
		refreshState = 0;
 80041d0:	701a      	strb	r2, [r3, #0]
 80041d2:	4770      	bx	lr
 80041d4:	2200      	movs	r2, #0
 80041d6:	e7fb      	b.n	80041d0 <refreshStateControl+0x10>
 80041d8:	200006f0 	.word	0x200006f0
 80041dc:	200004b4 	.word	0x200004b4
 80041e0:	200006cb 	.word	0x200006cb

080041e4 <sunTrackControl>:
//	}
//}

void sunTrackControl()
{
	if(relict == mech_suntrack_cmd){
 80041e4:	4a29      	ldr	r2, [pc, #164]	; (800428c <sunTrackControl+0xa8>)
{
 80041e6:	b530      	push	{r4, r5, lr}
	if(relict == mech_suntrack_cmd){
 80041e8:	7813      	ldrb	r3, [r2, #0]
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d14d      	bne.n	800428a <sunTrackControl+0xa6>

			if(dhorz > -SUN_ERROR_HORZ && dhorz < SUN_ERROR_HORZ) {
 80041ee:	4b28      	ldr	r3, [pc, #160]	; (8004290 <sunTrackControl+0xac>)
 80041f0:	f9b3 0000 	ldrsh.w	r0, [r3]
 80041f4:	b283      	uxth	r3, r0
 80041f6:	f103 0109 	add.w	r1, r3, #9
 80041fa:	b289      	uxth	r1, r1
 80041fc:	2912      	cmp	r1, #18
 80041fe:	d805      	bhi.n	800420c <sunTrackControl+0x28>
				motor2Cmd = stp;
 8004200:	2402      	movs	r4, #2
 8004202:	4924      	ldr	r1, [pc, #144]	; (8004294 <sunTrackControl+0xb0>)
 8004204:	700c      	strb	r4, [r1, #0]
				dhorzCorrect = 1;
 8004206:	2401      	movs	r4, #1
 8004208:	4923      	ldr	r1, [pc, #140]	; (8004298 <sunTrackControl+0xb4>)
 800420a:	700c      	strb	r4, [r1, #0]
			}
			if(dhorz < -SUN_ERROR_HORZ || dhorz > SUN_ERROR_HORZ){
 800420c:	330a      	adds	r3, #10
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b14      	cmp	r3, #20
 8004212:	d90b      	bls.n	800422c <sunTrackControl+0x48>
				dhorzCorrect = 0;
 8004214:	2100      	movs	r1, #0
 8004216:	4b20      	ldr	r3, [pc, #128]	; (8004298 <sunTrackControl+0xb4>)
				if (dhorz > 0) {
 8004218:	4288      	cmp	r0, r1
				dhorzCorrect = 0;
 800421a:	7019      	strb	r1, [r3, #0]
 800421c:	4b1d      	ldr	r3, [pc, #116]	; (8004294 <sunTrackControl+0xb0>)
				if (dhorz > 0) {
 800421e:	dd30      	ble.n	8004282 <sunTrackControl+0x9e>
				motor2Cmd = cw;
 8004220:	7019      	strb	r1, [r3, #0]
				}
				if (dhorz < 0) {
				motor2Cmd = ccw;
				}
				if (endstop31State == 1){
 8004222:	491e      	ldr	r1, [pc, #120]	; (800429c <sunTrackControl+0xb8>)
 8004224:	7809      	ldrb	r1, [r1, #0]
 8004226:	b109      	cbz	r1, 800422c <sunTrackControl+0x48>
					motor2Cmd = stp;
 8004228:	2102      	movs	r1, #2
 800422a:	7019      	strb	r1, [r3, #0]
				}
			}

			if(dvert > -SUN_ERROR_VERT && dvert < SUN_ERROR_VERT) {
 800422c:	4b1c      	ldr	r3, [pc, #112]	; (80042a0 <sunTrackControl+0xbc>)
 800422e:	481d      	ldr	r0, [pc, #116]	; (80042a4 <sunTrackControl+0xc0>)
 8004230:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004234:	b2ab      	uxth	r3, r5
 8004236:	f103 0109 	add.w	r1, r3, #9
 800423a:	b289      	uxth	r1, r1
 800423c:	2912      	cmp	r1, #18
 800423e:	d806      	bhi.n	800424e <sunTrackControl+0x6a>
					motor3Cmd = stp;
 8004240:	2102      	movs	r1, #2
 8004242:	4c19      	ldr	r4, [pc, #100]	; (80042a8 <sunTrackControl+0xc4>)
 8004244:	7021      	strb	r1, [r4, #0]
					motor4Cmd = stp;
 8004246:	4c19      	ldr	r4, [pc, #100]	; (80042ac <sunTrackControl+0xc8>)
 8004248:	7021      	strb	r1, [r4, #0]
					dvertCorrect = 1;
 800424a:	2101      	movs	r1, #1
 800424c:	7001      	strb	r1, [r0, #0]
			}
			if(dvert < -SUN_ERROR_VERT || dvert > SUN_ERROR_VERT){
 800424e:	330a      	adds	r3, #10
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b14      	cmp	r3, #20
 8004254:	d90d      	bls.n	8004272 <sunTrackControl+0x8e>
					dvertCorrect = 0;
 8004256:	2400      	movs	r4, #0
					if(dvert > 0){
 8004258:	42a5      	cmp	r5, r4
					dvertCorrect = 0;
 800425a:	7004      	strb	r4, [r0, #0]
 800425c:	4912      	ldr	r1, [pc, #72]	; (80042a8 <sunTrackControl+0xc4>)
 800425e:	4b13      	ldr	r3, [pc, #76]	; (80042ac <sunTrackControl+0xc8>)
					if(dvert > 0){
 8004260:	dd11      	ble.n	8004286 <sunTrackControl+0xa2>
						motor3Cmd = cw;
 8004262:	700c      	strb	r4, [r1, #0]
						motor4Cmd = cw;
 8004264:	701c      	strb	r4, [r3, #0]
					}
					if(dvert < 0){
						motor3Cmd = ccw;
						motor4Cmd = ccw;
					}
					if(endstop30State == 1) {
 8004266:	4c12      	ldr	r4, [pc, #72]	; (80042b0 <sunTrackControl+0xcc>)
 8004268:	7824      	ldrb	r4, [r4, #0]
 800426a:	b114      	cbz	r4, 8004272 <sunTrackControl+0x8e>
						motor3Cmd = stp;
 800426c:	2402      	movs	r4, #2
 800426e:	700c      	strb	r4, [r1, #0]
						motor4Cmd = stp;
 8004270:	701c      	strb	r4, [r3, #0]
					}
			}

		if (dvertCorrect == 1 && dhorzCorrect == 1){
 8004272:	7803      	ldrb	r3, [r0, #0]
 8004274:	b14b      	cbz	r3, 800428a <sunTrackControl+0xa6>
 8004276:	4b08      	ldr	r3, [pc, #32]	; (8004298 <sunTrackControl+0xb4>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	b133      	cbz	r3, 800428a <sunTrackControl+0xa6>
			relict = mech_suntrack;
 800427c:	2304      	movs	r3, #4
 800427e:	7013      	strb	r3, [r2, #0]
		}
	}
}
 8004280:	bd30      	pop	{r4, r5, pc}
				motor2Cmd = ccw;
 8004282:	2101      	movs	r1, #1
 8004284:	e7cc      	b.n	8004220 <sunTrackControl+0x3c>
						motor3Cmd = ccw;
 8004286:	2401      	movs	r4, #1
 8004288:	e7eb      	b.n	8004262 <sunTrackControl+0x7e>
 800428a:	bd30      	pop	{r4, r5, pc}
 800428c:	2000000c 	.word	0x2000000c
 8004290:	200006d4 	.word	0x200006d4
 8004294:	20000008 	.word	0x20000008
 8004298:	200006ca 	.word	0x200006ca
 800429c:	200006cb 	.word	0x200006cb
 80042a0:	200001aa 	.word	0x200001aa
 80042a4:	200003b4 	.word	0x200003b4
 80042a8:	20000009 	.word	0x20000009
 80042ac:	2000000a 	.word	0x2000000a
 80042b0:	200006f0 	.word	0x200006f0

080042b4 <mechWakeUpControl>:

void mechWakeUpControl()
{
	if (relict == mech_wakeup_cmd){
 80042b4:	490f      	ldr	r1, [pc, #60]	; (80042f4 <mechWakeUpControl+0x40>)
 80042b6:	780a      	ldrb	r2, [r1, #0]
 80042b8:	b9da      	cbnz	r2, 80042f2 <mechWakeUpControl+0x3e>
		if(lift != opened){
 80042ba:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <mechWakeUpControl+0x44>)
 80042bc:	7818      	ldrb	r0, [r3, #0]
 80042be:	2801      	cmp	r0, #1
			lift = open;
 80042c0:	bf18      	it	ne
 80042c2:	701a      	strbne	r2, [r3, #0]
		}
		if(lift == opened){
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d113      	bne.n	80042f2 <mechWakeUpControl+0x3e>
			if(farm0 != opened){
 80042ca:	4a0c      	ldr	r2, [pc, #48]	; (80042fc <mechWakeUpControl+0x48>)
 80042cc:	7813      	ldrb	r3, [r2, #0]
 80042ce:	2b01      	cmp	r3, #1
				farm0 = open;
 80042d0:	bf1c      	itt	ne
 80042d2:	2300      	movne	r3, #0
 80042d4:	7013      	strbne	r3, [r2, #0]
			}
			if(farm1 != opened){
 80042d6:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <mechWakeUpControl+0x4c>)
				farm1 = open;
			}
			if(farm0 == opened && farm1 == opened){
 80042d8:	7812      	ldrb	r2, [r2, #0]
			if(farm1 != opened){
 80042da:	7818      	ldrb	r0, [r3, #0]
 80042dc:	2801      	cmp	r0, #1
				farm1 = open;
 80042de:	bf1c      	itt	ne
 80042e0:	2000      	movne	r0, #0
 80042e2:	7018      	strbne	r0, [r3, #0]
			if(farm0 == opened && farm1 == opened){
 80042e4:	2a01      	cmp	r2, #1
 80042e6:	d104      	bne.n	80042f2 <mechWakeUpControl+0x3e>
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b01      	cmp	r3, #1
				relict = mech_suntrack_cmd;
 80042ec:	bf04      	itt	eq
 80042ee:	2303      	moveq	r3, #3
 80042f0:	700b      	strbeq	r3, [r1, #0]
 80042f2:	4770      	bx	lr
 80042f4:	2000000c 	.word	0x2000000c
 80042f8:	20000004 	.word	0x20000004
 80042fc:	20000000 	.word	0x20000000
 8004300:	20000002 	.word	0x20000002

08004304 <mechSleepControl>:
		}
	}
}

void mechSleepControl()
{
 8004304:	b510      	push	{r4, lr}
	if (relict == mech_sleep_cmd){
 8004306:	4c19      	ldr	r4, [pc, #100]	; (800436c <mechSleepControl+0x68>)
 8004308:	7822      	ldrb	r2, [r4, #0]
 800430a:	2a01      	cmp	r2, #1
 800430c:	d12d      	bne.n	800436a <mechSleepControl+0x66>
		if(farm0 != closed ){
 800430e:	4a18      	ldr	r2, [pc, #96]	; (8004370 <mechSleepControl+0x6c>)
 8004310:	7813      	ldrb	r3, [r2, #0]
 8004312:	2b03      	cmp	r3, #3
			farm0 = close;
 8004314:	bf1c      	itt	ne
 8004316:	2302      	movne	r3, #2
 8004318:	7013      	strbne	r3, [r2, #0]
		}
		if(farm1 != closed ){
 800431a:	4b16      	ldr	r3, [pc, #88]	; (8004374 <mechSleepControl+0x70>)
			farm1 = close;
		}
		if(farm0 == closed && farm1 == closed){
 800431c:	7812      	ldrb	r2, [r2, #0]
		if(farm1 != closed ){
 800431e:	7819      	ldrb	r1, [r3, #0]
 8004320:	2903      	cmp	r1, #3
			farm1 = close;
 8004322:	bf1c      	itt	ne
 8004324:	2102      	movne	r1, #2
 8004326:	7019      	strbne	r1, [r3, #0]
		if(farm0 == closed && farm1 == closed){
 8004328:	2a03      	cmp	r2, #3
 800432a:	d11e      	bne.n	800436a <mechSleepControl+0x66>
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b03      	cmp	r3, #3
 8004330:	d11b      	bne.n	800436a <mechSleepControl+0x66>
			if (endstop30State == 0){
 8004332:	4b11      	ldr	r3, [pc, #68]	; (8004378 <mechSleepControl+0x74>)
 8004334:	4911      	ldr	r1, [pc, #68]	; (800437c <mechSleepControl+0x78>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	4a11      	ldr	r2, [pc, #68]	; (8004380 <mechSleepControl+0x7c>)
 800433a:	b953      	cbnz	r3, 8004352 <mechSleepControl+0x4e>
				motor3Cmd = ccw;
 800433c:	2301      	movs	r3, #1
 800433e:	700b      	strb	r3, [r1, #0]
				motor4Cmd = ccw;
 8004340:	7013      	strb	r3, [r2, #0]
 8004342:	bd10      	pop	{r4, pc}
			if (endstop30State == 1){
				motor3Cmd = stp;
				motor4Cmd = stp;

				if(endstop31State == 0){
					motor2Cmd = cw;
 8004344:	7008      	strb	r0, [r1, #0]
				}
				if(endstop31State == 1){
					motor2Cmd = stp;
					lift = close;
				}
				if(lift == closed){
 8004346:	7813      	ldrb	r3, [r2, #0]
 8004348:	2b03      	cmp	r3, #3
 800434a:	d10e      	bne.n	800436a <mechSleepControl+0x66>
					relict = mech_sleep;
 800434c:	2306      	movs	r3, #6
 800434e:	7023      	strb	r3, [r4, #0]
				}
			}
		}
	}
}
 8004350:	bd10      	pop	{r4, pc}
				motor3Cmd = stp;
 8004352:	2302      	movs	r3, #2
				motor4Cmd = stp;
 8004354:	7013      	strb	r3, [r2, #0]
				if(endstop31State == 0){
 8004356:	4a0b      	ldr	r2, [pc, #44]	; (8004384 <mechSleepControl+0x80>)
				motor3Cmd = stp;
 8004358:	700b      	strb	r3, [r1, #0]
				if(endstop31State == 0){
 800435a:	7810      	ldrb	r0, [r2, #0]
 800435c:	490a      	ldr	r1, [pc, #40]	; (8004388 <mechSleepControl+0x84>)
 800435e:	4a0b      	ldr	r2, [pc, #44]	; (800438c <mechSleepControl+0x88>)
 8004360:	2800      	cmp	r0, #0
 8004362:	d0ef      	beq.n	8004344 <mechSleepControl+0x40>
					motor2Cmd = stp;
 8004364:	700b      	strb	r3, [r1, #0]
					lift = close;
 8004366:	7013      	strb	r3, [r2, #0]
 8004368:	e7ed      	b.n	8004346 <mechSleepControl+0x42>
 800436a:	bd10      	pop	{r4, pc}
 800436c:	2000000c 	.word	0x2000000c
 8004370:	20000000 	.word	0x20000000
 8004374:	20000002 	.word	0x20000002
 8004378:	200006f0 	.word	0x200006f0
 800437c:	20000009 	.word	0x20000009
 8004380:	2000000a 	.word	0x2000000a
 8004384:	200006cb 	.word	0x200006cb
 8004388:	20000008 	.word	0x20000008
 800438c:	20000004 	.word	0x20000004

08004390 <motor0Handler>:

void motor0Handler()
{
 8004390:	b538      	push	{r3, r4, r5, lr}
	if (motor0Cmd == stp) {
 8004392:	4c13      	ldr	r4, [pc, #76]	; (80043e0 <motor0Handler+0x50>)
 8004394:	7823      	ldrb	r3, [r4, #0]
 8004396:	2b02      	cmp	r3, #2
 8004398:	d104      	bne.n	80043a4 <motor0Handler+0x14>
		HAL_GPIO_WritePin(GPIOB, MOTOR_0_EN_Pin, GPIO_PIN_RESET);
 800439a:	2200      	movs	r2, #0
 800439c:	2104      	movs	r1, #4
 800439e:	4811      	ldr	r0, [pc, #68]	; (80043e4 <motor0Handler+0x54>)
 80043a0:	f7fd fb26 	bl	80019f0 <HAL_GPIO_WritePin>
	}

	if (motor0Cmd == cw) {
 80043a4:	7825      	ldrb	r5, [r4, #0]
 80043a6:	b955      	cbnz	r5, 80043be <motor0Handler+0x2e>
		HAL_GPIO_WritePin(GPIOB, MOTOR_0_EN_Pin,GPIO_PIN_SET);
 80043a8:	2201      	movs	r2, #1
 80043aa:	2104      	movs	r1, #4
 80043ac:	480d      	ldr	r0, [pc, #52]	; (80043e4 <motor0Handler+0x54>)
 80043ae:	f7fd fb1f 	bl	80019f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, MOTOR_0_D_Pin, GPIO_PIN_RESET);
 80043b2:	462a      	mov	r2, r5
 80043b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80043b8:	480a      	ldr	r0, [pc, #40]	; (80043e4 <motor0Handler+0x54>)
 80043ba:	f7fd fb19 	bl	80019f0 <HAL_GPIO_WritePin>
	}

	if (motor0Cmd == ccw) {
 80043be:	7824      	ldrb	r4, [r4, #0]
 80043c0:	2c01      	cmp	r4, #1
 80043c2:	d10c      	bne.n	80043de <motor0Handler+0x4e>
		HAL_GPIO_WritePin(GPIOB, MOTOR_0_EN_Pin,GPIO_PIN_SET);
 80043c4:	4622      	mov	r2, r4
 80043c6:	2104      	movs	r1, #4
 80043c8:	4806      	ldr	r0, [pc, #24]	; (80043e4 <motor0Handler+0x54>)
 80043ca:	f7fd fb11 	bl	80019f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, MOTOR_0_D_Pin, GPIO_PIN_SET);
 80043ce:	4622      	mov	r2, r4
	}
}
 80043d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOB, MOTOR_0_D_Pin, GPIO_PIN_SET);
 80043d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80043d8:	4802      	ldr	r0, [pc, #8]	; (80043e4 <motor0Handler+0x54>)
 80043da:	f7fd bb09 	b.w	80019f0 <HAL_GPIO_WritePin>
 80043de:	bd38      	pop	{r3, r4, r5, pc}
 80043e0:	20000006 	.word	0x20000006
 80043e4:	40020400 	.word	0x40020400

080043e8 <motor1Handler>:

void motor1Handler()
{
 80043e8:	b538      	push	{r3, r4, r5, lr}
	if (motor1Cmd == stp) {
 80043ea:	4c12      	ldr	r4, [pc, #72]	; (8004434 <motor1Handler+0x4c>)
 80043ec:	7823      	ldrb	r3, [r4, #0]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d104      	bne.n	80043fc <motor1Handler+0x14>
		HAL_GPIO_WritePin(GPIOB, MOTOR_1_EN_Pin, GPIO_PIN_RESET);
 80043f2:	2200      	movs	r2, #0
 80043f4:	2101      	movs	r1, #1
 80043f6:	4810      	ldr	r0, [pc, #64]	; (8004438 <motor1Handler+0x50>)
 80043f8:	f7fd fafa 	bl	80019f0 <HAL_GPIO_WritePin>
	}

	if (motor1Cmd == cw) {
 80043fc:	7825      	ldrb	r5, [r4, #0]
 80043fe:	b94d      	cbnz	r5, 8004414 <motor1Handler+0x2c>
		HAL_GPIO_WritePin(GPIOB, MOTOR_1_EN_Pin,GPIO_PIN_SET);
 8004400:	2201      	movs	r2, #1
 8004402:	480d      	ldr	r0, [pc, #52]	; (8004438 <motor1Handler+0x50>)
 8004404:	4611      	mov	r1, r2
 8004406:	f7fd faf3 	bl	80019f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, MOTOR_1_D_Pin, GPIO_PIN_RESET);
 800440a:	462a      	mov	r2, r5
 800440c:	2102      	movs	r1, #2
 800440e:	480a      	ldr	r0, [pc, #40]	; (8004438 <motor1Handler+0x50>)
 8004410:	f7fd faee 	bl	80019f0 <HAL_GPIO_WritePin>
	}

	if (motor1Cmd == ccw) {
 8004414:	7824      	ldrb	r4, [r4, #0]
 8004416:	2c01      	cmp	r4, #1
 8004418:	d10b      	bne.n	8004432 <motor1Handler+0x4a>
		HAL_GPIO_WritePin(GPIOB, MOTOR_1_EN_Pin,GPIO_PIN_SET);
 800441a:	4622      	mov	r2, r4
 800441c:	4621      	mov	r1, r4
 800441e:	4806      	ldr	r0, [pc, #24]	; (8004438 <motor1Handler+0x50>)
 8004420:	f7fd fae6 	bl	80019f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, MOTOR_1_D_Pin, GPIO_PIN_SET);
 8004424:	4622      	mov	r2, r4
	}
}
 8004426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOB, MOTOR_1_D_Pin, GPIO_PIN_SET);
 800442a:	2102      	movs	r1, #2
 800442c:	4802      	ldr	r0, [pc, #8]	; (8004438 <motor1Handler+0x50>)
 800442e:	f7fd badf 	b.w	80019f0 <HAL_GPIO_WritePin>
 8004432:	bd38      	pop	{r3, r4, r5, pc}
 8004434:	20000007 	.word	0x20000007
 8004438:	40020400 	.word	0x40020400

0800443c <motor2Handler>:

void motor2Handler()
{
 800443c:	b538      	push	{r3, r4, r5, lr}
	if (motor2Cmd == stp) {
 800443e:	4c14      	ldr	r4, [pc, #80]	; (8004490 <motor2Handler+0x54>)
 8004440:	7823      	ldrb	r3, [r4, #0]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d105      	bne.n	8004452 <motor2Handler+0x16>
		HAL_GPIO_WritePin(GPIOC, MOTOR_2_EN_Pin, GPIO_PIN_RESET);
 8004446:	2200      	movs	r2, #0
 8004448:	f44f 7180 	mov.w	r1, #256	; 0x100
 800444c:	4811      	ldr	r0, [pc, #68]	; (8004494 <motor2Handler+0x58>)
 800444e:	f7fd facf 	bl	80019f0 <HAL_GPIO_WritePin>
	}

	if (motor2Cmd == cw) {
 8004452:	7825      	ldrb	r5, [r4, #0]
 8004454:	b955      	cbnz	r5, 800446c <motor2Handler+0x30>
		HAL_GPIO_WritePin(GPIOC, MOTOR_2_EN_Pin,GPIO_PIN_SET);
 8004456:	2201      	movs	r2, #1
 8004458:	f44f 7180 	mov.w	r1, #256	; 0x100
 800445c:	480d      	ldr	r0, [pc, #52]	; (8004494 <motor2Handler+0x58>)
 800445e:	f7fd fac7 	bl	80019f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, MOTOR_2_D_Pin, GPIO_PIN_RESET);
 8004462:	462a      	mov	r2, r5
 8004464:	2180      	movs	r1, #128	; 0x80
 8004466:	480b      	ldr	r0, [pc, #44]	; (8004494 <motor2Handler+0x58>)
 8004468:	f7fd fac2 	bl	80019f0 <HAL_GPIO_WritePin>
	}

	if (motor2Cmd == ccw) {
 800446c:	7824      	ldrb	r4, [r4, #0]
 800446e:	2c01      	cmp	r4, #1
 8004470:	d10c      	bne.n	800448c <motor2Handler+0x50>
		HAL_GPIO_WritePin(GPIOC, MOTOR_2_EN_Pin,GPIO_PIN_SET);
 8004472:	4622      	mov	r2, r4
 8004474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004478:	4806      	ldr	r0, [pc, #24]	; (8004494 <motor2Handler+0x58>)
 800447a:	f7fd fab9 	bl	80019f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, MOTOR_2_D_Pin, GPIO_PIN_SET);
 800447e:	4622      	mov	r2, r4
	}
}
 8004480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOC, MOTOR_2_D_Pin, GPIO_PIN_SET);
 8004484:	2180      	movs	r1, #128	; 0x80
 8004486:	4803      	ldr	r0, [pc, #12]	; (8004494 <motor2Handler+0x58>)
 8004488:	f7fd bab2 	b.w	80019f0 <HAL_GPIO_WritePin>
 800448c:	bd38      	pop	{r3, r4, r5, pc}
 800448e:	bf00      	nop
 8004490:	20000008 	.word	0x20000008
 8004494:	40020800 	.word	0x40020800

08004498 <motor3Handler>:

void motor3Handler()
{
 8004498:	b538      	push	{r3, r4, r5, lr}
	if (motor3Cmd == stp) {
 800449a:	4c13      	ldr	r4, [pc, #76]	; (80044e8 <motor3Handler+0x50>)
 800449c:	7823      	ldrb	r3, [r4, #0]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d104      	bne.n	80044ac <motor3Handler+0x14>
		HAL_GPIO_WritePin(GPIOC, MOTOR_3_EN_Pin, GPIO_PIN_RESET);
 80044a2:	2200      	movs	r2, #0
 80044a4:	2140      	movs	r1, #64	; 0x40
 80044a6:	4811      	ldr	r0, [pc, #68]	; (80044ec <motor3Handler+0x54>)
 80044a8:	f7fd faa2 	bl	80019f0 <HAL_GPIO_WritePin>
	}

	if (motor3Cmd == cw) {
 80044ac:	7825      	ldrb	r5, [r4, #0]
 80044ae:	b955      	cbnz	r5, 80044c6 <motor3Handler+0x2e>
		HAL_GPIO_WritePin(GPIOC, MOTOR_3_EN_Pin,GPIO_PIN_SET);
 80044b0:	2201      	movs	r2, #1
 80044b2:	2140      	movs	r1, #64	; 0x40
 80044b4:	480d      	ldr	r0, [pc, #52]	; (80044ec <motor3Handler+0x54>)
 80044b6:	f7fd fa9b 	bl	80019f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, MOTOR_3_D_Pin, GPIO_PIN_RESET);
 80044ba:	462a      	mov	r2, r5
 80044bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044c0:	480b      	ldr	r0, [pc, #44]	; (80044f0 <motor3Handler+0x58>)
 80044c2:	f7fd fa95 	bl	80019f0 <HAL_GPIO_WritePin>
	}

	if (motor3Cmd == ccw) {
 80044c6:	7824      	ldrb	r4, [r4, #0]
 80044c8:	2c01      	cmp	r4, #1
 80044ca:	d10c      	bne.n	80044e6 <motor3Handler+0x4e>
		HAL_GPIO_WritePin(GPIOC, MOTOR_3_EN_Pin,GPIO_PIN_SET);
 80044cc:	4622      	mov	r2, r4
 80044ce:	2140      	movs	r1, #64	; 0x40
 80044d0:	4806      	ldr	r0, [pc, #24]	; (80044ec <motor3Handler+0x54>)
 80044d2:	f7fd fa8d 	bl	80019f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, MOTOR_3_D_Pin, GPIO_PIN_SET);
 80044d6:	4622      	mov	r2, r4
	}
}
 80044d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOB, MOTOR_3_D_Pin, GPIO_PIN_SET);
 80044dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044e0:	4803      	ldr	r0, [pc, #12]	; (80044f0 <motor3Handler+0x58>)
 80044e2:	f7fd ba85 	b.w	80019f0 <HAL_GPIO_WritePin>
 80044e6:	bd38      	pop	{r3, r4, r5, pc}
 80044e8:	20000009 	.word	0x20000009
 80044ec:	40020800 	.word	0x40020800
 80044f0:	40020400 	.word	0x40020400

080044f4 <motor4Handler>:

void motor4Handler()
{
 80044f4:	b538      	push	{r3, r4, r5, lr}
	if (motor4Cmd == stp) {
 80044f6:	4c15      	ldr	r4, [pc, #84]	; (800454c <motor4Handler+0x58>)
 80044f8:	7823      	ldrb	r3, [r4, #0]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d105      	bne.n	800450a <motor4Handler+0x16>
		HAL_GPIO_WritePin(GPIOB, MOTOR_4_EN_Pin, GPIO_PIN_RESET);
 80044fe:	2200      	movs	r2, #0
 8004500:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004504:	4812      	ldr	r0, [pc, #72]	; (8004550 <motor4Handler+0x5c>)
 8004506:	f7fd fa73 	bl	80019f0 <HAL_GPIO_WritePin>
	}

	if (motor4Cmd == cw) {
 800450a:	7825      	ldrb	r5, [r4, #0]
 800450c:	b95d      	cbnz	r5, 8004526 <motor4Handler+0x32>
		HAL_GPIO_WritePin(GPIOB, MOTOR_4_EN_Pin,GPIO_PIN_SET);
 800450e:	2201      	movs	r2, #1
 8004510:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004514:	480e      	ldr	r0, [pc, #56]	; (8004550 <motor4Handler+0x5c>)
 8004516:	f7fd fa6b 	bl	80019f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, MOTOR_4_D_Pin, GPIO_PIN_RESET);
 800451a:	462a      	mov	r2, r5
 800451c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004520:	480b      	ldr	r0, [pc, #44]	; (8004550 <motor4Handler+0x5c>)
 8004522:	f7fd fa65 	bl	80019f0 <HAL_GPIO_WritePin>
	}

	if (motor4Cmd == ccw) {
 8004526:	7824      	ldrb	r4, [r4, #0]
 8004528:	2c01      	cmp	r4, #1
 800452a:	d10d      	bne.n	8004548 <motor4Handler+0x54>
		HAL_GPIO_WritePin(GPIOB, MOTOR_4_EN_Pin,GPIO_PIN_SET);
 800452c:	4622      	mov	r2, r4
 800452e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004532:	4807      	ldr	r0, [pc, #28]	; (8004550 <motor4Handler+0x5c>)
 8004534:	f7fd fa5c 	bl	80019f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, MOTOR_4_D_Pin, GPIO_PIN_SET);
 8004538:	4622      	mov	r2, r4
	}
}
 800453a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOB, MOTOR_4_D_Pin, GPIO_PIN_SET);
 800453e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004542:	4803      	ldr	r0, [pc, #12]	; (8004550 <motor4Handler+0x5c>)
 8004544:	f7fd ba54 	b.w	80019f0 <HAL_GPIO_WritePin>
 8004548:	bd38      	pop	{r3, r4, r5, pc}
 800454a:	bf00      	nop
 800454c:	2000000a 	.word	0x2000000a
 8004550:	40020400 	.word	0x40020400

08004554 <motor5Handler>:

void motor5Handler()
{
 8004554:	b538      	push	{r3, r4, r5, lr}
	if (motor5Cmd == stp) {
 8004556:	4c13      	ldr	r4, [pc, #76]	; (80045a4 <motor5Handler+0x50>)
 8004558:	7823      	ldrb	r3, [r4, #0]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d104      	bne.n	8004568 <motor5Handler+0x14>
		HAL_GPIO_WritePin(GPIOD, MOTOR_5_EN_Pin, GPIO_PIN_RESET);
 800455e:	2200      	movs	r2, #0
 8004560:	2104      	movs	r1, #4
 8004562:	4811      	ldr	r0, [pc, #68]	; (80045a8 <motor5Handler+0x54>)
 8004564:	f7fd fa44 	bl	80019f0 <HAL_GPIO_WritePin>
	}

	if (motor5Cmd == cw) {
 8004568:	7825      	ldrb	r5, [r4, #0]
 800456a:	b955      	cbnz	r5, 8004582 <motor5Handler+0x2e>
		HAL_GPIO_WritePin(GPIOD, MOTOR_5_EN_Pin,GPIO_PIN_SET);
 800456c:	2201      	movs	r2, #1
 800456e:	2104      	movs	r1, #4
 8004570:	480d      	ldr	r0, [pc, #52]	; (80045a8 <motor5Handler+0x54>)
 8004572:	f7fd fa3d 	bl	80019f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, MOTOR_5_D_Pin, GPIO_PIN_RESET);
 8004576:	462a      	mov	r2, r5
 8004578:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800457c:	480b      	ldr	r0, [pc, #44]	; (80045ac <motor5Handler+0x58>)
 800457e:	f7fd fa37 	bl	80019f0 <HAL_GPIO_WritePin>
	}

	if (motor5Cmd == ccw) {
 8004582:	7824      	ldrb	r4, [r4, #0]
 8004584:	2c01      	cmp	r4, #1
 8004586:	d10c      	bne.n	80045a2 <motor5Handler+0x4e>
		HAL_GPIO_WritePin(GPIOD, MOTOR_5_EN_Pin,GPIO_PIN_SET);
 8004588:	4622      	mov	r2, r4
 800458a:	2104      	movs	r1, #4
 800458c:	4806      	ldr	r0, [pc, #24]	; (80045a8 <motor5Handler+0x54>)
 800458e:	f7fd fa2f 	bl	80019f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, MOTOR_5_D_Pin, GPIO_PIN_SET);
 8004592:	4622      	mov	r2, r4
	}
}
 8004594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOA, MOTOR_5_D_Pin, GPIO_PIN_SET);
 8004598:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800459c:	4803      	ldr	r0, [pc, #12]	; (80045ac <motor5Handler+0x58>)
 800459e:	f7fd ba27 	b.w	80019f0 <HAL_GPIO_WritePin>
 80045a2:	bd38      	pop	{r3, r4, r5, pc}
 80045a4:	2000000b 	.word	0x2000000b
 80045a8:	40020c00 	.word	0x40020c00
 80045ac:	40020000 	.word	0x40020000

080045b0 <endstop0Control>:


void endstop0Control()
{
	if (endstop00State == 0 && endstop01State == 0) {
 80045b0:	4b08      	ldr	r3, [pc, #32]	; (80045d4 <endstop0Control+0x24>)
 80045b2:	781a      	ldrb	r2, [r3, #0]
 80045b4:	4b08      	ldr	r3, [pc, #32]	; (80045d8 <endstop0Control+0x28>)
 80045b6:	b92a      	cbnz	r2, 80045c4 <endstop0Control+0x14>
 80045b8:	781a      	ldrb	r2, [r3, #0]
 80045ba:	4b08      	ldr	r3, [pc, #32]	; (80045dc <endstop0Control+0x2c>)
 80045bc:	b942      	cbnz	r2, 80045d0 <endstop0Control+0x20>
		farm0State = middle;
 80045be:	2202      	movs	r2, #2
	}
	if (endstop00State == 1 && endstop01State == 0) {
		farm0State = top;
	}
	if (endstop00State == 0 && endstop01State == 1) {
		farm0State = bottom;
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	4770      	bx	lr
	if (endstop00State == 1 && endstop01State == 0) {
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1fb      	bne.n	80045c2 <endstop0Control+0x12>
		farm0State = top;
 80045ca:	4a04      	ldr	r2, [pc, #16]	; (80045dc <endstop0Control+0x2c>)
 80045cc:	7013      	strb	r3, [r2, #0]
	}
}
 80045ce:	4770      	bx	lr
		farm0State = bottom;
 80045d0:	2201      	movs	r2, #1
 80045d2:	e7f5      	b.n	80045c0 <endstop0Control+0x10>
 80045d4:	200003b6 	.word	0x200003b6
 80045d8:	200006e8 	.word	0x200006e8
 80045dc:	20000001 	.word	0x20000001

080045e0 <endstop1Control>:

void endstop1Control()
{
	if (endstop10State == 0 && endstop11State == 0) {
 80045e0:	4b08      	ldr	r3, [pc, #32]	; (8004604 <endstop1Control+0x24>)
 80045e2:	781a      	ldrb	r2, [r3, #0]
 80045e4:	4b08      	ldr	r3, [pc, #32]	; (8004608 <endstop1Control+0x28>)
 80045e6:	b92a      	cbnz	r2, 80045f4 <endstop1Control+0x14>
 80045e8:	781a      	ldrb	r2, [r3, #0]
 80045ea:	4b08      	ldr	r3, [pc, #32]	; (800460c <endstop1Control+0x2c>)
 80045ec:	b942      	cbnz	r2, 8004600 <endstop1Control+0x20>
		farm1State = middle;
 80045ee:	2202      	movs	r2, #2
	}
	if (endstop10State == 1 && endstop11State == 0) {
		farm1State = top;
	}
	if (endstop10State == 0 && endstop11State == 1) {
		farm1State = bottom;
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	4770      	bx	lr
	if (endstop10State == 1 && endstop11State == 0) {
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1fb      	bne.n	80045f2 <endstop1Control+0x12>
		farm1State = top;
 80045fa:	4a04      	ldr	r2, [pc, #16]	; (800460c <endstop1Control+0x2c>)
 80045fc:	7013      	strb	r3, [r2, #0]
	}
}
 80045fe:	4770      	bx	lr
		farm1State = bottom;
 8004600:	2201      	movs	r2, #1
 8004602:	e7f5      	b.n	80045f0 <endstop1Control+0x10>
 8004604:	200006f4 	.word	0x200006f4
 8004608:	200001a8 	.word	0x200001a8
 800460c:	20000003 	.word	0x20000003

08004610 <endstop2Control>:

void endstop2Control()
{
	if (endstop20State == 0 && endstop21State == 0) {
 8004610:	4b08      	ldr	r3, [pc, #32]	; (8004634 <endstop2Control+0x24>)
 8004612:	781a      	ldrb	r2, [r3, #0]
 8004614:	4b08      	ldr	r3, [pc, #32]	; (8004638 <endstop2Control+0x28>)
 8004616:	b92a      	cbnz	r2, 8004624 <endstop2Control+0x14>
 8004618:	781a      	ldrb	r2, [r3, #0]
 800461a:	4b08      	ldr	r3, [pc, #32]	; (800463c <endstop2Control+0x2c>)
 800461c:	b942      	cbnz	r2, 8004630 <endstop2Control+0x20>
		lift0State = middle;
 800461e:	2202      	movs	r2, #2
	}
	if (endstop20State == 1 && endstop21State == 0) {
		lift0State = top;
	}
	if (endstop20State == 0 && endstop21State == 1) {
		lift0State = bottom;
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	4770      	bx	lr
	if (endstop20State == 1 && endstop21State == 0) {
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1fb      	bne.n	8004622 <endstop2Control+0x12>
		lift0State = top;
 800462a:	4a04      	ldr	r2, [pc, #16]	; (800463c <endstop2Control+0x2c>)
 800462c:	7013      	strb	r3, [r2, #0]
	}
}
 800462e:	4770      	bx	lr
		lift0State = bottom;
 8004630:	2201      	movs	r2, #1
 8004632:	e7f5      	b.n	8004620 <endstop2Control+0x10>
 8004634:	200006c8 	.word	0x200006c8
 8004638:	200003d2 	.word	0x200003d2
 800463c:	20000005 	.word	0x20000005

08004640 <endstop00Handler>:

void endstop00Handler()
{
 8004640:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin (GPIOA, ESTOP_0_0_Pin) == GPIO_PIN_RESET) {
 8004642:	2110      	movs	r1, #16
 8004644:	4806      	ldr	r0, [pc, #24]	; (8004660 <endstop00Handler+0x20>)
 8004646:	f7fd f9cd 	bl	80019e4 <HAL_GPIO_ReadPin>
 800464a:	b910      	cbnz	r0, 8004652 <endstop00Handler+0x12>
		endstop00State = 0;
	} else if (HAL_GPIO_ReadPin (GPIOA, ESTOP_0_0_Pin) == GPIO_PIN_SET) {
		endstop00State = 1;
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <endstop00Handler+0x24>)
 800464e:	7018      	strb	r0, [r3, #0]
	}
}
 8004650:	e005      	b.n	800465e <endstop00Handler+0x1e>
	} else if (HAL_GPIO_ReadPin (GPIOA, ESTOP_0_0_Pin) == GPIO_PIN_SET) {
 8004652:	2110      	movs	r1, #16
 8004654:	4802      	ldr	r0, [pc, #8]	; (8004660 <endstop00Handler+0x20>)
 8004656:	f7fd f9c5 	bl	80019e4 <HAL_GPIO_ReadPin>
 800465a:	2801      	cmp	r0, #1
 800465c:	d0f6      	beq.n	800464c <endstop00Handler+0xc>
 800465e:	bd08      	pop	{r3, pc}
 8004660:	40020000 	.word	0x40020000
 8004664:	200003b6 	.word	0x200003b6

08004668 <endstop01Handler>:

void endstop01Handler()
{
 8004668:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin (GPIOA, ESTOP_0_1_Pin) == GPIO_PIN_RESET) {
 800466a:	2120      	movs	r1, #32
 800466c:	4806      	ldr	r0, [pc, #24]	; (8004688 <endstop01Handler+0x20>)
 800466e:	f7fd f9b9 	bl	80019e4 <HAL_GPIO_ReadPin>
 8004672:	b910      	cbnz	r0, 800467a <endstop01Handler+0x12>
		endstop01State = 0;
	} else if (HAL_GPIO_ReadPin (GPIOA, ESTOP_0_1_Pin) == GPIO_PIN_SET) {
		endstop01State = 1;
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <endstop01Handler+0x24>)
 8004676:	7018      	strb	r0, [r3, #0]
	}
}
 8004678:	e005      	b.n	8004686 <endstop01Handler+0x1e>
	} else if (HAL_GPIO_ReadPin (GPIOA, ESTOP_0_1_Pin) == GPIO_PIN_SET) {
 800467a:	2120      	movs	r1, #32
 800467c:	4802      	ldr	r0, [pc, #8]	; (8004688 <endstop01Handler+0x20>)
 800467e:	f7fd f9b1 	bl	80019e4 <HAL_GPIO_ReadPin>
 8004682:	2801      	cmp	r0, #1
 8004684:	d0f6      	beq.n	8004674 <endstop01Handler+0xc>
 8004686:	bd08      	pop	{r3, pc}
 8004688:	40020000 	.word	0x40020000
 800468c:	200006e8 	.word	0x200006e8

08004690 <endstop10Handler>:

void endstop10Handler()
{
 8004690:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin (GPIOA, ESTOP_1_0_Pin) == GPIO_PIN_RESET) {
 8004692:	2140      	movs	r1, #64	; 0x40
 8004694:	4806      	ldr	r0, [pc, #24]	; (80046b0 <endstop10Handler+0x20>)
 8004696:	f7fd f9a5 	bl	80019e4 <HAL_GPIO_ReadPin>
 800469a:	b910      	cbnz	r0, 80046a2 <endstop10Handler+0x12>
		endstop10State = 0;
	} else if (HAL_GPIO_ReadPin (GPIOA, ESTOP_1_0_Pin) == GPIO_PIN_SET) {
		endstop10State = 1;
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <endstop10Handler+0x24>)
 800469e:	7018      	strb	r0, [r3, #0]
	}
}
 80046a0:	e005      	b.n	80046ae <endstop10Handler+0x1e>
	} else if (HAL_GPIO_ReadPin (GPIOA, ESTOP_1_0_Pin) == GPIO_PIN_SET) {
 80046a2:	2140      	movs	r1, #64	; 0x40
 80046a4:	4802      	ldr	r0, [pc, #8]	; (80046b0 <endstop10Handler+0x20>)
 80046a6:	f7fd f99d 	bl	80019e4 <HAL_GPIO_ReadPin>
 80046aa:	2801      	cmp	r0, #1
 80046ac:	d0f6      	beq.n	800469c <endstop10Handler+0xc>
 80046ae:	bd08      	pop	{r3, pc}
 80046b0:	40020000 	.word	0x40020000
 80046b4:	200006f4 	.word	0x200006f4

080046b8 <endstop11Handler>:

void endstop11Handler()
{
 80046b8:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin (GPIOA, ESTOP_1_1_Pin) == GPIO_PIN_RESET) {
 80046ba:	2180      	movs	r1, #128	; 0x80
 80046bc:	4806      	ldr	r0, [pc, #24]	; (80046d8 <endstop11Handler+0x20>)
 80046be:	f7fd f991 	bl	80019e4 <HAL_GPIO_ReadPin>
 80046c2:	b910      	cbnz	r0, 80046ca <endstop11Handler+0x12>
		endstop11State = 0;
	} else if (HAL_GPIO_ReadPin (GPIOA, ESTOP_1_1_Pin) == GPIO_PIN_SET) {
		endstop11State = 1;
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <endstop11Handler+0x24>)
 80046c6:	7018      	strb	r0, [r3, #0]
	}
}
 80046c8:	e005      	b.n	80046d6 <endstop11Handler+0x1e>
	} else if (HAL_GPIO_ReadPin (GPIOA, ESTOP_1_1_Pin) == GPIO_PIN_SET) {
 80046ca:	2180      	movs	r1, #128	; 0x80
 80046cc:	4802      	ldr	r0, [pc, #8]	; (80046d8 <endstop11Handler+0x20>)
 80046ce:	f7fd f989 	bl	80019e4 <HAL_GPIO_ReadPin>
 80046d2:	2801      	cmp	r0, #1
 80046d4:	d0f6      	beq.n	80046c4 <endstop11Handler+0xc>
 80046d6:	bd08      	pop	{r3, pc}
 80046d8:	40020000 	.word	0x40020000
 80046dc:	200001a8 	.word	0x200001a8

080046e0 <endstop20Handler>:

void endstop20Handler()
{
 80046e0:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin (GPIOC, ESTOP_2_1_Pin) == GPIO_PIN_RESET) {
 80046e2:	2120      	movs	r1, #32
 80046e4:	4806      	ldr	r0, [pc, #24]	; (8004700 <endstop20Handler+0x20>)
 80046e6:	f7fd f97d 	bl	80019e4 <HAL_GPIO_ReadPin>
 80046ea:	b910      	cbnz	r0, 80046f2 <endstop20Handler+0x12>
		endstop20State = 0;
	} else if (HAL_GPIO_ReadPin (GPIOC, ESTOP_2_1_Pin) == GPIO_PIN_SET) {
		endstop20State = 1;
 80046ec:	4b05      	ldr	r3, [pc, #20]	; (8004704 <endstop20Handler+0x24>)
 80046ee:	7018      	strb	r0, [r3, #0]
	}
}
 80046f0:	e005      	b.n	80046fe <endstop20Handler+0x1e>
	} else if (HAL_GPIO_ReadPin (GPIOC, ESTOP_2_1_Pin) == GPIO_PIN_SET) {
 80046f2:	2120      	movs	r1, #32
 80046f4:	4802      	ldr	r0, [pc, #8]	; (8004700 <endstop20Handler+0x20>)
 80046f6:	f7fd f975 	bl	80019e4 <HAL_GPIO_ReadPin>
 80046fa:	2801      	cmp	r0, #1
 80046fc:	d0f6      	beq.n	80046ec <endstop20Handler+0xc>
 80046fe:	bd08      	pop	{r3, pc}
 8004700:	40020800 	.word	0x40020800
 8004704:	200006c8 	.word	0x200006c8

08004708 <endstop21Handler>:

void endstop21Handler()
{
 8004708:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin (GPIOC, ESTOP_2_0_Pin) == GPIO_PIN_RESET) {
 800470a:	2110      	movs	r1, #16
 800470c:	4806      	ldr	r0, [pc, #24]	; (8004728 <endstop21Handler+0x20>)
 800470e:	f7fd f969 	bl	80019e4 <HAL_GPIO_ReadPin>
 8004712:	b910      	cbnz	r0, 800471a <endstop21Handler+0x12>
		endstop21State = 0;
	} else if (HAL_GPIO_ReadPin (GPIOC, ESTOP_2_0_Pin) == GPIO_PIN_SET) {
		endstop21State = 1;
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <endstop21Handler+0x24>)
 8004716:	7018      	strb	r0, [r3, #0]
	}
}
 8004718:	e005      	b.n	8004726 <endstop21Handler+0x1e>
	} else if (HAL_GPIO_ReadPin (GPIOC, ESTOP_2_0_Pin) == GPIO_PIN_SET) {
 800471a:	2110      	movs	r1, #16
 800471c:	4802      	ldr	r0, [pc, #8]	; (8004728 <endstop21Handler+0x20>)
 800471e:	f7fd f961 	bl	80019e4 <HAL_GPIO_ReadPin>
 8004722:	2801      	cmp	r0, #1
 8004724:	d0f6      	beq.n	8004714 <endstop21Handler+0xc>
 8004726:	bd08      	pop	{r3, pc}
 8004728:	40020800 	.word	0x40020800
 800472c:	200003d2 	.word	0x200003d2

08004730 <endstop30Handler>:

void endstop30Handler()
{
 8004730:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin (GPIOA, ESTOP_3_0_Pin) == GPIO_PIN_RESET) {
 8004732:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004736:	4807      	ldr	r0, [pc, #28]	; (8004754 <endstop30Handler+0x24>)
 8004738:	f7fd f954 	bl	80019e4 <HAL_GPIO_ReadPin>
 800473c:	b910      	cbnz	r0, 8004744 <endstop30Handler+0x14>
		endstop30State = 0;
	} else if (HAL_GPIO_ReadPin (GPIOA, ESTOP_3_0_Pin) == GPIO_PIN_SET) {
		endstop30State = 1;
 800473e:	4b06      	ldr	r3, [pc, #24]	; (8004758 <endstop30Handler+0x28>)
 8004740:	7018      	strb	r0, [r3, #0]
	}
}
 8004742:	e006      	b.n	8004752 <endstop30Handler+0x22>
	} else if (HAL_GPIO_ReadPin (GPIOA, ESTOP_3_0_Pin) == GPIO_PIN_SET) {
 8004744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004748:	4802      	ldr	r0, [pc, #8]	; (8004754 <endstop30Handler+0x24>)
 800474a:	f7fd f94b 	bl	80019e4 <HAL_GPIO_ReadPin>
 800474e:	2801      	cmp	r0, #1
 8004750:	d0f5      	beq.n	800473e <endstop30Handler+0xe>
 8004752:	bd08      	pop	{r3, pc}
 8004754:	40020000 	.word	0x40020000
 8004758:	200006f0 	.word	0x200006f0

0800475c <endstop31Handler>:

void endstop31Handler()
{
 800475c:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin (GPIOA, ESTOP_3_1_Pin) == GPIO_PIN_RESET) {
 800475e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004762:	4807      	ldr	r0, [pc, #28]	; (8004780 <endstop31Handler+0x24>)
 8004764:	f7fd f93e 	bl	80019e4 <HAL_GPIO_ReadPin>
 8004768:	b910      	cbnz	r0, 8004770 <endstop31Handler+0x14>
		endstop31State = 0;
	} else if (HAL_GPIO_ReadPin (GPIOA, ESTOP_3_1_Pin) == GPIO_PIN_SET) {
		endstop31State = 1;
 800476a:	4b06      	ldr	r3, [pc, #24]	; (8004784 <endstop31Handler+0x28>)
 800476c:	7018      	strb	r0, [r3, #0]
	}
}
 800476e:	e006      	b.n	800477e <endstop31Handler+0x22>
	} else if (HAL_GPIO_ReadPin (GPIOA, ESTOP_3_1_Pin) == GPIO_PIN_SET) {
 8004770:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004774:	4802      	ldr	r0, [pc, #8]	; (8004780 <endstop31Handler+0x24>)
 8004776:	f7fd f935 	bl	80019e4 <HAL_GPIO_ReadPin>
 800477a:	2801      	cmp	r0, #1
 800477c:	d0f5      	beq.n	800476a <endstop31Handler+0xe>
 800477e:	bd08      	pop	{r3, pc}
 8004780:	40020000 	.word	0x40020000
 8004784:	200006cb 	.word	0x200006cb

08004788 <debugPrint0>:

void debugPrint0()
{
 8004788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    char dateMsg[64];
    snprintf(dateMsg, sizeof(dateMsg), "%d.%d.%d-%d", c_day, c_month, c_year, c_dow);
 800478c:	4ac9      	ldr	r2, [pc, #804]	; (8004ab4 <debugPrint0+0x32c>)
 800478e:	4bca      	ldr	r3, [pc, #808]	; (8004ab8 <debugPrint0+0x330>)
 8004790:	7812      	ldrb	r2, [r2, #0]
{
 8004792:	b0b8      	sub	sp, #224	; 0xe0
    snprintf(dateMsg, sizeof(dateMsg), "%d.%d.%d-%d", c_day, c_month, c_year, c_dow);
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	9202      	str	r2, [sp, #8]
 8004798:	4ac8      	ldr	r2, [pc, #800]	; (8004abc <debugPrint0+0x334>)
 800479a:	2140      	movs	r1, #64	; 0x40
 800479c:	7812      	ldrb	r2, [r2, #0]
 800479e:	a818      	add	r0, sp, #96	; 0x60
 80047a0:	9201      	str	r2, [sp, #4]
 80047a2:	4ac7      	ldr	r2, [pc, #796]	; (8004ac0 <debugPrint0+0x338>)
    HAL_UART_Transmit(&huart2, (uint8_t*)dateMsg, strlen(dateMsg),HAL_MAX_DELAY);
 80047a4:	4cc7      	ldr	r4, [pc, #796]	; (8004ac4 <debugPrint0+0x33c>)
    snprintf(dateMsg, sizeof(dateMsg), "%d.%d.%d-%d", c_day, c_month, c_year, c_dow);
 80047a6:	7812      	ldrb	r2, [r2, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)"-", 1, HAL_MAX_DELAY);

	char timeMsg[64];
	snprintf(timeMsg, sizeof(timeMsg), "%d:%d:%d", c_hour, c_min, c_sec);
	HAL_UART_Transmit(&huart2, (uint8_t*)timeMsg, strlen(timeMsg),HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, (uint8_t*)"	", 1, HAL_MAX_DELAY);
 80047a8:	4dc7      	ldr	r5, [pc, #796]	; (8004ac8 <debugPrint0+0x340>)
    snprintf(dateMsg, sizeof(dateMsg), "%d.%d.%d-%d", c_day, c_month, c_year, c_dow);
 80047aa:	9200      	str	r2, [sp, #0]
 80047ac:	4ac7      	ldr	r2, [pc, #796]	; (8004acc <debugPrint0+0x344>)
 80047ae:	f000 fe53 	bl	8005458 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)dateMsg, strlen(dateMsg),HAL_MAX_DELAY);
 80047b2:	a818      	add	r0, sp, #96	; 0x60
 80047b4:	f7fb fce4 	bl	8000180 <strlen>
 80047b8:	a918      	add	r1, sp, #96	; 0x60
 80047ba:	b282      	uxth	r2, r0
 80047bc:	f04f 33ff 	mov.w	r3, #4294967295
 80047c0:	4620      	mov	r0, r4
 80047c2:	f7fe fe41 	bl	8003448 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)"-", 1, HAL_MAX_DELAY);
 80047c6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ca:	2201      	movs	r2, #1
 80047cc:	49c0      	ldr	r1, [pc, #768]	; (8004ad0 <debugPrint0+0x348>)
 80047ce:	4620      	mov	r0, r4
 80047d0:	f7fe fe3a 	bl	8003448 <HAL_UART_Transmit>
	snprintf(timeMsg, sizeof(timeMsg), "%d:%d:%d", c_hour, c_min, c_sec);
 80047d4:	4abf      	ldr	r2, [pc, #764]	; (8004ad4 <debugPrint0+0x34c>)
 80047d6:	4bc0      	ldr	r3, [pc, #768]	; (8004ad8 <debugPrint0+0x350>)
 80047d8:	7812      	ldrb	r2, [r2, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	9201      	str	r2, [sp, #4]
 80047de:	4abf      	ldr	r2, [pc, #764]	; (8004adc <debugPrint0+0x354>)
 80047e0:	2140      	movs	r1, #64	; 0x40
 80047e2:	7812      	ldrb	r2, [r2, #0]
 80047e4:	a828      	add	r0, sp, #160	; 0xa0
 80047e6:	9200      	str	r2, [sp, #0]
 80047e8:	4abd      	ldr	r2, [pc, #756]	; (8004ae0 <debugPrint0+0x358>)
 80047ea:	f000 fe35 	bl	8005458 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)timeMsg, strlen(timeMsg),HAL_MAX_DELAY);
 80047ee:	a828      	add	r0, sp, #160	; 0xa0
 80047f0:	f7fb fcc6 	bl	8000180 <strlen>
 80047f4:	a928      	add	r1, sp, #160	; 0xa0
 80047f6:	b282      	uxth	r2, r0
 80047f8:	f04f 33ff 	mov.w	r3, #4294967295
 80047fc:	4620      	mov	r0, r4
 80047fe:	f7fe fe23 	bl	8003448 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"	", 1, HAL_MAX_DELAY);
 8004802:	2201      	movs	r2, #1
 8004804:	4629      	mov	r1, r5
 8004806:	f04f 33ff 	mov.w	r3, #4294967295
 800480a:	4620      	mov	r0, r4
 800480c:	f7fe fe1c 	bl	8003448 <HAL_UART_Transmit>

	char val0[7];
	int tmpInt01 = vBat0;
 8004810:	4bb4      	ldr	r3, [pc, #720]	; (8004ae4 <debugPrint0+0x35c>)
 8004812:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004816:	4639      	mov	r1, r7
 8004818:	4630      	mov	r0, r6
 800481a:	f7fc f90b 	bl	8000a34 <__aeabi_d2iz>
 800481e:	4680      	mov	r8, r0
	float tmpFrac0 = vBat0 - tmpInt01;
 8004820:	f7fb fe08 	bl	8000434 <__aeabi_i2d>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4630      	mov	r0, r6
 800482a:	4639      	mov	r1, r7
 800482c:	f7fb fcb4 	bl	8000198 <__aeabi_dsub>
 8004830:	f7fc f928 	bl	8000a84 <__aeabi_d2f>
	int tmpInt02 = trunc(tmpFrac0 * 100);
 8004834:	49ac      	ldr	r1, [pc, #688]	; (8004ae8 <debugPrint0+0x360>)
 8004836:	f7fc fa83 	bl	8000d40 <__aeabi_fmul>
 800483a:	f7fc fbd1 	bl	8000fe0 <__aeabi_f2iz>
	sprintf (val0,"%01d.%02d", tmpInt01, tmpInt02);
 800483e:	4fab      	ldr	r7, [pc, #684]	; (8004aec <debugPrint0+0x364>)
 8004840:	4603      	mov	r3, r0
 8004842:	4642      	mov	r2, r8
 8004844:	4639      	mov	r1, r7
 8004846:	a804      	add	r0, sp, #16
 8004848:	f000 fe3a 	bl	80054c0 <siprintf>

	HAL_UART_Transmit(&huart2, (uint8_t*)val0, strlen(val0), HAL_MAX_DELAY);
 800484c:	a804      	add	r0, sp, #16
 800484e:	f7fb fc97 	bl	8000180 <strlen>
 8004852:	a904      	add	r1, sp, #16
 8004854:	b282      	uxth	r2, r0
 8004856:	f04f 33ff 	mov.w	r3, #4294967295
 800485a:	4620      	mov	r0, r4
 800485c:	f7fe fdf4 	bl	8003448 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"	", 1, HAL_MAX_DELAY);
 8004860:	2201      	movs	r2, #1
 8004862:	4629      	mov	r1, r5
 8004864:	f04f 33ff 	mov.w	r3, #4294967295
 8004868:	4620      	mov	r0, r4
 800486a:	f7fe fded 	bl	8003448 <HAL_UART_Transmit>

	char val1[7];
	int tmpInt11 = vBat0Percent;
 800486e:	4ba0      	ldr	r3, [pc, #640]	; (8004af0 <debugPrint0+0x368>)
	float tmpFrac1 = vBat0Percent - tmpInt11;
	int tmpInt12 = trunc(tmpFrac1 * 100);
	sprintf (val1,"%02d.%02d", tmpInt11, tmpInt12);
 8004870:	4ea0      	ldr	r6, [pc, #640]	; (8004af4 <debugPrint0+0x36c>)
	int tmpInt11 = vBat0Percent;
 8004872:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004876:	4649      	mov	r1, r9
 8004878:	4640      	mov	r0, r8
 800487a:	f7fc f8db 	bl	8000a34 <__aeabi_d2iz>
 800487e:	4682      	mov	sl, r0
	float tmpFrac1 = vBat0Percent - tmpInt11;
 8004880:	f7fb fdd8 	bl	8000434 <__aeabi_i2d>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4640      	mov	r0, r8
 800488a:	4649      	mov	r1, r9
 800488c:	f7fb fc84 	bl	8000198 <__aeabi_dsub>
 8004890:	f7fc f8f8 	bl	8000a84 <__aeabi_d2f>
	int tmpInt12 = trunc(tmpFrac1 * 100);
 8004894:	4994      	ldr	r1, [pc, #592]	; (8004ae8 <debugPrint0+0x360>)
 8004896:	f7fc fa53 	bl	8000d40 <__aeabi_fmul>
 800489a:	f7fc fba1 	bl	8000fe0 <__aeabi_f2iz>
	sprintf (val1,"%02d.%02d", tmpInt11, tmpInt12);
 800489e:	4652      	mov	r2, sl
 80048a0:	4603      	mov	r3, r0
 80048a2:	4631      	mov	r1, r6
 80048a4:	a806      	add	r0, sp, #24
 80048a6:	f000 fe0b 	bl	80054c0 <siprintf>

	HAL_UART_Transmit(&huart2, (uint8_t*)val1, strlen(val1), HAL_MAX_DELAY);
 80048aa:	a806      	add	r0, sp, #24
 80048ac:	f7fb fc68 	bl	8000180 <strlen>
 80048b0:	a906      	add	r1, sp, #24
 80048b2:	b282      	uxth	r2, r0
 80048b4:	f04f 33ff 	mov.w	r3, #4294967295
 80048b8:	4620      	mov	r0, r4
 80048ba:	f7fe fdc5 	bl	8003448 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"	", 1, HAL_MAX_DELAY);
 80048be:	2201      	movs	r2, #1
 80048c0:	4629      	mov	r1, r5
 80048c2:	f04f 33ff 	mov.w	r3, #4294967295
 80048c6:	4620      	mov	r0, r4
 80048c8:	f7fe fdbe 	bl	8003448 <HAL_UART_Transmit>

	char val2[7];
	int tmpInt21 = vBat1;
 80048cc:	4b8a      	ldr	r3, [pc, #552]	; (8004af8 <debugPrint0+0x370>)
 80048ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048d2:	4649      	mov	r1, r9
 80048d4:	4640      	mov	r0, r8
 80048d6:	f7fc f8ad 	bl	8000a34 <__aeabi_d2iz>
 80048da:	4682      	mov	sl, r0
	float tmpFrac2 = vBat1 - tmpInt21;
 80048dc:	f7fb fdaa 	bl	8000434 <__aeabi_i2d>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4640      	mov	r0, r8
 80048e6:	4649      	mov	r1, r9
 80048e8:	f7fb fc56 	bl	8000198 <__aeabi_dsub>
 80048ec:	f7fc f8ca 	bl	8000a84 <__aeabi_d2f>
	int tmpInt22 = trunc(tmpFrac2 * 100);
 80048f0:	497d      	ldr	r1, [pc, #500]	; (8004ae8 <debugPrint0+0x360>)
 80048f2:	f7fc fa25 	bl	8000d40 <__aeabi_fmul>
 80048f6:	f7fc fb73 	bl	8000fe0 <__aeabi_f2iz>
	sprintf (val2,"%01d.%02d", tmpInt21, tmpInt22);
 80048fa:	4652      	mov	r2, sl
 80048fc:	4603      	mov	r3, r0
 80048fe:	4639      	mov	r1, r7
 8004900:	a808      	add	r0, sp, #32
 8004902:	f000 fddd 	bl	80054c0 <siprintf>

	HAL_UART_Transmit(&huart2, (uint8_t*)val2, strlen(val2), HAL_MAX_DELAY);
 8004906:	a808      	add	r0, sp, #32
 8004908:	f7fb fc3a 	bl	8000180 <strlen>
 800490c:	a908      	add	r1, sp, #32
 800490e:	b282      	uxth	r2, r0
 8004910:	f04f 33ff 	mov.w	r3, #4294967295
 8004914:	4620      	mov	r0, r4
 8004916:	f7fe fd97 	bl	8003448 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"	", 1, HAL_MAX_DELAY);
 800491a:	2201      	movs	r2, #1
 800491c:	4629      	mov	r1, r5
 800491e:	f04f 33ff 	mov.w	r3, #4294967295
 8004922:	4620      	mov	r0, r4
 8004924:	f7fe fd90 	bl	8003448 <HAL_UART_Transmit>

	char val3[7];
	int tmpInt31 = vBat1Percent;
 8004928:	4b74      	ldr	r3, [pc, #464]	; (8004afc <debugPrint0+0x374>)
 800492a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800492e:	4649      	mov	r1, r9
 8004930:	4640      	mov	r0, r8
 8004932:	f7fc f87f 	bl	8000a34 <__aeabi_d2iz>
 8004936:	4607      	mov	r7, r0
	float tmpFrac3 = vBat1Percent - tmpInt31;
 8004938:	f7fb fd7c 	bl	8000434 <__aeabi_i2d>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4640      	mov	r0, r8
 8004942:	4649      	mov	r1, r9
 8004944:	f7fb fc28 	bl	8000198 <__aeabi_dsub>
 8004948:	f7fc f89c 	bl	8000a84 <__aeabi_d2f>
	int tmpInt32 = trunc(tmpFrac3 * 100);
 800494c:	4966      	ldr	r1, [pc, #408]	; (8004ae8 <debugPrint0+0x360>)
 800494e:	f7fc f9f7 	bl	8000d40 <__aeabi_fmul>
 8004952:	f7fc fb45 	bl	8000fe0 <__aeabi_f2iz>
	sprintf (val3,"%02d.%02d", tmpInt31, tmpInt32);
 8004956:	463a      	mov	r2, r7
 8004958:	4603      	mov	r3, r0
 800495a:	4631      	mov	r1, r6
 800495c:	a80a      	add	r0, sp, #40	; 0x28
 800495e:	f000 fdaf 	bl	80054c0 <siprintf>

	HAL_UART_Transmit(&huart2, (uint8_t*)val3, strlen(val3), HAL_MAX_DELAY);
 8004962:	a80a      	add	r0, sp, #40	; 0x28
 8004964:	f7fb fc0c 	bl	8000180 <strlen>
 8004968:	a90a      	add	r1, sp, #40	; 0x28
 800496a:	b282      	uxth	r2, r0
 800496c:	f04f 33ff 	mov.w	r3, #4294967295
 8004970:	4620      	mov	r0, r4
 8004972:	f7fe fd69 	bl	8003448 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"	", 2, HAL_MAX_DELAY);
 8004976:	4629      	mov	r1, r5
 8004978:	2202      	movs	r2, #2
 800497a:	f04f 33ff 	mov.w	r3, #4294967295
 800497e:	4620      	mov	r0, r4
 8004980:	f7fe fd62 	bl	8003448 <HAL_UART_Transmit>

	char val4[7];
	sprintf (val4, "%d", (int16_t)ls_tl);
 8004984:	4b5e      	ldr	r3, [pc, #376]	; (8004b00 <debugPrint0+0x378>)
 8004986:	4e5f      	ldr	r6, [pc, #380]	; (8004b04 <debugPrint0+0x37c>)
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	f7fc fb29 	bl	8000fe0 <__aeabi_f2iz>
 800498e:	4631      	mov	r1, r6
 8004990:	b202      	sxth	r2, r0
 8004992:	a80c      	add	r0, sp, #48	; 0x30
 8004994:	f000 fd94 	bl	80054c0 <siprintf>

	char val5[7];
	sprintf (val5, "%d", (int16_t)ls_tr);
 8004998:	4b5b      	ldr	r3, [pc, #364]	; (8004b08 <debugPrint0+0x380>)
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	f7fc fb20 	bl	8000fe0 <__aeabi_f2iz>
 80049a0:	4631      	mov	r1, r6
 80049a2:	b202      	sxth	r2, r0
 80049a4:	a80e      	add	r0, sp, #56	; 0x38
 80049a6:	f000 fd8b 	bl	80054c0 <siprintf>

	char val6[7];
	sprintf (val6, "%d", (int16_t)ls_bl);
 80049aa:	4b58      	ldr	r3, [pc, #352]	; (8004b0c <debugPrint0+0x384>)
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	f7fc fb17 	bl	8000fe0 <__aeabi_f2iz>
 80049b2:	4631      	mov	r1, r6
 80049b4:	b202      	sxth	r2, r0
 80049b6:	a810      	add	r0, sp, #64	; 0x40
 80049b8:	f000 fd82 	bl	80054c0 <siprintf>

	char val7[7];
	sprintf (val7, "%d", (int16_t)ls_br);
 80049bc:	4b54      	ldr	r3, [pc, #336]	; (8004b10 <debugPrint0+0x388>)
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	f7fc fb0e 	bl	8000fe0 <__aeabi_f2iz>
 80049c4:	4631      	mov	r1, r6
 80049c6:	b202      	sxth	r2, r0
 80049c8:	a812      	add	r0, sp, #72	; 0x48
 80049ca:	f000 fd79 	bl	80054c0 <siprintf>

    HAL_UART_Transmit(&huart2, (uint8_t*)val4, strlen(val4), HAL_MAX_DELAY);
 80049ce:	a80c      	add	r0, sp, #48	; 0x30
 80049d0:	f7fb fbd6 	bl	8000180 <strlen>
 80049d4:	a90c      	add	r1, sp, #48	; 0x30
 80049d6:	b282      	uxth	r2, r0
 80049d8:	f04f 33ff 	mov.w	r3, #4294967295
 80049dc:	4620      	mov	r0, r4
 80049de:	f7fe fd33 	bl	8003448 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"	", 1, HAL_MAX_DELAY);
 80049e2:	4629      	mov	r1, r5
 80049e4:	f04f 33ff 	mov.w	r3, #4294967295
 80049e8:	2201      	movs	r2, #1
 80049ea:	4620      	mov	r0, r4
 80049ec:	f7fe fd2c 	bl	8003448 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, (uint8_t*)val5, strlen(val5), HAL_MAX_DELAY);
 80049f0:	a80e      	add	r0, sp, #56	; 0x38
 80049f2:	f7fb fbc5 	bl	8000180 <strlen>
 80049f6:	a90e      	add	r1, sp, #56	; 0x38
 80049f8:	b282      	uxth	r2, r0
 80049fa:	f04f 33ff 	mov.w	r3, #4294967295
 80049fe:	4620      	mov	r0, r4
 8004a00:	f7fe fd22 	bl	8003448 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"	", 1, HAL_MAX_DELAY);
 8004a04:	4629      	mov	r1, r5
 8004a06:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	f7fe fd1b 	bl	8003448 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, (uint8_t*)val6, strlen(val6), HAL_MAX_DELAY);
 8004a12:	a810      	add	r0, sp, #64	; 0x40
 8004a14:	f7fb fbb4 	bl	8000180 <strlen>
 8004a18:	a910      	add	r1, sp, #64	; 0x40
 8004a1a:	b282      	uxth	r2, r0
 8004a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a20:	4620      	mov	r0, r4
 8004a22:	f7fe fd11 	bl	8003448 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"	", 1, HAL_MAX_DELAY);
 8004a26:	4629      	mov	r1, r5
 8004a28:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f7fe fd0a 	bl	8003448 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, (uint8_t*)val7, strlen(val7), HAL_MAX_DELAY);
 8004a34:	a812      	add	r0, sp, #72	; 0x48
 8004a36:	f7fb fba3 	bl	8000180 <strlen>
 8004a3a:	a912      	add	r1, sp, #72	; 0x48
 8004a3c:	b282      	uxth	r2, r0
 8004a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a42:	4620      	mov	r0, r4
 8004a44:	f7fe fd00 	bl	8003448 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"	", 3, HAL_MAX_DELAY);
 8004a48:	4629      	mov	r1, r5
 8004a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4e:	2203      	movs	r2, #3
 8004a50:	4620      	mov	r0, r4
 8004a52:	f7fe fcf9 	bl	8003448 <HAL_UART_Transmit>

	char val8[7];
	sprintf (val8, "%d", dvert);
 8004a56:	4b2f      	ldr	r3, [pc, #188]	; (8004b14 <debugPrint0+0x38c>)
 8004a58:	4631      	mov	r1, r6
 8004a5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004a5e:	a814      	add	r0, sp, #80	; 0x50
 8004a60:	f000 fd2e 	bl	80054c0 <siprintf>
	char val9[7];
	sprintf (val9, "%d", dhorz);
 8004a64:	4b2c      	ldr	r3, [pc, #176]	; (8004b18 <debugPrint0+0x390>)
 8004a66:	4631      	mov	r1, r6
 8004a68:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004a6c:	a816      	add	r0, sp, #88	; 0x58
 8004a6e:	f000 fd27 	bl	80054c0 <siprintf>

	HAL_UART_Transmit(&huart2, (uint8_t*)val8, strlen(val8), HAL_MAX_DELAY);
 8004a72:	a814      	add	r0, sp, #80	; 0x50
 8004a74:	f7fb fb84 	bl	8000180 <strlen>
 8004a78:	a914      	add	r1, sp, #80	; 0x50
 8004a7a:	b282      	uxth	r2, r0
 8004a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a80:	4620      	mov	r0, r4
 8004a82:	f7fe fce1 	bl	8003448 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"	", 1, HAL_MAX_DELAY);
 8004a86:	4629      	mov	r1, r5
 8004a88:	f04f 33ff 	mov.w	r3, #4294967295
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f7fe fcda 	bl	8003448 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, (uint8_t*)val9, strlen(val9), HAL_MAX_DELAY);
 8004a94:	a816      	add	r0, sp, #88	; 0x58
 8004a96:	f7fb fb73 	bl	8000180 <strlen>
 8004a9a:	a916      	add	r1, sp, #88	; 0x58
 8004a9c:	b282      	uxth	r2, r0
 8004a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	f7fe fcd0 	bl	8003448 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"	", 1, HAL_MAX_DELAY);
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8004aae:	2201      	movs	r2, #1
 8004ab0:	e034      	b.n	8004b1c <debugPrint0+0x394>
 8004ab2:	bf00      	nop
 8004ab4:	200006de 	.word	0x200006de
 8004ab8:	200001ac 	.word	0x200001ac
 8004abc:	200003b5 	.word	0x200003b5
 8004ac0:	200003b7 	.word	0x200003b7
 8004ac4:	20000768 	.word	0x20000768
 8004ac8:	08005bfa 	.word	0x08005bfa
 8004acc:	08005be3 	.word	0x08005be3
 8004ad0:	08005bef 	.word	0x08005bef
 8004ad4:	200006f5 	.word	0x200006f5
 8004ad8:	200006c9 	.word	0x200006c9
 8004adc:	200003d5 	.word	0x200003d5
 8004ae0:	08005bf1 	.word	0x08005bf1
 8004ae4:	200006c0 	.word	0x200006c0
 8004ae8:	42c80000 	.word	0x42c80000
 8004aec:	08005bfc 	.word	0x08005bfc
 8004af0:	200003e0 	.word	0x200003e0
 8004af4:	08005c06 	.word	0x08005c06
 8004af8:	200004b8 	.word	0x200004b8
 8004afc:	200006e0 	.word	0x200006e0
 8004b00:	200003c0 	.word	0x200003c0
 8004b04:	08005bec 	.word	0x08005bec
 8004b08:	200001a4 	.word	0x200001a4
 8004b0c:	200006d8 	.word	0x200006d8
 8004b10:	200006d0 	.word	0x200006d0
 8004b14:	200001aa 	.word	0x200001aa
 8004b18:	200006d4 	.word	0x200006d4
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	f7fe fc93 	bl	8003448 <HAL_UART_Transmit>

    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8004b22:	f04f 33ff 	mov.w	r3, #4294967295
 8004b26:	2202      	movs	r2, #2
 8004b28:	4903      	ldr	r1, [pc, #12]	; (8004b38 <debugPrint0+0x3b0>)
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f7fe fc8c 	bl	8003448 <HAL_UART_Transmit>
}
 8004b30:	b038      	add	sp, #224	; 0xe0
 8004b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b36:	bf00      	nop
 8004b38:	08005be0 	.word	0x08005be0

08004b3c <buttonsHandler>:
    HAL_UART_Transmit(&huart2, (uint8_t*)line1, strlen(line1),HAL_MAX_DELAY);
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
}

void buttonsHandler()
{
 8004b3c:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin (GPIOB, BUTTON_0_Pin) == GPIO_PIN_RESET) {
 8004b3e:	2140      	movs	r1, #64	; 0x40
 8004b40:	4831      	ldr	r0, [pc, #196]	; (8004c08 <buttonsHandler+0xcc>)
 8004b42:	f7fc ff4f 	bl	80019e4 <HAL_GPIO_ReadPin>
 8004b46:	b918      	cbnz	r0, 8004b50 <buttonsHandler+0x14>
		farm0 = open;
 8004b48:	4b30      	ldr	r3, [pc, #192]	; (8004c0c <buttonsHandler+0xd0>)
 8004b4a:	7018      	strb	r0, [r3, #0]
		farm1 = open;
 8004b4c:	4b30      	ldr	r3, [pc, #192]	; (8004c10 <buttonsHandler+0xd4>)
 8004b4e:	7018      	strb	r0, [r3, #0]
	}
	if (HAL_GPIO_ReadPin (GPIOB, BUTTON_1_Pin) == GPIO_PIN_RESET) {
 8004b50:	2180      	movs	r1, #128	; 0x80
 8004b52:	482d      	ldr	r0, [pc, #180]	; (8004c08 <buttonsHandler+0xcc>)
 8004b54:	f7fc ff46 	bl	80019e4 <HAL_GPIO_ReadPin>
 8004b58:	b920      	cbnz	r0, 8004b64 <buttonsHandler+0x28>
		farm0 = close;
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	4a2b      	ldr	r2, [pc, #172]	; (8004c0c <buttonsHandler+0xd0>)
 8004b5e:	7013      	strb	r3, [r2, #0]
		farm1 = close;
 8004b60:	4a2b      	ldr	r2, [pc, #172]	; (8004c10 <buttonsHandler+0xd4>)
 8004b62:	7013      	strb	r3, [r2, #0]
	}
	if (HAL_GPIO_ReadPin (GPIOB, BUTTON_2_Pin) == GPIO_PIN_RESET) {
 8004b64:	2120      	movs	r1, #32
 8004b66:	4828      	ldr	r0, [pc, #160]	; (8004c08 <buttonsHandler+0xcc>)
 8004b68:	f7fc ff3c 	bl	80019e4 <HAL_GPIO_ReadPin>
 8004b6c:	b908      	cbnz	r0, 8004b72 <buttonsHandler+0x36>
		relict = mech_wakeup_cmd;
 8004b6e:	4b29      	ldr	r3, [pc, #164]	; (8004c14 <buttonsHandler+0xd8>)
 8004b70:	7018      	strb	r0, [r3, #0]
	}
	if (HAL_GPIO_ReadPin (GPIOB, BUTTON_3_Pin) == GPIO_PIN_RESET) {
 8004b72:	2110      	movs	r1, #16
 8004b74:	4824      	ldr	r0, [pc, #144]	; (8004c08 <buttonsHandler+0xcc>)
 8004b76:	f7fc ff35 	bl	80019e4 <HAL_GPIO_ReadPin>
 8004b7a:	b910      	cbnz	r0, 8004b82 <buttonsHandler+0x46>
		relict = mech_sleep_cmd;
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	4b25      	ldr	r3, [pc, #148]	; (8004c14 <buttonsHandler+0xd8>)
 8004b80:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GPIO_ReadPin (GPIOC, BUTTON_4_Pin) == GPIO_PIN_RESET) {
 8004b82:	2104      	movs	r1, #4
 8004b84:	4824      	ldr	r0, [pc, #144]	; (8004c18 <buttonsHandler+0xdc>)
 8004b86:	f7fc ff2d 	bl	80019e4 <HAL_GPIO_ReadPin>
 8004b8a:	b918      	cbnz	r0, 8004b94 <buttonsHandler+0x58>
//		chrKey1State = 1;
//		chrKey2State = 0;
		motor3Cmd = cw;
 8004b8c:	4b23      	ldr	r3, [pc, #140]	; (8004c1c <buttonsHandler+0xe0>)
 8004b8e:	7018      	strb	r0, [r3, #0]
		motor4Cmd = cw;
 8004b90:	4b23      	ldr	r3, [pc, #140]	; (8004c20 <buttonsHandler+0xe4>)
 8004b92:	7018      	strb	r0, [r3, #0]
	}


	if (HAL_GPIO_ReadPin (GPIOC, BUTTON_5_Pin) == GPIO_PIN_RESET) {
 8004b94:	2108      	movs	r1, #8
 8004b96:	4820      	ldr	r0, [pc, #128]	; (8004c18 <buttonsHandler+0xdc>)
 8004b98:	f7fc ff24 	bl	80019e4 <HAL_GPIO_ReadPin>
 8004b9c:	b920      	cbnz	r0, 8004ba8 <buttonsHandler+0x6c>
//		chrKey1State = 0;
//		chrKey2State = 1;
		motor3Cmd = ccw;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	4a1e      	ldr	r2, [pc, #120]	; (8004c1c <buttonsHandler+0xe0>)
 8004ba2:	7013      	strb	r3, [r2, #0]
		motor4Cmd = ccw;
 8004ba4:	4a1e      	ldr	r2, [pc, #120]	; (8004c20 <buttonsHandler+0xe4>)
 8004ba6:	7013      	strb	r3, [r2, #0]
	}

	if (HAL_GPIO_ReadPin (GPIOC, BUTTON_5_Pin) == GPIO_PIN_SET && HAL_GPIO_ReadPin (GPIOC, BUTTON_4_Pin) == GPIO_PIN_SET) {
 8004ba8:	2108      	movs	r1, #8
 8004baa:	481b      	ldr	r0, [pc, #108]	; (8004c18 <buttonsHandler+0xdc>)
 8004bac:	f7fc ff1a 	bl	80019e4 <HAL_GPIO_ReadPin>
 8004bb0:	2801      	cmp	r0, #1
 8004bb2:	d10a      	bne.n	8004bca <buttonsHandler+0x8e>
 8004bb4:	2104      	movs	r1, #4
 8004bb6:	4818      	ldr	r0, [pc, #96]	; (8004c18 <buttonsHandler+0xdc>)
 8004bb8:	f7fc ff14 	bl	80019e4 <HAL_GPIO_ReadPin>
 8004bbc:	2801      	cmp	r0, #1
 8004bbe:	d104      	bne.n	8004bca <buttonsHandler+0x8e>
		motor4Cmd = stp;
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	4a17      	ldr	r2, [pc, #92]	; (8004c20 <buttonsHandler+0xe4>)
 8004bc4:	7013      	strb	r3, [r2, #0]
		motor3Cmd = stp;
 8004bc6:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <buttonsHandler+0xe0>)
 8004bc8:	7013      	strb	r3, [r2, #0]
	}

	if (HAL_GPIO_ReadPin (GPIOC, BUTTON_6_Pin) == GPIO_PIN_RESET) {
 8004bca:	2101      	movs	r1, #1
 8004bcc:	4812      	ldr	r0, [pc, #72]	; (8004c18 <buttonsHandler+0xdc>)
 8004bce:	f7fc ff09 	bl	80019e4 <HAL_GPIO_ReadPin>
 8004bd2:	b910      	cbnz	r0, 8004bda <buttonsHandler+0x9e>
//		batKey1State = 0;
//		batKey2State = 1;
		motor2Cmd = ccw;
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	4b13      	ldr	r3, [pc, #76]	; (8004c24 <buttonsHandler+0xe8>)
 8004bd8:	701a      	strb	r2, [r3, #0]
	}
//
	if (HAL_GPIO_ReadPin (GPIOC, BUTTON_7_Pin) == GPIO_PIN_RESET) {
 8004bda:	2102      	movs	r1, #2
 8004bdc:	480e      	ldr	r0, [pc, #56]	; (8004c18 <buttonsHandler+0xdc>)
 8004bde:	f7fc ff01 	bl	80019e4 <HAL_GPIO_ReadPin>
 8004be2:	b908      	cbnz	r0, 8004be8 <buttonsHandler+0xac>
//		batKey1State = 1;
//		batKey2State = 0;
		motor2Cmd = cw;
 8004be4:	4b0f      	ldr	r3, [pc, #60]	; (8004c24 <buttonsHandler+0xe8>)
 8004be6:	7018      	strb	r0, [r3, #0]
	}
//
//
	if (HAL_GPIO_ReadPin (GPIOC, BUTTON_6_Pin) == GPIO_PIN_SET && HAL_GPIO_ReadPin (GPIOC, BUTTON_7_Pin) == GPIO_PIN_SET) {
 8004be8:	2101      	movs	r1, #1
 8004bea:	480b      	ldr	r0, [pc, #44]	; (8004c18 <buttonsHandler+0xdc>)
 8004bec:	f7fc fefa 	bl	80019e4 <HAL_GPIO_ReadPin>
 8004bf0:	2801      	cmp	r0, #1
 8004bf2:	d108      	bne.n	8004c06 <buttonsHandler+0xca>
 8004bf4:	2102      	movs	r1, #2
 8004bf6:	4808      	ldr	r0, [pc, #32]	; (8004c18 <buttonsHandler+0xdc>)
 8004bf8:	f7fc fef4 	bl	80019e4 <HAL_GPIO_ReadPin>
 8004bfc:	2801      	cmp	r0, #1
	//		batKey1State = 1;
	//		batKey2State = 0;
			motor2Cmd = stp;
 8004bfe:	bf02      	ittt	eq
 8004c00:	2202      	moveq	r2, #2
 8004c02:	4b08      	ldreq	r3, [pc, #32]	; (8004c24 <buttonsHandler+0xe8>)
 8004c04:	701a      	strbeq	r2, [r3, #0]
 8004c06:	bd08      	pop	{r3, pc}
 8004c08:	40020400 	.word	0x40020400
 8004c0c:	20000000 	.word	0x20000000
 8004c10:	20000002 	.word	0x20000002
 8004c14:	2000000c 	.word	0x2000000c
 8004c18:	40020800 	.word	0x40020800
 8004c1c:	20000009 	.word	0x20000009
 8004c20:	2000000a 	.word	0x2000000a
 8004c24:	20000008 	.word	0x20000008

08004c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c28:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c2a:	2400      	movs	r4, #0
{
 8004c2c:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c2e:	2234      	movs	r2, #52	; 0x34
 8004c30:	2100      	movs	r1, #0
 8004c32:	a809      	add	r0, sp, #36	; 0x24
 8004c34:	f000 fb4e 	bl	80052d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c38:	2100      	movs	r1, #0
 8004c3a:	2214      	movs	r2, #20
 8004c3c:	a804      	add	r0, sp, #16
 8004c3e:	f000 fb49 	bl	80052d4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c42:	4a18      	ldr	r2, [pc, #96]	; (8004ca4 <SystemClock_Config+0x7c>)
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c44:	9401      	str	r4, [sp, #4]
 8004c46:	9402      	str	r4, [sp, #8]
 8004c48:	9403      	str	r4, [sp, #12]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c4a:	6813      	ldr	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c4c:	2501      	movs	r5, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c4e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8004c52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c56:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8004c58:	230a      	movs	r3, #10
 8004c5a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c5c:	2310      	movs	r3, #16
 8004c5e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c60:	2302      	movs	r3, #2
 8004c62:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8004c64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004c68:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8004c6a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c6e:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8004c70:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c72:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004c74:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004c76:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c78:	f7fd fb7c 	bl	8002374 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c7c:	230f      	movs	r3, #15
 8004c7e:	9304      	str	r3, [sp, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c80:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004c82:	4629      	mov	r1, r5
 8004c84:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c86:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c88:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004c8a:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c8c:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004c8e:	f7fd ff0b 	bl	8002aa8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004c92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c96:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004c98:	9501      	str	r5, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004c9a:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c9c:	f7fe f812 	bl	8002cc4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8004ca0:	b017      	add	sp, #92	; 0x5c
 8004ca2:	bd30      	pop	{r4, r5, pc}
 8004ca4:	40007000 	.word	0x40007000

08004ca8 <main>:
  F11.Val = 0;
 8004ca8:	2500      	movs	r5, #0
{
 8004caa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  batKey1State = 1;
 8004cac:	2401      	movs	r4, #1
  F11.Val = 0;
 8004cae:	4b55      	ldr	r3, [pc, #340]	; (8004e04 <main+0x15c>)
  RTC_Set(19, 6, 26, 18, 7, 0, 3);
 8004cb0:	2603      	movs	r6, #3
  F11.Val = 0;
 8004cb2:	601d      	str	r5, [r3, #0]
  F12.Val = 0;
 8004cb4:	4b54      	ldr	r3, [pc, #336]	; (8004e08 <main+0x160>)
 8004cb6:	601d      	str	r5, [r3, #0]
  HAL_Init();
 8004cb8:	f7fc f9cc 	bl	8001054 <HAL_Init>
  SystemClock_Config();
 8004cbc:	f7ff ffb4 	bl	8004c28 <SystemClock_Config>
  MX_GPIO_Init();
 8004cc0:	f7fe fec2 	bl	8003a48 <MX_GPIO_Init>
  MX_DMA_Init();
 8004cc4:	f7fe fe68 	bl	8003998 <MX_DMA_Init>
  MX_ADC_Init();
 8004cc8:	f7fe fd12 	bl	80036f0 <MX_ADC_Init>
  MX_I2C1_Init();
 8004ccc:	f7fe ff76 	bl	8003bbc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8004cd0:	f000 f9f4 	bl	80050bc <MX_USART2_UART_Init>
  MX_RTC_Init();
 8004cd4:	f000 f8fc 	bl	8004ed0 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8004cd8:	f000 fa0c 	bl	80050f4 <MX_USART3_UART_Init>
  batKey1State = 1;
 8004cdc:	4b4b      	ldr	r3, [pc, #300]	; (8004e0c <main+0x164>)
 8004cde:	701c      	strb	r4, [r3, #0]
  batKey2State = 1;
 8004ce0:	4b4b      	ldr	r3, [pc, #300]	; (8004e10 <main+0x168>)
 8004ce2:	701c      	strb	r4, [r3, #0]
  key3VBusState = 1;
 8004ce4:	4b4b      	ldr	r3, [pc, #300]	; (8004e14 <main+0x16c>)
 8004ce6:	701c      	strb	r4, [r3, #0]
  batKey1Handler();
 8004ce8:	f7ff f82e 	bl	8003d48 <batKey1Handler>
  batKey2Handler();
 8004cec:	f7ff f83a 	bl	8003d64 <batKey2Handler>
  key3VBusHandler();
 8004cf0:	f7ff f846 	bl	8003d80 <key3VBusHandler>
  HAL_Delay(2000);
 8004cf4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004cf8:	f7fc f9c6 	bl	8001088 <HAL_Delay>
  RTC_Set(19, 6, 26, 18, 7, 0, 3);
 8004cfc:	2307      	movs	r3, #7
 8004cfe:	221a      	movs	r2, #26
 8004d00:	2106      	movs	r1, #6
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	9602      	str	r6, [sp, #8]
 8004d06:	2312      	movs	r3, #18
 8004d08:	9501      	str	r5, [sp, #4]
 8004d0a:	2013      	movs	r0, #19
 8004d0c:	f7fe ffe8 	bl	8003ce0 <RTC_Set>
  I2C_Scan();
 8004d10:	f7ff f97c 	bl	800400c <I2C_Scan>
  troykaI2CHub_init(&hi2c1);
 8004d14:	4840      	ldr	r0, [pc, #256]	; (8004e18 <main+0x170>)
 8004d16:	f000 f9b1 	bl	800507c <troykaI2CHub_init>
  troykaI2CHub_setBusChannel(0);
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	f000 f9b4 	bl	8005088 <troykaI2CHub_setBusChannel>
  BH1750_Init(&hi2c1);
 8004d20:	483d      	ldr	r0, [pc, #244]	; (8004e18 <main+0x170>)
 8004d22:	f7fe fda9 	bl	8003878 <BH1750_Init>
  BH1750_PowerState(1);
 8004d26:	4620      	mov	r0, r4
 8004d28:	f7fe fdb8 	bl	800389c <BH1750_PowerState>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8004d2c:	2011      	movs	r0, #17
 8004d2e:	f7fe fdcd 	bl	80038cc <BH1750_SetMode>
  troykaI2CHub_setBusChannel(1);
 8004d32:	4620      	mov	r0, r4
 8004d34:	f000 f9a8 	bl	8005088 <troykaI2CHub_setBusChannel>
  BH1750_PowerState(1);
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f7fe fdaf 	bl	800389c <BH1750_PowerState>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8004d3e:	2011      	movs	r0, #17
 8004d40:	f7fe fdc4 	bl	80038cc <BH1750_SetMode>
  troykaI2CHub_setBusChannel(3);
 8004d44:	4630      	mov	r0, r6
 8004d46:	f000 f99f 	bl	8005088 <troykaI2CHub_setBusChannel>
  BH1750_PowerState(1);
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	f7fe fda6 	bl	800389c <BH1750_PowerState>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8004d50:	2011      	movs	r0, #17
 8004d52:	f7fe fdbb 	bl	80038cc <BH1750_SetMode>
  troykaI2CHub_setBusChannel(4);
 8004d56:	2004      	movs	r0, #4
 8004d58:	f000 f996 	bl	8005088 <troykaI2CHub_setBusChannel>
  BH1750_PowerState(1);
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f7fe fd9d 	bl	800389c <BH1750_PowerState>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8004d62:	2011      	movs	r0, #17
 8004d64:	f7fe fdb2 	bl	80038cc <BH1750_SetMode>
  HAL_Delay(2000);
 8004d68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004d6c:	f7fc f98c 	bl	8001088 <HAL_Delay>
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)&ADC_value, 2);
 8004d70:	2202      	movs	r2, #2
 8004d72:	492a      	ldr	r1, [pc, #168]	; (8004e1c <main+0x174>)
 8004d74:	482a      	ldr	r0, [pc, #168]	; (8004e20 <main+0x178>)
 8004d76:	f7fc fb7f 	bl	8001478 <HAL_ADC_Start_DMA>
	  getDateTime();
 8004d7a:	f7fe ff75 	bl	8003c68 <getDateTime>
	  batKey1Handler();
 8004d7e:	f7fe ffe3 	bl	8003d48 <batKey1Handler>
	  batKey2Handler();
 8004d82:	f7fe ffef 	bl	8003d64 <batKey2Handler>
	  key3VBusHandler();
 8004d86:	f7fe fffb 	bl	8003d80 <key3VBusHandler>
	  adcRead();
 8004d8a:	f7ff f807 	bl	8003d9c <adcRead>
	  calculateVBat0();
 8004d8e:	f7ff f8af 	bl	8003ef0 <calculateVBat0>
	  calculateVBat1();
 8004d92:	f7ff f8f5 	bl	8003f80 <calculateVBat1>
	  readLs();
 8004d96:	f7ff f835 	bl	8003e04 <readLs>
	  buttonsHandler();
 8004d9a:	f7ff fecf 	bl	8004b3c <buttonsHandler>
	  endstop00Handler();
 8004d9e:	f7ff fc4f 	bl	8004640 <endstop00Handler>
	  endstop01Handler();
 8004da2:	f7ff fc61 	bl	8004668 <endstop01Handler>
	  endstop10Handler();
 8004da6:	f7ff fc73 	bl	8004690 <endstop10Handler>
	  endstop11Handler();
 8004daa:	f7ff fc85 	bl	80046b8 <endstop11Handler>
	  endstop20Handler();
 8004dae:	f7ff fc97 	bl	80046e0 <endstop20Handler>
	  endstop21Handler();
 8004db2:	f7ff fca9 	bl	8004708 <endstop21Handler>
	  endstop30Handler();
 8004db6:	f7ff fcbb 	bl	8004730 <endstop30Handler>
	  endstop31Handler();
 8004dba:	f7ff fccf 	bl	800475c <endstop31Handler>
	  endstop0Control();
 8004dbe:	f7ff fbf7 	bl	80045b0 <endstop0Control>
	  endstop1Control();
 8004dc2:	f7ff fc0d 	bl	80045e0 <endstop1Control>
	  endstop2Control();
 8004dc6:	f7ff fc23 	bl	8004610 <endstop2Control>
	  leftFarmPositionControl();
 8004dca:	f7ff f96f 	bl	80040ac <leftFarmPositionControl>
	  rightFarmPositionControl();
 8004dce:	f7ff f99b 	bl	8004108 <rightFarmPositionControl>
	  liftPositionControl();
 8004dd2:	f7ff f9c7 	bl	8004164 <liftPositionControl>
	  mechWakeUpControl();
 8004dd6:	f7ff fa6d 	bl	80042b4 <mechWakeUpControl>
	  mechSleepControl();
 8004dda:	f7ff fa93 	bl	8004304 <mechSleepControl>
	  refreshStateControl();
 8004dde:	f7ff f9ef 	bl	80041c0 <refreshStateControl>
	  sunTrackControl();
 8004de2:	f7ff f9ff 	bl	80041e4 <sunTrackControl>
	  motor0Handler();
 8004de6:	f7ff fad3 	bl	8004390 <motor0Handler>
	  motor1Handler();
 8004dea:	f7ff fafd 	bl	80043e8 <motor1Handler>
	  motor2Handler();
 8004dee:	f7ff fb25 	bl	800443c <motor2Handler>
	  motor3Handler();
 8004df2:	f7ff fb51 	bl	8004498 <motor3Handler>
	  motor4Handler();
 8004df6:	f7ff fb7d 	bl	80044f4 <motor4Handler>
	  motor5Handler();
 8004dfa:	f7ff fbab 	bl	8004554 <motor5Handler>
	  debugPrint0();
 8004dfe:	f7ff fcc3 	bl	8004788 <debugPrint0>
 8004e02:	e7ba      	b.n	8004d7a <main+0xd2>
 8004e04:	200006ec 	.word	0x200006ec
 8004e08:	200001b0 	.word	0x200001b0
 8004e0c:	200006ce 	.word	0x200006ce
 8004e10:	200003b8 	.word	0x200003b8
 8004e14:	200003d4 	.word	0x200003d4
 8004e18:	2000014c 	.word	0x2000014c
 8004e1c:	200003d6 	.word	0x200003d6
 8004e20:	200000ec 	.word	0x200000ec

08004e24 <HAL_UART_RxCpltCallback>:
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	    uint8_t i;
	    if (huart->Instance == USART3) {
 8004e24:	6802      	ldr	r2, [r0, #0]
 8004e26:	4b20      	ldr	r3, [pc, #128]	; (8004ea8 <HAL_UART_RxCpltCallback+0x84>)
{
 8004e28:	b510      	push	{r4, lr}
	    if (huart->Instance == USART3) {
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d13a      	bne.n	8004ea4 <HAL_UART_RxCpltCallback+0x80>

	        if (rx_flag == 0) {
 8004e2e:	4a1f      	ldr	r2, [pc, #124]	; (8004eac <HAL_UART_RxCpltCallback+0x88>)
 8004e30:	491f      	ldr	r1, [pc, #124]	; (8004eb0 <HAL_UART_RxCpltCallback+0x8c>)
 8004e32:	7813      	ldrb	r3, [r2, #0]
 8004e34:	bb8b      	cbnz	r3, 8004e9a <HAL_UART_RxCpltCallback+0x76>
	            for (i = 0; i < 100; i++)
	                rx_buffer[i] = 0;
 8004e36:	4618      	mov	r0, r3
 8004e38:	54c8      	strb	r0, [r1, r3]
 8004e3a:	3301      	adds	r3, #1
	            for (i = 0; i < 100; i++)
 8004e3c:	2b64      	cmp	r3, #100	; 0x64
 8004e3e:	d1fb      	bne.n	8004e38 <HAL_UART_RxCpltCallback+0x14>

	        if (rx_flag > rx_buffer_size){
	            rx_flag = 0;
	        }

	        rx_buffer[rx_flag++] = rx_data[0];
 8004e40:	7810      	ldrb	r0, [r2, #0]
 8004e42:	4c1c      	ldr	r4, [pc, #112]	; (8004eb4 <HAL_UART_RxCpltCallback+0x90>)
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	7824      	ldrb	r4, [r4, #0]
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	540c      	strb	r4, [r1, r0]

	        if (rx_buffer[rx_flag - 4] == 79 && rx_buffer[rx_flag - 3] == 75){
 8004e4c:	4419      	add	r1, r3
	        rx_buffer[rx_flag++] = rx_data[0];
 8004e4e:	7013      	strb	r3, [r2, #0]
	        if (rx_buffer[rx_flag - 4] == 79 && rx_buffer[rx_flag - 3] == 75){
 8004e50:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 8004e54:	4c18      	ldr	r4, [pc, #96]	; (8004eb8 <HAL_UART_RxCpltCallback+0x94>)
 8004e56:	2b4f      	cmp	r3, #79	; 0x4f
 8004e58:	d109      	bne.n	8004e6e <HAL_UART_RxCpltCallback+0x4a>
 8004e5a:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 8004e5e:	2b4b      	cmp	r3, #75	; 0x4b
 8004e60:	d105      	bne.n	8004e6e <HAL_UART_RxCpltCallback+0x4a>
	        	ok_flag = 1;
 8004e62:	2301      	movs	r3, #1
 8004e64:	4915      	ldr	r1, [pc, #84]	; (8004ebc <HAL_UART_RxCpltCallback+0x98>)
	            rx_flag = 0;
	            transfer = 1;
 8004e66:	7023      	strb	r3, [r4, #0]
	        	ok_flag = 1;
 8004e68:	700b      	strb	r3, [r1, #0]
	            rx_flag = 0;
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	7011      	strb	r1, [r2, #0]
	        }

	        if (transfer) {
 8004e6e:	7823      	ldrb	r3, [r4, #0]
 8004e70:	b163      	cbz	r3, 8004e8c <HAL_UART_RxCpltCallback+0x68>
	            sprintf(buffer, "%s", rx_buffer);
 8004e72:	490f      	ldr	r1, [pc, #60]	; (8004eb0 <HAL_UART_RxCpltCallback+0x8c>)
 8004e74:	4812      	ldr	r0, [pc, #72]	; (8004ec0 <HAL_UART_RxCpltCallback+0x9c>)
 8004e76:	f000 fb47 	bl	8005508 <strcpy>
	            HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sizeof(buffer), 1000);
 8004e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e7e:	2264      	movs	r2, #100	; 0x64
 8004e80:	490f      	ldr	r1, [pc, #60]	; (8004ec0 <HAL_UART_RxCpltCallback+0x9c>)
 8004e82:	4810      	ldr	r0, [pc, #64]	; (8004ec4 <HAL_UART_RxCpltCallback+0xa0>)
 8004e84:	f7fe fae0 	bl	8003448 <HAL_UART_Transmit>

	            transfer = 0;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	7023      	strb	r3, [r4, #0]
	        }
	        HAL_UART_Receive_IT(&huart3, rx_data, 1);
 8004e8c:	2201      	movs	r2, #1
	    }
}
 8004e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	        HAL_UART_Receive_IT(&huart3, rx_data, 1);
 8004e92:	4908      	ldr	r1, [pc, #32]	; (8004eb4 <HAL_UART_RxCpltCallback+0x90>)
 8004e94:	480c      	ldr	r0, [pc, #48]	; (8004ec8 <HAL_UART_RxCpltCallback+0xa4>)
 8004e96:	f7fe bb32 	b.w	80034fe <HAL_UART_Receive_IT>
	        if (rx_flag > rx_buffer_size){
 8004e9a:	2b64      	cmp	r3, #100	; 0x64
	            rx_flag = 0;
 8004e9c:	bf84      	itt	hi
 8004e9e:	2300      	movhi	r3, #0
 8004ea0:	7013      	strbhi	r3, [r2, #0]
 8004ea2:	e7cd      	b.n	8004e40 <HAL_UART_RxCpltCallback+0x1c>
 8004ea4:	bd10      	pop	{r4, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40004800 	.word	0x40004800
 8004eac:	20000094 	.word	0x20000094
 8004eb0:	200003e8 	.word	0x200003e8
 8004eb4:	200006cc 	.word	0x200006cc
 8004eb8:	200001a0 	.word	0x200001a0
 8004ebc:	200006d6 	.word	0x200006d6
 8004ec0:	20000450 	.word	0x20000450
 8004ec4:	20000768 	.word	0x20000768
 8004ec8:	20000728 	.word	0x20000728

08004ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ecc:	4770      	bx	lr
	...

08004ed0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004ed0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  RTC_TimeTypeDef sTime = {0};
 8004ed2:	2214      	movs	r2, #20
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	a801      	add	r0, sp, #4
 8004ed8:	f000 f9fc 	bl	80052d4 <memset>
  RTC_DateTypeDef sDate = {0};
 8004edc:	2300      	movs	r3, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004ede:	481d      	ldr	r0, [pc, #116]	; (8004f54 <MX_RTC_Init+0x84>)
 8004ee0:	4a1d      	ldr	r2, [pc, #116]	; (8004f58 <MX_RTC_Init+0x88>)
  RTC_DateTypeDef sDate = {0};
 8004ee2:	9300      	str	r3, [sp, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004ee4:	e880 000c 	stmia.w	r0, {r2, r3}
  hrtc.Init.AsynchPrediv = 127;
 8004ee8:	227f      	movs	r2, #127	; 0x7f
 8004eea:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8004eec:	22ff      	movs	r2, #255	; 0xff
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004eee:	6103      	str	r3, [r0, #16]
  hrtc.Init.SynchPrediv = 255;
 8004ef0:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004ef2:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004ef4:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004ef6:	f7fd ffad 	bl	8002e54 <HAL_RTC_Init>
 8004efa:	b108      	cbz	r0, 8004f00 <MX_RTC_Init+0x30>
  {
    Error_Handler();
 8004efc:	f7ff ffe6 	bl	8004ecc <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x16;
 8004f00:	2316      	movs	r3, #22
 8004f02:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x56;
 8004f06:	2356      	movs	r3, #86	; 0x56
 8004f08:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8004f0c:	2300      	movs	r3, #0
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004f0e:	2201      	movs	r2, #1
 8004f10:	a901      	add	r1, sp, #4
 8004f12:	4810      	ldr	r0, [pc, #64]	; (8004f54 <MX_RTC_Init+0x84>)
  sTime.Seconds = 0x0;
 8004f14:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004f18:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004f1a:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004f1c:	f7fd ffe7 	bl	8002eee <HAL_RTC_SetTime>
 8004f20:	b108      	cbz	r0, 8004f26 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8004f22:	f7ff ffd3 	bl	8004ecc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8004f26:	2303      	movs	r3, #3
 8004f28:	f88d 3000 	strb.w	r3, [sp]
  sDate.Month = RTC_MONTH_JUNE;
 8004f2c:	2306      	movs	r3, #6
 8004f2e:	f88d 3001 	strb.w	r3, [sp, #1]
  sDate.Date = 0x26;
 8004f32:	2326      	movs	r3, #38	; 0x26
 8004f34:	f88d 3002 	strb.w	r3, [sp, #2]
  sDate.Year = 0x19;
 8004f38:	2319      	movs	r3, #25

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	4669      	mov	r1, sp
 8004f3e:	4805      	ldr	r0, [pc, #20]	; (8004f54 <MX_RTC_Init+0x84>)
  sDate.Year = 0x19;
 8004f40:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004f44:	f7fe f83b 	bl	8002fbe <HAL_RTC_SetDate>
 8004f48:	b108      	cbz	r0, 8004f4e <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8004f4a:	f7ff ffbf 	bl	8004ecc <Error_Handler>
  }

}
 8004f4e:	b007      	add	sp, #28
 8004f50:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f54:	20000700 	.word	0x20000700
 8004f58:	40002800 	.word	0x40002800

08004f5c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8004f5c:	6802      	ldr	r2, [r0, #0]
 8004f5e:	4b07      	ldr	r3, [pc, #28]	; (8004f7c <HAL_RTC_MspInit+0x20>)
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d10a      	bne.n	8004f7a <HAL_RTC_MspInit+0x1e>
 8004f64:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004f68:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004f6c:	fab2 f282 	clz	r2, r2
 8004f70:	4b03      	ldr	r3, [pc, #12]	; (8004f80 <HAL_RTC_MspInit+0x24>)
 8004f72:	4413      	add	r3, r2
 8004f74:	2201      	movs	r2, #1
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	4770      	bx	lr
 8004f7c:	40002800 	.word	0x40002800
 8004f80:	1091c1a0 	.word	0x1091c1a0

08004f84 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8004f84:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <HAL_MspInit+0x40>)
{
 8004f86:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8004f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004f8e:	625a      	str	r2, [r3, #36]	; 0x24
 8004f90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f92:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004f96:	9201      	str	r2, [sp, #4]
 8004f98:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f9a:	6a1a      	ldr	r2, [r3, #32]
 8004f9c:	f042 0201 	orr.w	r2, r2, #1
 8004fa0:	621a      	str	r2, [r3, #32]
 8004fa2:	6a1a      	ldr	r2, [r3, #32]
 8004fa4:	f002 0201 	and.w	r2, r2, #1
 8004fa8:	9202      	str	r2, [sp, #8]
 8004faa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004fb2:	625a      	str	r2, [r3, #36]	; 0x24
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fba:	9303      	str	r3, [sp, #12]
 8004fbc:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fbe:	b004      	add	sp, #16
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40023800 	.word	0x40023800

08004fc8 <NMI_Handler>:
 8004fc8:	4770      	bx	lr

08004fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fca:	e7fe      	b.n	8004fca <HardFault_Handler>

08004fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fcc:	e7fe      	b.n	8004fcc <MemManage_Handler>

08004fce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fce:	e7fe      	b.n	8004fce <BusFault_Handler>

08004fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fd0:	e7fe      	b.n	8004fd0 <UsageFault_Handler>

08004fd2 <SVC_Handler>:
 8004fd2:	4770      	bx	lr

08004fd4 <DebugMon_Handler>:
 8004fd4:	4770      	bx	lr

08004fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004fd6:	4770      	bx	lr

08004fd8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004fd8:	f7fc b848 	b.w	800106c <HAL_IncTick>

08004fdc <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004fdc:	4801      	ldr	r0, [pc, #4]	; (8004fe4 <DMA1_Channel1_IRQHandler+0x8>)
 8004fde:	f7fc bbfd 	b.w	80017dc <HAL_DMA_IRQHandler>
 8004fe2:	bf00      	nop
 8004fe4:	200000a8 	.word	0x200000a8

08004fe8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004fe8:	4801      	ldr	r0, [pc, #4]	; (8004ff0 <USART2_IRQHandler+0x8>)
 8004fea:	f7fe babc 	b.w	8003566 <HAL_UART_IRQHandler>
 8004fee:	bf00      	nop
 8004ff0:	20000768 	.word	0x20000768

08004ff4 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004ff4:	4801      	ldr	r0, [pc, #4]	; (8004ffc <USART3_IRQHandler+0x8>)
 8004ff6:	f7fe bab6 	b.w	8003566 <HAL_UART_IRQHandler>
 8004ffa:	bf00      	nop
 8004ffc:	20000728 	.word	0x20000728

08005000 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8005000:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005002:	4b0a      	ldr	r3, [pc, #40]	; (800502c <_sbrk+0x2c>)
{
 8005004:	4602      	mov	r2, r0
	if (heap_end == 0)
 8005006:	6819      	ldr	r1, [r3, #0]
 8005008:	b909      	cbnz	r1, 800500e <_sbrk+0xe>
		heap_end = &end;
 800500a:	4909      	ldr	r1, [pc, #36]	; (8005030 <_sbrk+0x30>)
 800500c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800500e:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8005010:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8005012:	4402      	add	r2, r0
 8005014:	428a      	cmp	r2, r1
 8005016:	d906      	bls.n	8005026 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005018:	f000 f932 	bl	8005280 <__errno>
 800501c:	230c      	movs	r3, #12
 800501e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005020:	f04f 30ff 	mov.w	r0, #4294967295
 8005024:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8005026:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8005028:	bd08      	pop	{r3, pc}
 800502a:	bf00      	nop
 800502c:	20000098 	.word	0x20000098
 8005030:	200007ac 	.word	0x200007ac

08005034 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8005034:	4b0e      	ldr	r3, [pc, #56]	; (8005070 <SystemInit+0x3c>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800503c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800503e:	6899      	ldr	r1, [r3, #8]
 8005040:	4a0c      	ldr	r2, [pc, #48]	; (8005074 <SystemInit+0x40>)
 8005042:	400a      	ands	r2, r1
 8005044:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 800504c:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8005050:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005058:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8005060:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005062:	2200      	movs	r2, #0
 8005064:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005066:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800506a:	4b03      	ldr	r3, [pc, #12]	; (8005078 <SystemInit+0x44>)
 800506c:	609a      	str	r2, [r3, #8]
 800506e:	4770      	bx	lr
 8005070:	40023800 	.word	0x40023800
 8005074:	88ffc00c 	.word	0x88ffc00c
 8005078:	e000ed00 	.word	0xe000ed00

0800507c <troykaI2CHub_init>:
uint8_t _i2cHubAddr;
I2C_HandleTypeDef 	*troykaI2CHub_i2c;

void troykaI2CHub_init(I2C_HandleTypeDef *hi2c)
{
	troykaI2CHub_i2c = hi2c;
 800507c:	4b01      	ldr	r3, [pc, #4]	; (8005084 <troykaI2CHub_init+0x8>)
 800507e:	6018      	str	r0, [r3, #0]
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	20000720 	.word	0x20000720

08005088 <troykaI2CHub_setBusChannel>:
}


_Bool troykaI2CHub_setBusChannel(uint8_t channel)
{
    if (channel >= COUNT_CHANNEL) {
 8005088:	2807      	cmp	r0, #7
{
 800508a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (channel >= COUNT_CHANNEL) {
 800508c:	d812      	bhi.n	80050b4 <troykaI2CHub_setBusChannel+0x2c>
        return 0;
    }

    uint8_t tmp = channel | ENABLE_MASK;
	if(HAL_OK == HAL_I2C_Master_Transmit(troykaI2CHub_i2c, DEFAULT_I2C_HUB_ADDRESS, &tmp, 1, 100))
 800508e:	2364      	movs	r3, #100	; 0x64
    uint8_t tmp = channel | ENABLE_MASK;
 8005090:	f040 0008 	orr.w	r0, r0, #8
 8005094:	aa04      	add	r2, sp, #16
 8005096:	f802 0d01 	strb.w	r0, [r2, #-1]!
	if(HAL_OK == HAL_I2C_Master_Transmit(troykaI2CHub_i2c, DEFAULT_I2C_HUB_ADDRESS, &tmp, 1, 100))
 800509a:	4807      	ldr	r0, [pc, #28]	; (80050b8 <troykaI2CHub_setBusChannel+0x30>)
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	21e0      	movs	r1, #224	; 0xe0
 80050a0:	2301      	movs	r3, #1
 80050a2:	6800      	ldr	r0, [r0, #0]
 80050a4:	f7fc fe34 	bl	8001d10 <HAL_I2C_Master_Transmit>
 80050a8:	fab0 f080 	clz	r0, r0
 80050ac:	0940      	lsrs	r0, r0, #5
		return 1;

	return 0;
}
 80050ae:	b005      	add	sp, #20
 80050b0:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
 80050b4:	2000      	movs	r0, #0
 80050b6:	e7fa      	b.n	80050ae <troykaI2CHub_setBusChannel+0x26>
 80050b8:	20000720 	.word	0x20000720

080050bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80050bc:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 80050be:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart2.Instance = USART2;
 80050c2:	480a      	ldr	r0, [pc, #40]	; (80050ec <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 80050c4:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <MX_USART2_UART_Init+0x34>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80050c6:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 80050c8:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80050cc:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80050ce:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80050d0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80050d2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80050d4:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050d6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80050d8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80050da:	f7fe f989 	bl	80033f0 <HAL_UART_Init>
 80050de:	b118      	cbz	r0, 80050e8 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80050e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80050e4:	f7ff bef2 	b.w	8004ecc <Error_Handler>
 80050e8:	bd08      	pop	{r3, pc}
 80050ea:	bf00      	nop
 80050ec:	20000768 	.word	0x20000768
 80050f0:	40004400 	.word	0x40004400

080050f4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80050f4:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 80050f6:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart3.Instance = USART3;
 80050fa:	480a      	ldr	r0, [pc, #40]	; (8005124 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 80050fc:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <MX_USART3_UART_Init+0x34>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80050fe:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8005100:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005104:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005106:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005108:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800510a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800510c:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800510e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005110:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005112:	f7fe f96d 	bl	80033f0 <HAL_UART_Init>
 8005116:	b118      	cbz	r0, 8005120 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8005118:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800511c:	f7ff bed6 	b.w	8004ecc <Error_Handler>
 8005120:	bd08      	pop	{r3, pc}
 8005122:	bf00      	nop
 8005124:	20000728 	.word	0x20000728
 8005128:	40004800 	.word	0x40004800

0800512c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800512c:	2214      	movs	r2, #20
{
 800512e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005130:	4604      	mov	r4, r0
 8005132:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005134:	eb0d 0002 	add.w	r0, sp, r2
 8005138:	2100      	movs	r1, #0
 800513a:	f000 f8cb 	bl	80052d4 <memset>
  if(uartHandle->Instance==USART2)
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	4a36      	ldr	r2, [pc, #216]	; (800521c <HAL_UART_MspInit+0xf0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d12a      	bne.n	800519c <HAL_UART_MspInit+0x70>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005146:	4b36      	ldr	r3, [pc, #216]	; (8005220 <HAL_UART_MspInit+0xf4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005148:	a905      	add	r1, sp, #20
    __HAL_RCC_USART2_CLK_ENABLE();
 800514a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800514c:	4835      	ldr	r0, [pc, #212]	; (8005224 <HAL_UART_MspInit+0xf8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800514e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005152:	625a      	str	r2, [r3, #36]	; 0x24
 8005154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005156:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800515a:	9200      	str	r2, [sp, #0]
 800515c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800515e:	69da      	ldr	r2, [r3, #28]
 8005160:	f042 0201 	orr.w	r2, r2, #1
 8005164:	61da      	str	r2, [r3, #28]
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	9301      	str	r3, [sp, #4]
 800516e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005170:	230c      	movs	r3, #12
 8005172:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005174:	2302      	movs	r3, #2
 8005176:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005178:	2301      	movs	r3, #1
 800517a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800517c:	2303      	movs	r3, #3
 800517e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005180:	2307      	movs	r3, #7
 8005182:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005184:	f7fc fb72 	bl	800186c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005188:	2200      	movs	r2, #0
 800518a:	2026      	movs	r0, #38	; 0x26
 800518c:	4611      	mov	r1, r2
 800518e:	f7fc fa33 	bl	80015f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005192:	2026      	movs	r0, #38	; 0x26
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005194:	f7fc fa64 	bl	8001660 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005198:	b00b      	add	sp, #44	; 0x2c
 800519a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(uartHandle->Instance==USART3)
 800519c:	4a22      	ldr	r2, [pc, #136]	; (8005228 <HAL_UART_MspInit+0xfc>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d1fa      	bne.n	8005198 <HAL_UART_MspInit+0x6c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80051a2:	4b1f      	ldr	r3, [pc, #124]	; (8005220 <HAL_UART_MspInit+0xf4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a4:	2702      	movs	r7, #2
    __HAL_RCC_USART3_CLK_ENABLE();
 80051a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051a8:	2601      	movs	r6, #1
    __HAL_RCC_USART3_CLK_ENABLE();
 80051aa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80051ae:	625a      	str	r2, [r3, #36]	; 0x24
 80051b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051b2:	2503      	movs	r5, #3
    __HAL_RCC_USART3_CLK_ENABLE();
 80051b4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80051b8:	9202      	str	r2, [sp, #8]
 80051ba:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051bc:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80051be:	2407      	movs	r4, #7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051c0:	f042 0202 	orr.w	r2, r2, #2
 80051c4:	61da      	str	r2, [r3, #28]
 80051c6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051c8:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051ca:	f002 0202 	and.w	r2, r2, #2
 80051ce:	9203      	str	r2, [sp, #12]
 80051d0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051d2:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051d4:	4815      	ldr	r0, [pc, #84]	; (800522c <HAL_UART_MspInit+0x100>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051d6:	f042 0204 	orr.w	r2, r2, #4
 80051da:	61da      	str	r2, [r3, #28]
 80051dc:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051de:	9706      	str	r7, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	9304      	str	r3, [sp, #16]
 80051e6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80051e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051ec:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80051ee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051f0:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80051f2:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051f4:	f7fc fb3a 	bl	800186c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80051f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051fc:	a905      	add	r1, sp, #20
 80051fe:	480c      	ldr	r0, [pc, #48]	; (8005230 <HAL_UART_MspInit+0x104>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005200:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005202:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005204:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005206:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005208:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800520a:	f7fc fb2f 	bl	800186c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800520e:	2200      	movs	r2, #0
 8005210:	2027      	movs	r0, #39	; 0x27
 8005212:	4611      	mov	r1, r2
 8005214:	f7fc f9f0 	bl	80015f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005218:	2027      	movs	r0, #39	; 0x27
 800521a:	e7bb      	b.n	8005194 <HAL_UART_MspInit+0x68>
 800521c:	40004400 	.word	0x40004400
 8005220:	40023800 	.word	0x40023800
 8005224:	40020000 	.word	0x40020000
 8005228:	40004800 	.word	0x40004800
 800522c:	40020400 	.word	0x40020400
 8005230:	40020800 	.word	0x40020800

08005234 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005234:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005236:	e003      	b.n	8005240 <LoopCopyDataInit>

08005238 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005238:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800523a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800523c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800523e:	3104      	adds	r1, #4

08005240 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005240:	480a      	ldr	r0, [pc, #40]	; (800526c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005242:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005244:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005246:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005248:	d3f6      	bcc.n	8005238 <CopyDataInit>
  ldr r2, =_sbss
 800524a:	4a0a      	ldr	r2, [pc, #40]	; (8005274 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800524c:	e002      	b.n	8005254 <LoopFillZerobss>

0800524e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800524e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005250:	f842 3b04 	str.w	r3, [r2], #4

08005254 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005254:	4b08      	ldr	r3, [pc, #32]	; (8005278 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005256:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005258:	d3f9      	bcc.n	800524e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800525a:	f7ff feeb 	bl	8005034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800525e:	f000 f815 	bl	800528c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005262:	f7ff fd21 	bl	8004ca8 <main>
  bx lr
 8005266:	4770      	bx	lr
  ldr r3, =_sidata
 8005268:	08005c6c 	.word	0x08005c6c
  ldr r0, =_sdata
 800526c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005270:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8005274:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8005278:	200007ac 	.word	0x200007ac

0800527c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800527c:	e7fe      	b.n	800527c <ADC1_IRQHandler>
	...

08005280 <__errno>:
 8005280:	4b01      	ldr	r3, [pc, #4]	; (8005288 <__errno+0x8>)
 8005282:	6818      	ldr	r0, [r3, #0]
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	20000014 	.word	0x20000014

0800528c <__libc_init_array>:
 800528c:	b570      	push	{r4, r5, r6, lr}
 800528e:	2500      	movs	r5, #0
 8005290:	4e0c      	ldr	r6, [pc, #48]	; (80052c4 <__libc_init_array+0x38>)
 8005292:	4c0d      	ldr	r4, [pc, #52]	; (80052c8 <__libc_init_array+0x3c>)
 8005294:	1ba4      	subs	r4, r4, r6
 8005296:	10a4      	asrs	r4, r4, #2
 8005298:	42a5      	cmp	r5, r4
 800529a:	d109      	bne.n	80052b0 <__libc_init_array+0x24>
 800529c:	f000 fc88 	bl	8005bb0 <_init>
 80052a0:	2500      	movs	r5, #0
 80052a2:	4e0a      	ldr	r6, [pc, #40]	; (80052cc <__libc_init_array+0x40>)
 80052a4:	4c0a      	ldr	r4, [pc, #40]	; (80052d0 <__libc_init_array+0x44>)
 80052a6:	1ba4      	subs	r4, r4, r6
 80052a8:	10a4      	asrs	r4, r4, #2
 80052aa:	42a5      	cmp	r5, r4
 80052ac:	d105      	bne.n	80052ba <__libc_init_array+0x2e>
 80052ae:	bd70      	pop	{r4, r5, r6, pc}
 80052b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052b4:	4798      	blx	r3
 80052b6:	3501      	adds	r5, #1
 80052b8:	e7ee      	b.n	8005298 <__libc_init_array+0xc>
 80052ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052be:	4798      	blx	r3
 80052c0:	3501      	adds	r5, #1
 80052c2:	e7f2      	b.n	80052aa <__libc_init_array+0x1e>
 80052c4:	08005c64 	.word	0x08005c64
 80052c8:	08005c64 	.word	0x08005c64
 80052cc:	08005c64 	.word	0x08005c64
 80052d0:	08005c68 	.word	0x08005c68

080052d4 <memset>:
 80052d4:	4603      	mov	r3, r0
 80052d6:	4402      	add	r2, r0
 80052d8:	4293      	cmp	r3, r2
 80052da:	d100      	bne.n	80052de <memset+0xa>
 80052dc:	4770      	bx	lr
 80052de:	f803 1b01 	strb.w	r1, [r3], #1
 80052e2:	e7f9      	b.n	80052d8 <memset+0x4>

080052e4 <_free_r>:
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	4605      	mov	r5, r0
 80052e8:	2900      	cmp	r1, #0
 80052ea:	d043      	beq.n	8005374 <_free_r+0x90>
 80052ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052f0:	1f0c      	subs	r4, r1, #4
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	bfb8      	it	lt
 80052f6:	18e4      	addlt	r4, r4, r3
 80052f8:	f000 f90e 	bl	8005518 <__malloc_lock>
 80052fc:	4a1e      	ldr	r2, [pc, #120]	; (8005378 <_free_r+0x94>)
 80052fe:	6813      	ldr	r3, [r2, #0]
 8005300:	4610      	mov	r0, r2
 8005302:	b933      	cbnz	r3, 8005312 <_free_r+0x2e>
 8005304:	6063      	str	r3, [r4, #4]
 8005306:	6014      	str	r4, [r2, #0]
 8005308:	4628      	mov	r0, r5
 800530a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800530e:	f000 b904 	b.w	800551a <__malloc_unlock>
 8005312:	42a3      	cmp	r3, r4
 8005314:	d90b      	bls.n	800532e <_free_r+0x4a>
 8005316:	6821      	ldr	r1, [r4, #0]
 8005318:	1862      	adds	r2, r4, r1
 800531a:	4293      	cmp	r3, r2
 800531c:	bf01      	itttt	eq
 800531e:	681a      	ldreq	r2, [r3, #0]
 8005320:	685b      	ldreq	r3, [r3, #4]
 8005322:	1852      	addeq	r2, r2, r1
 8005324:	6022      	streq	r2, [r4, #0]
 8005326:	6063      	str	r3, [r4, #4]
 8005328:	6004      	str	r4, [r0, #0]
 800532a:	e7ed      	b.n	8005308 <_free_r+0x24>
 800532c:	4613      	mov	r3, r2
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	b10a      	cbz	r2, 8005336 <_free_r+0x52>
 8005332:	42a2      	cmp	r2, r4
 8005334:	d9fa      	bls.n	800532c <_free_r+0x48>
 8005336:	6819      	ldr	r1, [r3, #0]
 8005338:	1858      	adds	r0, r3, r1
 800533a:	42a0      	cmp	r0, r4
 800533c:	d10b      	bne.n	8005356 <_free_r+0x72>
 800533e:	6820      	ldr	r0, [r4, #0]
 8005340:	4401      	add	r1, r0
 8005342:	1858      	adds	r0, r3, r1
 8005344:	4282      	cmp	r2, r0
 8005346:	6019      	str	r1, [r3, #0]
 8005348:	d1de      	bne.n	8005308 <_free_r+0x24>
 800534a:	6810      	ldr	r0, [r2, #0]
 800534c:	6852      	ldr	r2, [r2, #4]
 800534e:	4401      	add	r1, r0
 8005350:	6019      	str	r1, [r3, #0]
 8005352:	605a      	str	r2, [r3, #4]
 8005354:	e7d8      	b.n	8005308 <_free_r+0x24>
 8005356:	d902      	bls.n	800535e <_free_r+0x7a>
 8005358:	230c      	movs	r3, #12
 800535a:	602b      	str	r3, [r5, #0]
 800535c:	e7d4      	b.n	8005308 <_free_r+0x24>
 800535e:	6820      	ldr	r0, [r4, #0]
 8005360:	1821      	adds	r1, r4, r0
 8005362:	428a      	cmp	r2, r1
 8005364:	bf01      	itttt	eq
 8005366:	6811      	ldreq	r1, [r2, #0]
 8005368:	6852      	ldreq	r2, [r2, #4]
 800536a:	1809      	addeq	r1, r1, r0
 800536c:	6021      	streq	r1, [r4, #0]
 800536e:	6062      	str	r2, [r4, #4]
 8005370:	605c      	str	r4, [r3, #4]
 8005372:	e7c9      	b.n	8005308 <_free_r+0x24>
 8005374:	bd38      	pop	{r3, r4, r5, pc}
 8005376:	bf00      	nop
 8005378:	2000009c 	.word	0x2000009c

0800537c <_malloc_r>:
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	1ccd      	adds	r5, r1, #3
 8005380:	f025 0503 	bic.w	r5, r5, #3
 8005384:	3508      	adds	r5, #8
 8005386:	2d0c      	cmp	r5, #12
 8005388:	bf38      	it	cc
 800538a:	250c      	movcc	r5, #12
 800538c:	2d00      	cmp	r5, #0
 800538e:	4606      	mov	r6, r0
 8005390:	db01      	blt.n	8005396 <_malloc_r+0x1a>
 8005392:	42a9      	cmp	r1, r5
 8005394:	d903      	bls.n	800539e <_malloc_r+0x22>
 8005396:	230c      	movs	r3, #12
 8005398:	6033      	str	r3, [r6, #0]
 800539a:	2000      	movs	r0, #0
 800539c:	bd70      	pop	{r4, r5, r6, pc}
 800539e:	f000 f8bb 	bl	8005518 <__malloc_lock>
 80053a2:	4a23      	ldr	r2, [pc, #140]	; (8005430 <_malloc_r+0xb4>)
 80053a4:	6814      	ldr	r4, [r2, #0]
 80053a6:	4621      	mov	r1, r4
 80053a8:	b991      	cbnz	r1, 80053d0 <_malloc_r+0x54>
 80053aa:	4c22      	ldr	r4, [pc, #136]	; (8005434 <_malloc_r+0xb8>)
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	b91b      	cbnz	r3, 80053b8 <_malloc_r+0x3c>
 80053b0:	4630      	mov	r0, r6
 80053b2:	f000 f841 	bl	8005438 <_sbrk_r>
 80053b6:	6020      	str	r0, [r4, #0]
 80053b8:	4629      	mov	r1, r5
 80053ba:	4630      	mov	r0, r6
 80053bc:	f000 f83c 	bl	8005438 <_sbrk_r>
 80053c0:	1c43      	adds	r3, r0, #1
 80053c2:	d126      	bne.n	8005412 <_malloc_r+0x96>
 80053c4:	230c      	movs	r3, #12
 80053c6:	4630      	mov	r0, r6
 80053c8:	6033      	str	r3, [r6, #0]
 80053ca:	f000 f8a6 	bl	800551a <__malloc_unlock>
 80053ce:	e7e4      	b.n	800539a <_malloc_r+0x1e>
 80053d0:	680b      	ldr	r3, [r1, #0]
 80053d2:	1b5b      	subs	r3, r3, r5
 80053d4:	d41a      	bmi.n	800540c <_malloc_r+0x90>
 80053d6:	2b0b      	cmp	r3, #11
 80053d8:	d90f      	bls.n	80053fa <_malloc_r+0x7e>
 80053da:	600b      	str	r3, [r1, #0]
 80053dc:	18cc      	adds	r4, r1, r3
 80053de:	50cd      	str	r5, [r1, r3]
 80053e0:	4630      	mov	r0, r6
 80053e2:	f000 f89a 	bl	800551a <__malloc_unlock>
 80053e6:	f104 000b 	add.w	r0, r4, #11
 80053ea:	1d23      	adds	r3, r4, #4
 80053ec:	f020 0007 	bic.w	r0, r0, #7
 80053f0:	1ac3      	subs	r3, r0, r3
 80053f2:	d01b      	beq.n	800542c <_malloc_r+0xb0>
 80053f4:	425a      	negs	r2, r3
 80053f6:	50e2      	str	r2, [r4, r3]
 80053f8:	bd70      	pop	{r4, r5, r6, pc}
 80053fa:	428c      	cmp	r4, r1
 80053fc:	bf0b      	itete	eq
 80053fe:	6863      	ldreq	r3, [r4, #4]
 8005400:	684b      	ldrne	r3, [r1, #4]
 8005402:	6013      	streq	r3, [r2, #0]
 8005404:	6063      	strne	r3, [r4, #4]
 8005406:	bf18      	it	ne
 8005408:	460c      	movne	r4, r1
 800540a:	e7e9      	b.n	80053e0 <_malloc_r+0x64>
 800540c:	460c      	mov	r4, r1
 800540e:	6849      	ldr	r1, [r1, #4]
 8005410:	e7ca      	b.n	80053a8 <_malloc_r+0x2c>
 8005412:	1cc4      	adds	r4, r0, #3
 8005414:	f024 0403 	bic.w	r4, r4, #3
 8005418:	42a0      	cmp	r0, r4
 800541a:	d005      	beq.n	8005428 <_malloc_r+0xac>
 800541c:	1a21      	subs	r1, r4, r0
 800541e:	4630      	mov	r0, r6
 8005420:	f000 f80a 	bl	8005438 <_sbrk_r>
 8005424:	3001      	adds	r0, #1
 8005426:	d0cd      	beq.n	80053c4 <_malloc_r+0x48>
 8005428:	6025      	str	r5, [r4, #0]
 800542a:	e7d9      	b.n	80053e0 <_malloc_r+0x64>
 800542c:	bd70      	pop	{r4, r5, r6, pc}
 800542e:	bf00      	nop
 8005430:	2000009c 	.word	0x2000009c
 8005434:	200000a0 	.word	0x200000a0

08005438 <_sbrk_r>:
 8005438:	b538      	push	{r3, r4, r5, lr}
 800543a:	2300      	movs	r3, #0
 800543c:	4c05      	ldr	r4, [pc, #20]	; (8005454 <_sbrk_r+0x1c>)
 800543e:	4605      	mov	r5, r0
 8005440:	4608      	mov	r0, r1
 8005442:	6023      	str	r3, [r4, #0]
 8005444:	f7ff fddc 	bl	8005000 <_sbrk>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d102      	bne.n	8005452 <_sbrk_r+0x1a>
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	b103      	cbz	r3, 8005452 <_sbrk_r+0x1a>
 8005450:	602b      	str	r3, [r5, #0]
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	200007a8 	.word	0x200007a8

08005458 <sniprintf>:
 8005458:	b40c      	push	{r2, r3}
 800545a:	b530      	push	{r4, r5, lr}
 800545c:	4b17      	ldr	r3, [pc, #92]	; (80054bc <sniprintf+0x64>)
 800545e:	1e0c      	subs	r4, r1, #0
 8005460:	b09d      	sub	sp, #116	; 0x74
 8005462:	681d      	ldr	r5, [r3, #0]
 8005464:	da08      	bge.n	8005478 <sniprintf+0x20>
 8005466:	238b      	movs	r3, #139	; 0x8b
 8005468:	f04f 30ff 	mov.w	r0, #4294967295
 800546c:	602b      	str	r3, [r5, #0]
 800546e:	b01d      	add	sp, #116	; 0x74
 8005470:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005474:	b002      	add	sp, #8
 8005476:	4770      	bx	lr
 8005478:	f44f 7302 	mov.w	r3, #520	; 0x208
 800547c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005480:	bf0c      	ite	eq
 8005482:	4623      	moveq	r3, r4
 8005484:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005488:	9304      	str	r3, [sp, #16]
 800548a:	9307      	str	r3, [sp, #28]
 800548c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005490:	9002      	str	r0, [sp, #8]
 8005492:	9006      	str	r0, [sp, #24]
 8005494:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005498:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800549a:	ab21      	add	r3, sp, #132	; 0x84
 800549c:	a902      	add	r1, sp, #8
 800549e:	4628      	mov	r0, r5
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	f000 f897 	bl	80055d4 <_svfiprintf_r>
 80054a6:	1c43      	adds	r3, r0, #1
 80054a8:	bfbc      	itt	lt
 80054aa:	238b      	movlt	r3, #139	; 0x8b
 80054ac:	602b      	strlt	r3, [r5, #0]
 80054ae:	2c00      	cmp	r4, #0
 80054b0:	d0dd      	beq.n	800546e <sniprintf+0x16>
 80054b2:	2200      	movs	r2, #0
 80054b4:	9b02      	ldr	r3, [sp, #8]
 80054b6:	701a      	strb	r2, [r3, #0]
 80054b8:	e7d9      	b.n	800546e <sniprintf+0x16>
 80054ba:	bf00      	nop
 80054bc:	20000014 	.word	0x20000014

080054c0 <siprintf>:
 80054c0:	b40e      	push	{r1, r2, r3}
 80054c2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80054c6:	b500      	push	{lr}
 80054c8:	b09c      	sub	sp, #112	; 0x70
 80054ca:	f8ad 1014 	strh.w	r1, [sp, #20]
 80054ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054d2:	9104      	str	r1, [sp, #16]
 80054d4:	9107      	str	r1, [sp, #28]
 80054d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80054da:	ab1d      	add	r3, sp, #116	; 0x74
 80054dc:	9002      	str	r0, [sp, #8]
 80054de:	9006      	str	r0, [sp, #24]
 80054e0:	4808      	ldr	r0, [pc, #32]	; (8005504 <siprintf+0x44>)
 80054e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80054e6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80054ea:	6800      	ldr	r0, [r0, #0]
 80054ec:	a902      	add	r1, sp, #8
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	f000 f870 	bl	80055d4 <_svfiprintf_r>
 80054f4:	2200      	movs	r2, #0
 80054f6:	9b02      	ldr	r3, [sp, #8]
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	b01c      	add	sp, #112	; 0x70
 80054fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005500:	b003      	add	sp, #12
 8005502:	4770      	bx	lr
 8005504:	20000014 	.word	0x20000014

08005508 <strcpy>:
 8005508:	4603      	mov	r3, r0
 800550a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800550e:	f803 2b01 	strb.w	r2, [r3], #1
 8005512:	2a00      	cmp	r2, #0
 8005514:	d1f9      	bne.n	800550a <strcpy+0x2>
 8005516:	4770      	bx	lr

08005518 <__malloc_lock>:
 8005518:	4770      	bx	lr

0800551a <__malloc_unlock>:
 800551a:	4770      	bx	lr

0800551c <__ssputs_r>:
 800551c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005520:	688e      	ldr	r6, [r1, #8]
 8005522:	4682      	mov	sl, r0
 8005524:	429e      	cmp	r6, r3
 8005526:	460c      	mov	r4, r1
 8005528:	4691      	mov	r9, r2
 800552a:	4698      	mov	r8, r3
 800552c:	d835      	bhi.n	800559a <__ssputs_r+0x7e>
 800552e:	898a      	ldrh	r2, [r1, #12]
 8005530:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005534:	d031      	beq.n	800559a <__ssputs_r+0x7e>
 8005536:	2302      	movs	r3, #2
 8005538:	6825      	ldr	r5, [r4, #0]
 800553a:	6909      	ldr	r1, [r1, #16]
 800553c:	1a6f      	subs	r7, r5, r1
 800553e:	6965      	ldr	r5, [r4, #20]
 8005540:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005544:	fb95 f5f3 	sdiv	r5, r5, r3
 8005548:	f108 0301 	add.w	r3, r8, #1
 800554c:	443b      	add	r3, r7
 800554e:	429d      	cmp	r5, r3
 8005550:	bf38      	it	cc
 8005552:	461d      	movcc	r5, r3
 8005554:	0553      	lsls	r3, r2, #21
 8005556:	d531      	bpl.n	80055bc <__ssputs_r+0xa0>
 8005558:	4629      	mov	r1, r5
 800555a:	f7ff ff0f 	bl	800537c <_malloc_r>
 800555e:	4606      	mov	r6, r0
 8005560:	b950      	cbnz	r0, 8005578 <__ssputs_r+0x5c>
 8005562:	230c      	movs	r3, #12
 8005564:	f8ca 3000 	str.w	r3, [sl]
 8005568:	89a3      	ldrh	r3, [r4, #12]
 800556a:	f04f 30ff 	mov.w	r0, #4294967295
 800556e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005572:	81a3      	strh	r3, [r4, #12]
 8005574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005578:	463a      	mov	r2, r7
 800557a:	6921      	ldr	r1, [r4, #16]
 800557c:	f000 fac4 	bl	8005b08 <memcpy>
 8005580:	89a3      	ldrh	r3, [r4, #12]
 8005582:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800558a:	81a3      	strh	r3, [r4, #12]
 800558c:	6126      	str	r6, [r4, #16]
 800558e:	443e      	add	r6, r7
 8005590:	6026      	str	r6, [r4, #0]
 8005592:	4646      	mov	r6, r8
 8005594:	6165      	str	r5, [r4, #20]
 8005596:	1bed      	subs	r5, r5, r7
 8005598:	60a5      	str	r5, [r4, #8]
 800559a:	4546      	cmp	r6, r8
 800559c:	bf28      	it	cs
 800559e:	4646      	movcs	r6, r8
 80055a0:	4649      	mov	r1, r9
 80055a2:	4632      	mov	r2, r6
 80055a4:	6820      	ldr	r0, [r4, #0]
 80055a6:	f000 faba 	bl	8005b1e <memmove>
 80055aa:	68a3      	ldr	r3, [r4, #8]
 80055ac:	2000      	movs	r0, #0
 80055ae:	1b9b      	subs	r3, r3, r6
 80055b0:	60a3      	str	r3, [r4, #8]
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	441e      	add	r6, r3
 80055b6:	6026      	str	r6, [r4, #0]
 80055b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055bc:	462a      	mov	r2, r5
 80055be:	f000 fac8 	bl	8005b52 <_realloc_r>
 80055c2:	4606      	mov	r6, r0
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d1e1      	bne.n	800558c <__ssputs_r+0x70>
 80055c8:	6921      	ldr	r1, [r4, #16]
 80055ca:	4650      	mov	r0, sl
 80055cc:	f7ff fe8a 	bl	80052e4 <_free_r>
 80055d0:	e7c7      	b.n	8005562 <__ssputs_r+0x46>
	...

080055d4 <_svfiprintf_r>:
 80055d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d8:	b09d      	sub	sp, #116	; 0x74
 80055da:	9303      	str	r3, [sp, #12]
 80055dc:	898b      	ldrh	r3, [r1, #12]
 80055de:	4680      	mov	r8, r0
 80055e0:	061c      	lsls	r4, r3, #24
 80055e2:	460d      	mov	r5, r1
 80055e4:	4616      	mov	r6, r2
 80055e6:	d50f      	bpl.n	8005608 <_svfiprintf_r+0x34>
 80055e8:	690b      	ldr	r3, [r1, #16]
 80055ea:	b96b      	cbnz	r3, 8005608 <_svfiprintf_r+0x34>
 80055ec:	2140      	movs	r1, #64	; 0x40
 80055ee:	f7ff fec5 	bl	800537c <_malloc_r>
 80055f2:	6028      	str	r0, [r5, #0]
 80055f4:	6128      	str	r0, [r5, #16]
 80055f6:	b928      	cbnz	r0, 8005604 <_svfiprintf_r+0x30>
 80055f8:	230c      	movs	r3, #12
 80055fa:	f8c8 3000 	str.w	r3, [r8]
 80055fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005602:	e0c4      	b.n	800578e <_svfiprintf_r+0x1ba>
 8005604:	2340      	movs	r3, #64	; 0x40
 8005606:	616b      	str	r3, [r5, #20]
 8005608:	2300      	movs	r3, #0
 800560a:	9309      	str	r3, [sp, #36]	; 0x24
 800560c:	2320      	movs	r3, #32
 800560e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005612:	2330      	movs	r3, #48	; 0x30
 8005614:	f04f 0b01 	mov.w	fp, #1
 8005618:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800561c:	4637      	mov	r7, r6
 800561e:	463c      	mov	r4, r7
 8005620:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d13c      	bne.n	80056a2 <_svfiprintf_r+0xce>
 8005628:	ebb7 0a06 	subs.w	sl, r7, r6
 800562c:	d00b      	beq.n	8005646 <_svfiprintf_r+0x72>
 800562e:	4653      	mov	r3, sl
 8005630:	4632      	mov	r2, r6
 8005632:	4629      	mov	r1, r5
 8005634:	4640      	mov	r0, r8
 8005636:	f7ff ff71 	bl	800551c <__ssputs_r>
 800563a:	3001      	adds	r0, #1
 800563c:	f000 80a2 	beq.w	8005784 <_svfiprintf_r+0x1b0>
 8005640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005642:	4453      	add	r3, sl
 8005644:	9309      	str	r3, [sp, #36]	; 0x24
 8005646:	783b      	ldrb	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 809b 	beq.w	8005784 <_svfiprintf_r+0x1b0>
 800564e:	2300      	movs	r3, #0
 8005650:	f04f 32ff 	mov.w	r2, #4294967295
 8005654:	9304      	str	r3, [sp, #16]
 8005656:	9307      	str	r3, [sp, #28]
 8005658:	9205      	str	r2, [sp, #20]
 800565a:	9306      	str	r3, [sp, #24]
 800565c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005660:	931a      	str	r3, [sp, #104]	; 0x68
 8005662:	2205      	movs	r2, #5
 8005664:	7821      	ldrb	r1, [r4, #0]
 8005666:	4850      	ldr	r0, [pc, #320]	; (80057a8 <_svfiprintf_r+0x1d4>)
 8005668:	f000 fa40 	bl	8005aec <memchr>
 800566c:	1c67      	adds	r7, r4, #1
 800566e:	9b04      	ldr	r3, [sp, #16]
 8005670:	b9d8      	cbnz	r0, 80056aa <_svfiprintf_r+0xd6>
 8005672:	06d9      	lsls	r1, r3, #27
 8005674:	bf44      	itt	mi
 8005676:	2220      	movmi	r2, #32
 8005678:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800567c:	071a      	lsls	r2, r3, #28
 800567e:	bf44      	itt	mi
 8005680:	222b      	movmi	r2, #43	; 0x2b
 8005682:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005686:	7822      	ldrb	r2, [r4, #0]
 8005688:	2a2a      	cmp	r2, #42	; 0x2a
 800568a:	d016      	beq.n	80056ba <_svfiprintf_r+0xe6>
 800568c:	2100      	movs	r1, #0
 800568e:	200a      	movs	r0, #10
 8005690:	9a07      	ldr	r2, [sp, #28]
 8005692:	4627      	mov	r7, r4
 8005694:	783b      	ldrb	r3, [r7, #0]
 8005696:	3401      	adds	r4, #1
 8005698:	3b30      	subs	r3, #48	; 0x30
 800569a:	2b09      	cmp	r3, #9
 800569c:	d950      	bls.n	8005740 <_svfiprintf_r+0x16c>
 800569e:	b1c9      	cbz	r1, 80056d4 <_svfiprintf_r+0x100>
 80056a0:	e011      	b.n	80056c6 <_svfiprintf_r+0xf2>
 80056a2:	2b25      	cmp	r3, #37	; 0x25
 80056a4:	d0c0      	beq.n	8005628 <_svfiprintf_r+0x54>
 80056a6:	4627      	mov	r7, r4
 80056a8:	e7b9      	b.n	800561e <_svfiprintf_r+0x4a>
 80056aa:	4a3f      	ldr	r2, [pc, #252]	; (80057a8 <_svfiprintf_r+0x1d4>)
 80056ac:	463c      	mov	r4, r7
 80056ae:	1a80      	subs	r0, r0, r2
 80056b0:	fa0b f000 	lsl.w	r0, fp, r0
 80056b4:	4318      	orrs	r0, r3
 80056b6:	9004      	str	r0, [sp, #16]
 80056b8:	e7d3      	b.n	8005662 <_svfiprintf_r+0x8e>
 80056ba:	9a03      	ldr	r2, [sp, #12]
 80056bc:	1d11      	adds	r1, r2, #4
 80056be:	6812      	ldr	r2, [r2, #0]
 80056c0:	9103      	str	r1, [sp, #12]
 80056c2:	2a00      	cmp	r2, #0
 80056c4:	db01      	blt.n	80056ca <_svfiprintf_r+0xf6>
 80056c6:	9207      	str	r2, [sp, #28]
 80056c8:	e004      	b.n	80056d4 <_svfiprintf_r+0x100>
 80056ca:	4252      	negs	r2, r2
 80056cc:	f043 0302 	orr.w	r3, r3, #2
 80056d0:	9207      	str	r2, [sp, #28]
 80056d2:	9304      	str	r3, [sp, #16]
 80056d4:	783b      	ldrb	r3, [r7, #0]
 80056d6:	2b2e      	cmp	r3, #46	; 0x2e
 80056d8:	d10d      	bne.n	80056f6 <_svfiprintf_r+0x122>
 80056da:	787b      	ldrb	r3, [r7, #1]
 80056dc:	1c79      	adds	r1, r7, #1
 80056de:	2b2a      	cmp	r3, #42	; 0x2a
 80056e0:	d132      	bne.n	8005748 <_svfiprintf_r+0x174>
 80056e2:	9b03      	ldr	r3, [sp, #12]
 80056e4:	3702      	adds	r7, #2
 80056e6:	1d1a      	adds	r2, r3, #4
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	9203      	str	r2, [sp, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bfb8      	it	lt
 80056f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80056f4:	9305      	str	r3, [sp, #20]
 80056f6:	4c2d      	ldr	r4, [pc, #180]	; (80057ac <_svfiprintf_r+0x1d8>)
 80056f8:	2203      	movs	r2, #3
 80056fa:	7839      	ldrb	r1, [r7, #0]
 80056fc:	4620      	mov	r0, r4
 80056fe:	f000 f9f5 	bl	8005aec <memchr>
 8005702:	b138      	cbz	r0, 8005714 <_svfiprintf_r+0x140>
 8005704:	2340      	movs	r3, #64	; 0x40
 8005706:	1b00      	subs	r0, r0, r4
 8005708:	fa03 f000 	lsl.w	r0, r3, r0
 800570c:	9b04      	ldr	r3, [sp, #16]
 800570e:	3701      	adds	r7, #1
 8005710:	4303      	orrs	r3, r0
 8005712:	9304      	str	r3, [sp, #16]
 8005714:	7839      	ldrb	r1, [r7, #0]
 8005716:	2206      	movs	r2, #6
 8005718:	4825      	ldr	r0, [pc, #148]	; (80057b0 <_svfiprintf_r+0x1dc>)
 800571a:	1c7e      	adds	r6, r7, #1
 800571c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005720:	f000 f9e4 	bl	8005aec <memchr>
 8005724:	2800      	cmp	r0, #0
 8005726:	d035      	beq.n	8005794 <_svfiprintf_r+0x1c0>
 8005728:	4b22      	ldr	r3, [pc, #136]	; (80057b4 <_svfiprintf_r+0x1e0>)
 800572a:	b9fb      	cbnz	r3, 800576c <_svfiprintf_r+0x198>
 800572c:	9b03      	ldr	r3, [sp, #12]
 800572e:	3307      	adds	r3, #7
 8005730:	f023 0307 	bic.w	r3, r3, #7
 8005734:	3308      	adds	r3, #8
 8005736:	9303      	str	r3, [sp, #12]
 8005738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800573a:	444b      	add	r3, r9
 800573c:	9309      	str	r3, [sp, #36]	; 0x24
 800573e:	e76d      	b.n	800561c <_svfiprintf_r+0x48>
 8005740:	fb00 3202 	mla	r2, r0, r2, r3
 8005744:	2101      	movs	r1, #1
 8005746:	e7a4      	b.n	8005692 <_svfiprintf_r+0xbe>
 8005748:	2300      	movs	r3, #0
 800574a:	240a      	movs	r4, #10
 800574c:	4618      	mov	r0, r3
 800574e:	9305      	str	r3, [sp, #20]
 8005750:	460f      	mov	r7, r1
 8005752:	783a      	ldrb	r2, [r7, #0]
 8005754:	3101      	adds	r1, #1
 8005756:	3a30      	subs	r2, #48	; 0x30
 8005758:	2a09      	cmp	r2, #9
 800575a:	d903      	bls.n	8005764 <_svfiprintf_r+0x190>
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0ca      	beq.n	80056f6 <_svfiprintf_r+0x122>
 8005760:	9005      	str	r0, [sp, #20]
 8005762:	e7c8      	b.n	80056f6 <_svfiprintf_r+0x122>
 8005764:	fb04 2000 	mla	r0, r4, r0, r2
 8005768:	2301      	movs	r3, #1
 800576a:	e7f1      	b.n	8005750 <_svfiprintf_r+0x17c>
 800576c:	ab03      	add	r3, sp, #12
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	462a      	mov	r2, r5
 8005772:	4b11      	ldr	r3, [pc, #68]	; (80057b8 <_svfiprintf_r+0x1e4>)
 8005774:	a904      	add	r1, sp, #16
 8005776:	4640      	mov	r0, r8
 8005778:	f3af 8000 	nop.w
 800577c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005780:	4681      	mov	r9, r0
 8005782:	d1d9      	bne.n	8005738 <_svfiprintf_r+0x164>
 8005784:	89ab      	ldrh	r3, [r5, #12]
 8005786:	065b      	lsls	r3, r3, #25
 8005788:	f53f af39 	bmi.w	80055fe <_svfiprintf_r+0x2a>
 800578c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800578e:	b01d      	add	sp, #116	; 0x74
 8005790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005794:	ab03      	add	r3, sp, #12
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	462a      	mov	r2, r5
 800579a:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <_svfiprintf_r+0x1e4>)
 800579c:	a904      	add	r1, sp, #16
 800579e:	4640      	mov	r0, r8
 80057a0:	f000 f884 	bl	80058ac <_printf_i>
 80057a4:	e7ea      	b.n	800577c <_svfiprintf_r+0x1a8>
 80057a6:	bf00      	nop
 80057a8:	08005c31 	.word	0x08005c31
 80057ac:	08005c37 	.word	0x08005c37
 80057b0:	08005c3b 	.word	0x08005c3b
 80057b4:	00000000 	.word	0x00000000
 80057b8:	0800551d 	.word	0x0800551d

080057bc <_printf_common>:
 80057bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c0:	4691      	mov	r9, r2
 80057c2:	461f      	mov	r7, r3
 80057c4:	688a      	ldr	r2, [r1, #8]
 80057c6:	690b      	ldr	r3, [r1, #16]
 80057c8:	4606      	mov	r6, r0
 80057ca:	4293      	cmp	r3, r2
 80057cc:	bfb8      	it	lt
 80057ce:	4613      	movlt	r3, r2
 80057d0:	f8c9 3000 	str.w	r3, [r9]
 80057d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057d8:	460c      	mov	r4, r1
 80057da:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057de:	b112      	cbz	r2, 80057e6 <_printf_common+0x2a>
 80057e0:	3301      	adds	r3, #1
 80057e2:	f8c9 3000 	str.w	r3, [r9]
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	0699      	lsls	r1, r3, #26
 80057ea:	bf42      	ittt	mi
 80057ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80057f0:	3302      	addmi	r3, #2
 80057f2:	f8c9 3000 	strmi.w	r3, [r9]
 80057f6:	6825      	ldr	r5, [r4, #0]
 80057f8:	f015 0506 	ands.w	r5, r5, #6
 80057fc:	d107      	bne.n	800580e <_printf_common+0x52>
 80057fe:	f104 0a19 	add.w	sl, r4, #25
 8005802:	68e3      	ldr	r3, [r4, #12]
 8005804:	f8d9 2000 	ldr.w	r2, [r9]
 8005808:	1a9b      	subs	r3, r3, r2
 800580a:	429d      	cmp	r5, r3
 800580c:	db2a      	blt.n	8005864 <_printf_common+0xa8>
 800580e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005812:	6822      	ldr	r2, [r4, #0]
 8005814:	3300      	adds	r3, #0
 8005816:	bf18      	it	ne
 8005818:	2301      	movne	r3, #1
 800581a:	0692      	lsls	r2, r2, #26
 800581c:	d42f      	bmi.n	800587e <_printf_common+0xc2>
 800581e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005822:	4639      	mov	r1, r7
 8005824:	4630      	mov	r0, r6
 8005826:	47c0      	blx	r8
 8005828:	3001      	adds	r0, #1
 800582a:	d022      	beq.n	8005872 <_printf_common+0xb6>
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	68e5      	ldr	r5, [r4, #12]
 8005830:	f003 0306 	and.w	r3, r3, #6
 8005834:	2b04      	cmp	r3, #4
 8005836:	bf18      	it	ne
 8005838:	2500      	movne	r5, #0
 800583a:	f8d9 2000 	ldr.w	r2, [r9]
 800583e:	f04f 0900 	mov.w	r9, #0
 8005842:	bf08      	it	eq
 8005844:	1aad      	subeq	r5, r5, r2
 8005846:	68a3      	ldr	r3, [r4, #8]
 8005848:	6922      	ldr	r2, [r4, #16]
 800584a:	bf08      	it	eq
 800584c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005850:	4293      	cmp	r3, r2
 8005852:	bfc4      	itt	gt
 8005854:	1a9b      	subgt	r3, r3, r2
 8005856:	18ed      	addgt	r5, r5, r3
 8005858:	341a      	adds	r4, #26
 800585a:	454d      	cmp	r5, r9
 800585c:	d11b      	bne.n	8005896 <_printf_common+0xda>
 800585e:	2000      	movs	r0, #0
 8005860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005864:	2301      	movs	r3, #1
 8005866:	4652      	mov	r2, sl
 8005868:	4639      	mov	r1, r7
 800586a:	4630      	mov	r0, r6
 800586c:	47c0      	blx	r8
 800586e:	3001      	adds	r0, #1
 8005870:	d103      	bne.n	800587a <_printf_common+0xbe>
 8005872:	f04f 30ff 	mov.w	r0, #4294967295
 8005876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800587a:	3501      	adds	r5, #1
 800587c:	e7c1      	b.n	8005802 <_printf_common+0x46>
 800587e:	2030      	movs	r0, #48	; 0x30
 8005880:	18e1      	adds	r1, r4, r3
 8005882:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800588c:	4422      	add	r2, r4
 800588e:	3302      	adds	r3, #2
 8005890:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005894:	e7c3      	b.n	800581e <_printf_common+0x62>
 8005896:	2301      	movs	r3, #1
 8005898:	4622      	mov	r2, r4
 800589a:	4639      	mov	r1, r7
 800589c:	4630      	mov	r0, r6
 800589e:	47c0      	blx	r8
 80058a0:	3001      	adds	r0, #1
 80058a2:	d0e6      	beq.n	8005872 <_printf_common+0xb6>
 80058a4:	f109 0901 	add.w	r9, r9, #1
 80058a8:	e7d7      	b.n	800585a <_printf_common+0x9e>
	...

080058ac <_printf_i>:
 80058ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058b0:	4617      	mov	r7, r2
 80058b2:	7e0a      	ldrb	r2, [r1, #24]
 80058b4:	b085      	sub	sp, #20
 80058b6:	2a6e      	cmp	r2, #110	; 0x6e
 80058b8:	4698      	mov	r8, r3
 80058ba:	4606      	mov	r6, r0
 80058bc:	460c      	mov	r4, r1
 80058be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058c0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80058c4:	f000 80bc 	beq.w	8005a40 <_printf_i+0x194>
 80058c8:	d81a      	bhi.n	8005900 <_printf_i+0x54>
 80058ca:	2a63      	cmp	r2, #99	; 0x63
 80058cc:	d02e      	beq.n	800592c <_printf_i+0x80>
 80058ce:	d80a      	bhi.n	80058e6 <_printf_i+0x3a>
 80058d0:	2a00      	cmp	r2, #0
 80058d2:	f000 80c8 	beq.w	8005a66 <_printf_i+0x1ba>
 80058d6:	2a58      	cmp	r2, #88	; 0x58
 80058d8:	f000 808a 	beq.w	80059f0 <_printf_i+0x144>
 80058dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058e0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80058e4:	e02a      	b.n	800593c <_printf_i+0x90>
 80058e6:	2a64      	cmp	r2, #100	; 0x64
 80058e8:	d001      	beq.n	80058ee <_printf_i+0x42>
 80058ea:	2a69      	cmp	r2, #105	; 0x69
 80058ec:	d1f6      	bne.n	80058dc <_printf_i+0x30>
 80058ee:	6821      	ldr	r1, [r4, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80058f6:	d023      	beq.n	8005940 <_printf_i+0x94>
 80058f8:	1d11      	adds	r1, r2, #4
 80058fa:	6019      	str	r1, [r3, #0]
 80058fc:	6813      	ldr	r3, [r2, #0]
 80058fe:	e027      	b.n	8005950 <_printf_i+0xa4>
 8005900:	2a73      	cmp	r2, #115	; 0x73
 8005902:	f000 80b4 	beq.w	8005a6e <_printf_i+0x1c2>
 8005906:	d808      	bhi.n	800591a <_printf_i+0x6e>
 8005908:	2a6f      	cmp	r2, #111	; 0x6f
 800590a:	d02a      	beq.n	8005962 <_printf_i+0xb6>
 800590c:	2a70      	cmp	r2, #112	; 0x70
 800590e:	d1e5      	bne.n	80058dc <_printf_i+0x30>
 8005910:	680a      	ldr	r2, [r1, #0]
 8005912:	f042 0220 	orr.w	r2, r2, #32
 8005916:	600a      	str	r2, [r1, #0]
 8005918:	e003      	b.n	8005922 <_printf_i+0x76>
 800591a:	2a75      	cmp	r2, #117	; 0x75
 800591c:	d021      	beq.n	8005962 <_printf_i+0xb6>
 800591e:	2a78      	cmp	r2, #120	; 0x78
 8005920:	d1dc      	bne.n	80058dc <_printf_i+0x30>
 8005922:	2278      	movs	r2, #120	; 0x78
 8005924:	496f      	ldr	r1, [pc, #444]	; (8005ae4 <_printf_i+0x238>)
 8005926:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800592a:	e064      	b.n	80059f6 <_printf_i+0x14a>
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005932:	1d11      	adds	r1, r2, #4
 8005934:	6019      	str	r1, [r3, #0]
 8005936:	6813      	ldr	r3, [r2, #0]
 8005938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800593c:	2301      	movs	r3, #1
 800593e:	e0a3      	b.n	8005a88 <_printf_i+0x1dc>
 8005940:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005944:	f102 0104 	add.w	r1, r2, #4
 8005948:	6019      	str	r1, [r3, #0]
 800594a:	d0d7      	beq.n	80058fc <_printf_i+0x50>
 800594c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005950:	2b00      	cmp	r3, #0
 8005952:	da03      	bge.n	800595c <_printf_i+0xb0>
 8005954:	222d      	movs	r2, #45	; 0x2d
 8005956:	425b      	negs	r3, r3
 8005958:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800595c:	4962      	ldr	r1, [pc, #392]	; (8005ae8 <_printf_i+0x23c>)
 800595e:	220a      	movs	r2, #10
 8005960:	e017      	b.n	8005992 <_printf_i+0xe6>
 8005962:	6820      	ldr	r0, [r4, #0]
 8005964:	6819      	ldr	r1, [r3, #0]
 8005966:	f010 0f80 	tst.w	r0, #128	; 0x80
 800596a:	d003      	beq.n	8005974 <_printf_i+0xc8>
 800596c:	1d08      	adds	r0, r1, #4
 800596e:	6018      	str	r0, [r3, #0]
 8005970:	680b      	ldr	r3, [r1, #0]
 8005972:	e006      	b.n	8005982 <_printf_i+0xd6>
 8005974:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005978:	f101 0004 	add.w	r0, r1, #4
 800597c:	6018      	str	r0, [r3, #0]
 800597e:	d0f7      	beq.n	8005970 <_printf_i+0xc4>
 8005980:	880b      	ldrh	r3, [r1, #0]
 8005982:	2a6f      	cmp	r2, #111	; 0x6f
 8005984:	bf14      	ite	ne
 8005986:	220a      	movne	r2, #10
 8005988:	2208      	moveq	r2, #8
 800598a:	4957      	ldr	r1, [pc, #348]	; (8005ae8 <_printf_i+0x23c>)
 800598c:	2000      	movs	r0, #0
 800598e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005992:	6865      	ldr	r5, [r4, #4]
 8005994:	2d00      	cmp	r5, #0
 8005996:	60a5      	str	r5, [r4, #8]
 8005998:	f2c0 809c 	blt.w	8005ad4 <_printf_i+0x228>
 800599c:	6820      	ldr	r0, [r4, #0]
 800599e:	f020 0004 	bic.w	r0, r0, #4
 80059a2:	6020      	str	r0, [r4, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d13f      	bne.n	8005a28 <_printf_i+0x17c>
 80059a8:	2d00      	cmp	r5, #0
 80059aa:	f040 8095 	bne.w	8005ad8 <_printf_i+0x22c>
 80059ae:	4675      	mov	r5, lr
 80059b0:	2a08      	cmp	r2, #8
 80059b2:	d10b      	bne.n	80059cc <_printf_i+0x120>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	07da      	lsls	r2, r3, #31
 80059b8:	d508      	bpl.n	80059cc <_printf_i+0x120>
 80059ba:	6923      	ldr	r3, [r4, #16]
 80059bc:	6862      	ldr	r2, [r4, #4]
 80059be:	429a      	cmp	r2, r3
 80059c0:	bfde      	ittt	le
 80059c2:	2330      	movle	r3, #48	; 0x30
 80059c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059cc:	ebae 0305 	sub.w	r3, lr, r5
 80059d0:	6123      	str	r3, [r4, #16]
 80059d2:	f8cd 8000 	str.w	r8, [sp]
 80059d6:	463b      	mov	r3, r7
 80059d8:	aa03      	add	r2, sp, #12
 80059da:	4621      	mov	r1, r4
 80059dc:	4630      	mov	r0, r6
 80059de:	f7ff feed 	bl	80057bc <_printf_common>
 80059e2:	3001      	adds	r0, #1
 80059e4:	d155      	bne.n	8005a92 <_printf_i+0x1e6>
 80059e6:	f04f 30ff 	mov.w	r0, #4294967295
 80059ea:	b005      	add	sp, #20
 80059ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059f0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80059f4:	493c      	ldr	r1, [pc, #240]	; (8005ae8 <_printf_i+0x23c>)
 80059f6:	6822      	ldr	r2, [r4, #0]
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80059fe:	f100 0504 	add.w	r5, r0, #4
 8005a02:	601d      	str	r5, [r3, #0]
 8005a04:	d001      	beq.n	8005a0a <_printf_i+0x15e>
 8005a06:	6803      	ldr	r3, [r0, #0]
 8005a08:	e002      	b.n	8005a10 <_printf_i+0x164>
 8005a0a:	0655      	lsls	r5, r2, #25
 8005a0c:	d5fb      	bpl.n	8005a06 <_printf_i+0x15a>
 8005a0e:	8803      	ldrh	r3, [r0, #0]
 8005a10:	07d0      	lsls	r0, r2, #31
 8005a12:	bf44      	itt	mi
 8005a14:	f042 0220 	orrmi.w	r2, r2, #32
 8005a18:	6022      	strmi	r2, [r4, #0]
 8005a1a:	b91b      	cbnz	r3, 8005a24 <_printf_i+0x178>
 8005a1c:	6822      	ldr	r2, [r4, #0]
 8005a1e:	f022 0220 	bic.w	r2, r2, #32
 8005a22:	6022      	str	r2, [r4, #0]
 8005a24:	2210      	movs	r2, #16
 8005a26:	e7b1      	b.n	800598c <_printf_i+0xe0>
 8005a28:	4675      	mov	r5, lr
 8005a2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a2e:	fb02 3310 	mls	r3, r2, r0, r3
 8005a32:	5ccb      	ldrb	r3, [r1, r3]
 8005a34:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	d1f5      	bne.n	8005a2a <_printf_i+0x17e>
 8005a3e:	e7b7      	b.n	80059b0 <_printf_i+0x104>
 8005a40:	6808      	ldr	r0, [r1, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005a48:	6949      	ldr	r1, [r1, #20]
 8005a4a:	d004      	beq.n	8005a56 <_printf_i+0x1aa>
 8005a4c:	1d10      	adds	r0, r2, #4
 8005a4e:	6018      	str	r0, [r3, #0]
 8005a50:	6813      	ldr	r3, [r2, #0]
 8005a52:	6019      	str	r1, [r3, #0]
 8005a54:	e007      	b.n	8005a66 <_printf_i+0x1ba>
 8005a56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a5a:	f102 0004 	add.w	r0, r2, #4
 8005a5e:	6018      	str	r0, [r3, #0]
 8005a60:	6813      	ldr	r3, [r2, #0]
 8005a62:	d0f6      	beq.n	8005a52 <_printf_i+0x1a6>
 8005a64:	8019      	strh	r1, [r3, #0]
 8005a66:	2300      	movs	r3, #0
 8005a68:	4675      	mov	r5, lr
 8005a6a:	6123      	str	r3, [r4, #16]
 8005a6c:	e7b1      	b.n	80059d2 <_printf_i+0x126>
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	1d11      	adds	r1, r2, #4
 8005a72:	6019      	str	r1, [r3, #0]
 8005a74:	6815      	ldr	r5, [r2, #0]
 8005a76:	2100      	movs	r1, #0
 8005a78:	6862      	ldr	r2, [r4, #4]
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f000 f836 	bl	8005aec <memchr>
 8005a80:	b108      	cbz	r0, 8005a86 <_printf_i+0x1da>
 8005a82:	1b40      	subs	r0, r0, r5
 8005a84:	6060      	str	r0, [r4, #4]
 8005a86:	6863      	ldr	r3, [r4, #4]
 8005a88:	6123      	str	r3, [r4, #16]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a90:	e79f      	b.n	80059d2 <_printf_i+0x126>
 8005a92:	6923      	ldr	r3, [r4, #16]
 8005a94:	462a      	mov	r2, r5
 8005a96:	4639      	mov	r1, r7
 8005a98:	4630      	mov	r0, r6
 8005a9a:	47c0      	blx	r8
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d0a2      	beq.n	80059e6 <_printf_i+0x13a>
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	079b      	lsls	r3, r3, #30
 8005aa4:	d507      	bpl.n	8005ab6 <_printf_i+0x20a>
 8005aa6:	2500      	movs	r5, #0
 8005aa8:	f104 0919 	add.w	r9, r4, #25
 8005aac:	68e3      	ldr	r3, [r4, #12]
 8005aae:	9a03      	ldr	r2, [sp, #12]
 8005ab0:	1a9b      	subs	r3, r3, r2
 8005ab2:	429d      	cmp	r5, r3
 8005ab4:	db05      	blt.n	8005ac2 <_printf_i+0x216>
 8005ab6:	68e0      	ldr	r0, [r4, #12]
 8005ab8:	9b03      	ldr	r3, [sp, #12]
 8005aba:	4298      	cmp	r0, r3
 8005abc:	bfb8      	it	lt
 8005abe:	4618      	movlt	r0, r3
 8005ac0:	e793      	b.n	80059ea <_printf_i+0x13e>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	464a      	mov	r2, r9
 8005ac6:	4639      	mov	r1, r7
 8005ac8:	4630      	mov	r0, r6
 8005aca:	47c0      	blx	r8
 8005acc:	3001      	adds	r0, #1
 8005ace:	d08a      	beq.n	80059e6 <_printf_i+0x13a>
 8005ad0:	3501      	adds	r5, #1
 8005ad2:	e7eb      	b.n	8005aac <_printf_i+0x200>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1a7      	bne.n	8005a28 <_printf_i+0x17c>
 8005ad8:	780b      	ldrb	r3, [r1, #0]
 8005ada:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ade:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ae2:	e765      	b.n	80059b0 <_printf_i+0x104>
 8005ae4:	08005c53 	.word	0x08005c53
 8005ae8:	08005c42 	.word	0x08005c42

08005aec <memchr>:
 8005aec:	b510      	push	{r4, lr}
 8005aee:	b2c9      	uxtb	r1, r1
 8005af0:	4402      	add	r2, r0
 8005af2:	4290      	cmp	r0, r2
 8005af4:	4603      	mov	r3, r0
 8005af6:	d101      	bne.n	8005afc <memchr+0x10>
 8005af8:	2000      	movs	r0, #0
 8005afa:	bd10      	pop	{r4, pc}
 8005afc:	781c      	ldrb	r4, [r3, #0]
 8005afe:	3001      	adds	r0, #1
 8005b00:	428c      	cmp	r4, r1
 8005b02:	d1f6      	bne.n	8005af2 <memchr+0x6>
 8005b04:	4618      	mov	r0, r3
 8005b06:	bd10      	pop	{r4, pc}

08005b08 <memcpy>:
 8005b08:	b510      	push	{r4, lr}
 8005b0a:	1e43      	subs	r3, r0, #1
 8005b0c:	440a      	add	r2, r1
 8005b0e:	4291      	cmp	r1, r2
 8005b10:	d100      	bne.n	8005b14 <memcpy+0xc>
 8005b12:	bd10      	pop	{r4, pc}
 8005b14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b1c:	e7f7      	b.n	8005b0e <memcpy+0x6>

08005b1e <memmove>:
 8005b1e:	4288      	cmp	r0, r1
 8005b20:	b510      	push	{r4, lr}
 8005b22:	eb01 0302 	add.w	r3, r1, r2
 8005b26:	d803      	bhi.n	8005b30 <memmove+0x12>
 8005b28:	1e42      	subs	r2, r0, #1
 8005b2a:	4299      	cmp	r1, r3
 8005b2c:	d10c      	bne.n	8005b48 <memmove+0x2a>
 8005b2e:	bd10      	pop	{r4, pc}
 8005b30:	4298      	cmp	r0, r3
 8005b32:	d2f9      	bcs.n	8005b28 <memmove+0xa>
 8005b34:	1881      	adds	r1, r0, r2
 8005b36:	1ad2      	subs	r2, r2, r3
 8005b38:	42d3      	cmn	r3, r2
 8005b3a:	d100      	bne.n	8005b3e <memmove+0x20>
 8005b3c:	bd10      	pop	{r4, pc}
 8005b3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b42:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005b46:	e7f7      	b.n	8005b38 <memmove+0x1a>
 8005b48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b4c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005b50:	e7eb      	b.n	8005b2a <memmove+0xc>

08005b52 <_realloc_r>:
 8005b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b54:	4607      	mov	r7, r0
 8005b56:	4614      	mov	r4, r2
 8005b58:	460e      	mov	r6, r1
 8005b5a:	b921      	cbnz	r1, 8005b66 <_realloc_r+0x14>
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005b62:	f7ff bc0b 	b.w	800537c <_malloc_r>
 8005b66:	b922      	cbnz	r2, 8005b72 <_realloc_r+0x20>
 8005b68:	f7ff fbbc 	bl	80052e4 <_free_r>
 8005b6c:	4625      	mov	r5, r4
 8005b6e:	4628      	mov	r0, r5
 8005b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b72:	f000 f814 	bl	8005b9e <_malloc_usable_size_r>
 8005b76:	4284      	cmp	r4, r0
 8005b78:	d90f      	bls.n	8005b9a <_realloc_r+0x48>
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	f7ff fbfd 	bl	800537c <_malloc_r>
 8005b82:	4605      	mov	r5, r0
 8005b84:	2800      	cmp	r0, #0
 8005b86:	d0f2      	beq.n	8005b6e <_realloc_r+0x1c>
 8005b88:	4631      	mov	r1, r6
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	f7ff ffbc 	bl	8005b08 <memcpy>
 8005b90:	4631      	mov	r1, r6
 8005b92:	4638      	mov	r0, r7
 8005b94:	f7ff fba6 	bl	80052e4 <_free_r>
 8005b98:	e7e9      	b.n	8005b6e <_realloc_r+0x1c>
 8005b9a:	4635      	mov	r5, r6
 8005b9c:	e7e7      	b.n	8005b6e <_realloc_r+0x1c>

08005b9e <_malloc_usable_size_r>:
 8005b9e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	f1a0 0004 	sub.w	r0, r0, #4
 8005ba8:	bfbc      	itt	lt
 8005baa:	580b      	ldrlt	r3, [r1, r0]
 8005bac:	18c0      	addlt	r0, r0, r3
 8005bae:	4770      	bx	lr

08005bb0 <_init>:
 8005bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb2:	bf00      	nop
 8005bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bb6:	bc08      	pop	{r3}
 8005bb8:	469e      	mov	lr, r3
 8005bba:	4770      	bx	lr

08005bbc <_fini>:
 8005bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bbe:	bf00      	nop
 8005bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bc2:	bc08      	pop	{r3}
 8005bc4:	469e      	mov	lr, r3
 8005bc6:	4770      	bx	lr
